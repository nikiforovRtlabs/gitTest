<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <object-id>resultAdmission</object-id>
    <name>resultAdmissionCase</name>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                with defmodel as (select  t.fields_model as fields_model
                from def.template_access_key tak
                join def.template t on t.id  = tak.template_id
                join sec.access_key ak on ak.id = tak.access_key_id
                where  t.page_id = 'resultAdmissionMain' and t.container_id = 'admissionCase' and ak.empl_pos_id = :employeePosId and org_id = :org.id)

                select :select
                from sr_srv_rendered ssr
                left join md_appointment ma on ( ssr.id = ma.srv_rendered_id )
                left join sr_ticket st on ( ma.id = st.id  )
                left join sr_session_ticket sst on ( st.id = sst.ticket_id  )
                left join sr_session ss on ( sst.session_id = ss.id  )
                join md_srv_rendered msr on ( ssr.id = msr.id )
                left join mc_step ms on ( msr.step_id = ms.id )
                left join mc_case mc on ( ms.case_id = mc.id )
                left join plc_visit pv on ( ms.id = pv.id  )
                left join mc_case_type mct on ( mc.case_type_id = mct.id )
                left join mc_care_regimen mcr on ( mc.care_regimen_id = mcr.id )
                left join mc_payment_method mpm on (mc.payment_method_id = mpm.id)
                left join md_care_providing_form mcpf on ( mc.care_providing_form_id = mcpf.id )
                left join fin_funding_source_type ffst on ( mc.funding_id = ffst.id )
                left join md_care_provision_condition mcpc on ( mc.provision_condition_id = mcpc.id )
                left join mc_care_level mcl on ( mc.care_level_id = mcl.id )
                left join mc_case_init_goal mcig on ( mc.init_goal_id = mcig.id )
                left join sr_res_group srgrg on ( ms.res_group_id = srgrg.id )
                left join pim_employee_position peprg on ( srgrg.responsible_id = peprg.id )
                left join pim_employee perg on ( peprg.employee_id = perg.id )
                left join pim_individual pirg on ( perg.individual_id = pirg.id )
                left join sr_res_group msrg on ( ma.executor_id = msrg.id  )
                left join sr_res_group_profile srgp on ( msrg.id = srgp.res_group_id  )
                left join mc_diagnosis md on ( ms.main_diagnosis_id = md.id  )
                left join md_diagnosis md1 on ( md.diagnos_id = md1.id  )
                left join md_diagnosis md2 on ( md.injury_reason_id = md2.id  )
                left join sr_service ssrss on ( ssr.service_id = ssrss.id )
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(ssr)
                from sr_srv_rendered ssr
                left join md_appointment ma on ( ssr.id = ma.srv_rendered_id )
                left join sr_ticket st on ( ma.id = st.id  )
                left join sr_session_ticket sst on ( st.id = sst.ticket_id  )
                left join sr_session ss on ( sst.session_id = ss.id  )
                join md_srv_rendered msr on ( ssr.id = msr.id )
                left join mc_step ms on ( msr.step_id = ms.id )
                left join mc_case mc on ( ms.case_id = mc.id )
                left join mc_case_type mct on ( mc.case_type_id = mct.id )
                left join mc_care_regimen mcr on ( mc.care_regimen_id = mcr.id )
                left join md_care_providing_form mcpf on ( mc.care_providing_form_id = mcpf.id )
                left join fin_funding_source_type ffst on ( mc.funding_id = ffst.id )
                left join md_care_provision_condition mcpc on ( mc.provision_condition_id = mcpc.id )
                left join mc_care_level mcl on ( mc.care_level_id = mcl.id )
                left join mc_case_init_goal mcig on ( mc.init_goal_id = mcig.id )
                left join sr_res_group srgrg on ( ms.res_group_id = srgrg.id )
                left join pim_employee_position peprg on ( srgrg.responsible_id = peprg.id )
                left join pim_employee perg on ( peprg.employee_id = perg.id )
                left join pim_individual pirg on ( perg.individual_id = pirg.id )
                left join sr_res_group msrg on ( ma.executor_id = msrg.id  )
                left join mc_diagnosis md on ( ms.main_diagnosis_id = md.id  )
                left join md_diagnosis md1 on ( md.diagnos_id = md1.id  )
                left join sr_service ssrss on ( ssr.service_id = ssrss.id )
                where :where
            </n2o:count-query>
            <n2o:alias>ssr</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
        </field>

        <field>
            <id>mcCaseId</id>
            <domain>integer</domain>
            <expression>
                (select mc1.id
                from sr_srv_rendered ssr1
                join md_srv_rendered msr1 on ( ssr1.id = msr1.id )
                left join mc_step ms1 on ( msr1.step_id = ms1.id )
                left join mc_case mc1 on ( ms1.case_id = mc1.id )
                where ssr1.id = ssr.id)
            </expression>
        </field>

        <field>
            <id>mcCase.id</id>
            <domain>integer</domain>
            <expression>mc.id</expression>
        </field>

        <field>
            <id>mcCaseHidden.id</id>
            <domain>integer</domain>
            <expression>mc.id</expression>
        </field>

        <field>
            <id>mcCase.uid</id>
            <domain>string</domain>
            <expression>mc.uid</expression>
        </field>

        <field>
            <id>mcCase.name</id>
            <domain>string</domain>
            <expression>
                case when mc.main_diagnos_id is null and mc.open_date is not null then
                        '№' ||coalesce(mc.uid, '') || (case when mc.closing_step_id is null then '  Открыт:' || coalesce(to_char(mc.open_date, 'dd.mm.yyyy'), '')
                        else '  Закрыт:' || coalesce(to_char(mc.close_date, 'dd.mm.yyyy'), '') end )
                    else
                        '№' ||coalesce(mc.uid, '') || (case when mc.closing_step_id is null then '  Открыт:' || coalesce(to_char(mc.open_date, 'dd.mm.yyyy'), '')
                        else '  Закрыт:' || coalesce(to_char(mc.close_date, 'dd.mm.yyyy'), '') end ) ||
                        ' ' || (select (coalesce(md1pr.code, '') || ' ' || coalesce(md1pr.name, ''))
                        from mc_diagnosis mdpr
                        left join md_diagnosis md1pr on ( mdpr.diagnos_id = md1pr.id )
                        where mdpr.id = mc.main_diagnos_id)
                end
            </expression>
        </field>

        <field>
            <id>mcCase.caseOpenDate</id>
            <name>Дата открытия</name>
            <domain>date</domain>
            <expression>mc.open_date</expression>
            <search unavailable="false"/>
        </field>

        <field>
            <id>initialFundingSourceType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(fst) from (
                select
                ffst.id as id,
                ffst.name as name) as fst)
            </expression>
        </field>

        <field>
            <id>mcCase.fundingSourceType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(fst) from (
                select
                ffst.id as id,
                ffst.name as name) as fst)
            </expression>
        </field>

        <field>
            <id>initialIsFinanceTypeControl</id>
            <domain>boolean</domain>
            <expression>mc.is_finance_type_control</expression>
        </field>

        <field>
            <id>mcCase.isFinanceTypeControl</id>
            <domain>boolean</domain>
            <expression>mc.is_finance_type_control</expression>
        </field>

        <field>
            <id>mcCase.careLevel</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(l) from (
                select
                mcl.id as id,
                mcl.name as name) as l)
            </expression>
        </field>

        <field>
            <id>mcCase.caseType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(t) from (
                select
                mct.id as id,
                mct.name as name) as t)
            </expression>
        </field>

        <field>
            <id>mcCase.careRegimen</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select mcr.id as id, mcr.name as name) r)
            </expression>
        </field>

        <field>
            <id>mcCase.careProvidingForm</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(pf) from (
                select
                mcpf.id as id,
                mcpf.name as name) as pf)
            </expression>
        </field>

        <field>
            <id>mcCase.caseInitGoal</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(ig) from (
                select
                mcig.id as id,
                (mcig.code || ' - ' || mcig.name) as name) as ig)
            </expression>
        </field>

        <field>
            <id>mcCase.careProvisionCondition</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(pc) from (
                select
                mcpc.id as id,
                mcpc.name as name) as pc)
            </expression>
        </field>

        <field>
            <id>mcCase.openMoreInfo</id>
            <domain>boolean</domain>
            <expression>:mcCase.openMoreInfo</expression>
        </field>

        <field>
            <id>mcCase.newCase</id>
            <domain>boolean</domain>
            <expression>:mcCase.newCase</expression>
        </field>

        <field>
            <id>resultAdmission.mcCaseId</id>
            <domain>integer</domain>
            <expression>mc.id</expression>
        </field>

        <field>
            <id>resultAdmission.patientId</id>
            <domain>integer</domain>
            <expression>mc.patient_id</expression>
        </field>

        <field>
            <id>resultAdmission.patientName</id>
            <domain>string</domain>
            <expression>(select concat_ws(' ', i.surname, i.name, i.patr_name) from pim_individual i where i.id = mc.patient_id)</expression>
        </field>

        <field>
            <id>resultAdmission.isCaseState</id>
            <domain>boolean</domain>
            <expression>
                (case when mc.closing_step_id is null then false
                else true end)
            </expression>
        </field>

        <field>
            <id>resultAdmission.resGroupName</id>
            <domain>string</domain>
            <name>Врач</name>
            <expression>
                (coalesce(pirg.surname, '') || ' ' || coalesce(pirg.name, '') || ' ' || coalesce(pirg.patr_name, '')|| '
                ' || coalesce(perg.note, ''))
            </expression>
        </field>

        <field>
            <id>resultAdmission.resGroupId</id>
            <domain>integer</domain>
            <expression>srgrg.id</expression>
        </field>

        <field>
            <id>resultAdmission.doctorId</id>
            <domain>integer</domain>
            <expression>peprg.id</expression>
        </field>

        <field>
            <id>resultAdmission.caseMainDiagnosisId</id>
            <domain>integer</domain>
            <expression>
                mc.main_diagnos_id
            </expression>
        </field>

        <field>
            <id>resultAdmission.mdMainDiagnosisId</id>
            <domain>integer</domain>
            <expression>
                (select mc_d.diagnos_id from mc_diagnosis mc_d where mc_d.id=ms.main_diagnosis_id)
            </expression>
        </field>

        <field>
            <id>resultAdmission.id</id>
            <domain>integer</domain>
            <expression>ms.id</expression>
        </field>

        <field>
            <id>visitDateTime</id>
            <domain>date</domain>
            <expression>
                case when ms.id is null then
                (case when ma.id is null then now()
                else ma.bdatetime end)
                else (ms.admission_date + ms.admission_time)
                end
            </expression>
        </field>

        <field>
            <id>visitPlace.id</id>
            <domain>integer</domain>
            <expression>
                pv.place_id
            </expression>
        </field>

        <field>
            <id>visitResGroupId</id>
            <domain>integer</domain>
            <display>ms.res_group_id</display>
        </field>

        <field>
            <id>stage.id</id>
            <domain>integer</domain>
            <expression>
                <!--default значение для этап установления -->
                (case when md.stage_id is null then 3 else md.stage_id end)
            </expression>
        </field>

        <field>
            <id>profile.id</id>
            <domain>integer</domain>
            <expression>
                case when ms.id is null then
                    (case when ma.id is null then
                        (case when (select count(*) from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false) > 1 or
                                        (select count(srgp) from sr_res_group_profile srgp where srgp.res_group_id =
                                            (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)) > 1
                                then null
                                else (select srgp.profile_id from sr_res_group_profile srgp where srgp.res_group_id =
                                                (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false))
                            end)
                        else
                            (case when srgp.profile_id is null then null else srgp.profile_id end)
                        end)
                    else ms.profile_id
                    end
            </expression>
        </field>

        <field>
            <id>profile.name</id>
            <domain>string</domain>
            <expression>
                case when ms.id is null then
                    (case when ma.id is null then
                        (case when (select count(*) from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false) > 1 or
                                    (select count(srgp) from sr_res_group_profile srgp where srgp.res_group_id =
                                        (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)) > 1
                                then null
                                else (select mp1.name from md_profile mp1 where mp1.id = (select srgp.profile_id from sr_res_group_profile srgp where
                                        srgp.res_group_id = (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)))
                            end)
                        else
                            (case when srgp.profile_id is null then null else (select mp1.name from md_profile mp1 where mp1.id = srgp.profile_id) end)
                        end)
                    else (select mp1.name from md_profile mp1 where mp1.id = ms.profile_id)
                end
            </expression>
        </field>

       <!-- <field>
            <id>mcCase.profile.name</id>
            <domain>string</domain>
            <expression>
                case when ms.id is null then
                (case when ma.id is null then
                (case when (select count(*) from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false) > 1 then null
                else (case when (select count(srgp) from sr_res_group_profile srgp where srgp.res_group_id =
                (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)) > 1 then null
                else
                (select mp1.name from md_profile mp1 where mp1.id = (select srgp.profile_id from sr_res_group_profile srgp where srgp.res_group_id =
                (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false))) end)
                end)
                else
                (case when srgp.profile_id is null
                then null else (select mp1.name from md_profile mp1 where mp1.id = srgp.profile_id) end)end)
                else (select mp1.name from md_profile mp1 where mp1.id = ms.profile_id)
                end
            </expression>
        </field>-->

        <field>
            <id>diagnosis.id</id>
            <domain>integer</domain>
            <expression>md1.id</expression>
        </field>

        <field>
            <id>diagnosis.name</id>
            <domain>string</domain>
            <expression>md1.code || ' ' || md1.name</expression>
        </field>

        <field>
            <id>diagnosisCode</id>
            <domain>string</domain>
            <expression>md1.code</expression>
        </field>
        <field>
            <id>diagnosis.isInjury</id>
            <domain>string</domain>
            <expression>md1.is_injury</expression>
        </field>


        <field>
            <id>injuryReason.id</id>
            <domain>string</domain>
            <expression>md2.id</expression>
        </field>

        <field>
            <id>injuryReason.name</id>
            <domain>string</domain>
            <expression>md2.code || ' ' || md2.name</expression>
        </field>

        <field>
            <id>diagnosisId</id>
            <domain>integer</domain>
            <expression>md.id</expression>
        </field>

        <field>
            <id>visitMainDiagnosisIsCreate</id>
            <domain>boolean</domain>
            <expression>(case when ms.main_diagnosis_id is null then false
                else true end)</expression>
        </field>

        <field>
            <id>previewDiagnosisId</id>
            <domain>integer</domain>
            <expression>
                (select mdpr.id
                from mc_diagnosis mdpr
                left join md_diagnosis md1pr on ( mdpr.diagnos_id = md1pr.id )
                left join mc_step mspr on ( mdpr.step_id = mspr.id  )
                where mdpr.case_id = mc.id and mspr.admission_date + mspr.admission_time =
                (select min(ms1.admission_date + ms1.admission_time) from mc_step ms1 where ms1.case_id = mc.id limit 1) and mdpr.is_main = 'true' limit 1)
            </expression>
        </field>

        <field>
            <id>diseaseType.id</id>
            <domain>integer</domain>
            <expression>md.disease_type_id</expression>
        </field>

        <field>
            <id>service</id>
            <domain>object</domain>
            <expression>
                (
                select row_to_json(r)
                from (
                    select id as id, name as name
                    from sr_service
                    where id = (
                        select
                        case when ssrss.id is null
                        then(
                            case when ma.service_id is null
                            then (
                                case when (select count(*) from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false) > 1
                                then null
                                else (
                                    case when (select count(srgs) from sr_res_group_service srgs where srgs.default_service = true and srgs.group_id =
                                        (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)) > 1
                                    then null
                                    else (select srgs.srv_type_id from sr_res_group_service srgs where srgs.default_service = true and srgs.group_id =
                                        (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false))
                                    end)
                                end)
                            else ma.service_id
                            end)
                        else ssrss.id
                    end)) as r)
            </expression>
        </field>

        <field>
            <id>serviceId</id>
            <domain>integer</domain>
            <expression>ssrss.id</expression>
        </field>

        <field>
            <id>repeatedServiceId</id>
            <domain>integer</domain>
            <expression>COALESCE(
                (SELECT ss.id FROM sr_service ss JOIN sr_res_group_service sr ON ss.id = sr.srv_type_id
                 WHERE sr.group_id = ma.executor_id AND ss.name =
                    regexp_replace((SELECT name FROM sr_service WHERE id = ssrss.id)::varchar,'ервичн','овторн' ))
                ,ssrss.id) </expression>
        </field>

        <field>
            <id>renderedId</id>
            <domain>integer</domain>
            <expression>ssr.id</expression>
            <display>:expression</display>
        </field>

        <field>
            <id>initiatior</id>
            <domain>boolean</domain>
            <expression>
                (case when pv.initiator_id = 2 then true
                else false end)
            </expression>
        </field>

        <field>
            <id>patient.id</id>
            <domain>integer</domain>
            <expression>ssr.customer_id</expression>
        </field>

        <field>
            <id>checkPatientAge</id>
            <domain>boolean</domain>
            <expression>(select '3 Years'::INTERVAL >= age(ssr.bdate, birth_dt) from pim_individual where id = ssr.customer_id)</expression>
        </field>

        <field>
            <id>privilegedReceiptForNonRegisterPatients</id>
            <domain>boolean</domain>
            <expression>(select priv_rec_for_unreg_pat::boolean from md_clinic where id = :org.id)</expression>
        </field>

        <field>
            <id>referral.id</id>
            <domain>integer</domain>
            <expression>:referral.id</expression>
        </field>

        <field>
            <id>referral.name</id>
            <domain>integer</domain>
            <expression>:referral.name</expression>
        </field>

        <field>
            <id>appointmentId</id>
            <domain>integer</domain>
            <expression>ma.id</expression>
        </field>

        <field>
            <id>isHouseCall</id>
            <domain>boolean</domain>
            <expression>ss.is_house_call</expression>
        </field>

        <field>
            <id>resourceGroup.id</id>
            <domain>integer</domain>
            <expression>ssr.res_group_id</expression>
        </field>

        <field>
            <id>resourceGroupId</id>
            <domain>string</domain>
            <expression>(case when ma.executor_id is null then 'employeeId='||(select pe1.id from pim_employee pe1
                join pim_employee_position pep on ( pe1.id = pep.employee_id )
                join sr_res_group srg on ( pep.id = srg.responsible_id ) where srg.id = ssr.res_group_id)
                else 'appointment.resourceGroupId='||ma.executor_id end)</expression>
        </field>

        <field>
            <id>serviceRendered.id</id>
            <domain>integer</domain>
            <expression>ssr.id</expression>
        </field>

        <field>
            <id>serviceRendered.orgId</id>
            <domain>integer</domain>
            <expression>ssr.org_id</expression>
        </field>

        <field>
            <id>serviceRendered.patientId</id>
            <domain>integer</domain>
            <expression>ssr.customer_id</expression>
        </field>

        <field>
            <id>serviceRendered.resGroupId</id>
            <domain>integer</domain>
            <expression>ssr.res_group_id</expression>
        </field>

        <field>
            <id>serviceRendered.resGroupIsSystem</id>
            <domain>boolean</domain>
            <expression>
                (select srgg.is_system
                from sr_srv_rendered ssrr
                left join sr_res_group srgg ON ( ssrr.res_group_id = srgg.id  )
                where ssrr.id = ssr.id)
            </expression>
        </field>

        <field>
            <id>serviceRendered.serviceId</id>
            <domain>integer</domain>
            <expression>ma.service_id</expression>
        </field>

        <field>
            <id>step.id</id>
            <domain>integer</domain>
            <expression>ms.id</expression>
        </field>

        <field>
            <id>ticketIdForReport</id>
            <domain>string</domain>
            <expression>(case when ma.id is null then '' else 'ticket_id='||ma.id end)</expression>
        </field>

        <field>
            <id>mcCase.paymentMethod</id>
            <domain>integer</domain>
            <display/>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from (
                select
                mpm.id as id,
                mpm.name as name) as r)
            </expression>
        </field>

        <field>
            <id>mcCase.firstVisitDate</id>
            <domain>date</domain>
            <expression>
                (select ms.admission_date
                from mc_step ms
                where ms.case_id = mc.id and ms.admission_date + ms.admission_time = (select min(ms1.admission_date + ms1.admission_time) from mc_step ms1 where
                ms1.case_id = mc.id limit 1) limit 1)
            </expression>
        </field>



        <field>
            <id>isCaseStateFin</id>
            <domain>boolean</domain>
            <expression>
                (case when mc.closing_step_id is null then false
                else true end)
            </expression>
        </field>

        <field>
            <id>org.id</id>
            <domain>integer</domain>
            <search value="#{org.id?}" />
            <expression>:org.id</expression>
        </field>

        <field>
            <id>emplPos.id</id>
            <domain>integer</domain>
            <display value="#{emplPos.id?}"/>
            <search unavailable="false"/>
            <expression>:emplPos.id</expression>
        </field>

        <field>
            <id>place</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(l) from (
                select
                pcp.id as id,
                pcp.name as name
                from pci_patient_card_place ppcp
                left join pci_card_place pcp on ( ppcp.card_place_id = pcp.id  )
                where ppcp.patient_id = ssr.customer_id and ppcp.date = (select max(ppcp1.date) from pci_patient_card_place ppcp1 where ppcp1.patient_id = ssr.customer_id and ppcp1.clinic_id = :clinicId limit 1)
                and ppcp.clinic_id = :clinicId order by ppcp.id desc limit 1) as l)
            </expression>
        </field>

        <field>
            <id>placeOld</id>
            <domain>integer</domain>
            <expression>
                (select pcp.id
                from pci_patient_card_place ppcp
                left join pci_card_place pcp on ( ppcp.card_place_id = pcp.id  )
                where ppcp.patient_id = ssr.customer_id and ppcp.date =(select max(ppcp1.date) from pci_patient_card_place ppcp1 where ppcp1.patient_id = ssr.customer_id and ppcp1.clinic_id = :clinicId limit 1)
                and ppcp.clinic_id = :clinicId order by ppcp.id desc limit 1)
            </expression>
        </field>

        <field>
            <id>placeEmpl</id>
            <domain>integer</domain>
            <expression>
                (select ppcp.employee_position_id
                from pci_patient_card_place ppcp
                where ppcp.patient_id = ssr.customer_id and ppcp.date =(select max(ppcp1.date) from pci_patient_card_place ppcp1 where ppcp1.patient_id = ssr.customer_id and ppcp1.clinic_id = :clinicId limit 1)
                and ppcp.clinic_id = :clinicId order by ppcp.id desc limit 1)
            </expression>
        </field>

        <field>
            <id>patientId</id>
            <domain>integer</domain>
            <expression>ssr.customer_id</expression>
        </field>

        <field>
            <id>clinicId</id>
            <domain>integer</domain>
            <expression>:clinicId</expression>
            <search value="#{org.id?}">:expression = :clinicId</search>
        </field>

        <field>
            <id>employeePosId</id>
            <domain>integer</domain>
            <expression>:employeePosId</expression>
            <search value="#{emplPos.id?}">:expression = :employeePosId</search>
        </field>

        <field>
            <id>dt</id>
            <name>Дата</name>
            <domain>date</domain>
            <expression>(select now())</expression>
        </field>

        <field>
            <id>patient.orgId</id>
            <domain>integer</domain>
            <expression>ssr.org_id</expression>
        </field>
        
        <field>
            <id>caseCheckNotOpen</id>
            <domain>boolean</domain>
            <expression>
                case when (select count(fbsi.id) from md_srv_rendered msre
                join fin_bill_spec_item fbsi on ( msre.id = fbsi.service_id  )
                where msre.case_id = mc.id) > 0 then true
                else false
                end
            </expression>
        </field>

        <field>
            <id>dentalFormulaId</id>
            <domain>integer</domain>
            <expression>pv.dental_formula_id</expression>
        </field>

        <field>
            <id>age</id>
            <domain>integer</domain>
            <expression>
                (select date_part('year', age(i.birth_dt)) from pim_individual i where i.id = ssr.customer_id)
            </expression>
        </field>

        <field>
            <id>service.stomatologyService</id>
            <domain>boolean</domain>
            <expression>
                CASE WHEN ssrss.id IS NULL
                THEN(
                CASE WHEN ( SELECT count(*) FROM sr_res_group srg WHERE srg.responsible_id = :employeePosId AND srg.is_system = FALSE ) > 1
                THEN FALSE
                ELSE (
                CASE WHEN ( SELECT count(srgs) FROM sr_res_group_service srgs WHERE srgs.default_service = TRUE AND srgs.group_id =( SELECT srg.id FROM sr_res_group srg WHERE srg.responsible_id = :employeePosId AND srg.is_system = FALSE )) > 1
                THEN FALSE
                ELSE
                ( SELECT is_stomat FROM sr_service WHERE id = (SELECT srgs.srv_type_id FROM sr_res_group_service srgs WHERE srgs.default_service = TRUE AND srgs.group_id =( SELECT srg.id FROM sr_res_group srg WHERE srg.responsible_id = :employeePosId AND srg.is_system = FALSE )))
                END )
                END )
                ELSE ssrss.is_stomat
                END
            </expression>
            <display/>
        </field>

        <field>
            <id>isStomatologyVisit</id>
            <domain>boolean</domain>
            <display/>
            <expression>(case when pv.dental_formula_id is not null then true else false end)</expression>
        </field>

        <field>
            <id>pregnantMapExists</id>
            <domain>boolean</domain>
            <expression>
                exists (select 1 from motherhood.mh_pregnant_map pm where pm.patient_id = mc.patient_id
                    and current_date between pm.reg_dt and coalesce(pm.unreg_dt, 'infinity'))
            </expression>
        </field>

        <field>
            <id>rankin.id</id>
            <domain>integer</domain>
            <expression>mc.rankin_scale_for_admission_id</expression>
        </field>

        <!--default model-->

        <field>
            <id>mcCaseDef.caseOpenDate</id>
            <name>Дата</name>
            <domain>date</domain>
            <expression>
                case when ma.id is null then now()
                else ma.bdatetime
                end
            </expression>
        </field>

        <field>
            <id>mcCaseDef.fundingSourceType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(fst) from (
                select id as id, name as name
                from fin_funding_source_type where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'fundingSourceType')::json ->> 'id')::int from defmodel dm)
                ) as fst)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.caseType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(t) from (
                select id as id, name as name
                from mc_case_type where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'caseType')::json ->> 'id')::int from defmodel dm)
                ) as t)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.mcCaseCareRegimen</id>
            <domain>object</domain>
            <expression>
                coalesce((select row_to_json(t) from (
                select id as id, name as name
                from mc_care_regimen where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'mcCaseCareRegimen')::json ->> 'id')::int from defmodel dm)
                ) as t),
                (select row_to_json(r) from (
                select
                mcrd.id as id,
                mcrd.name as name
                from mc_care_regimen mcrd where mcrd.code='1' limit 1) as r))
            </expression>
        </field>

        <field>
            <id>mcCaseDef.careLevel</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(t) from (
                select id as id, name as name
                from mc_care_level where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'careLevel')::json ->> 'id')::int from defmodel dm)
                ) as t)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.careRegimen</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from (
                select
                mcrd.id as id,
                mcrd.name as name
                from mc_care_regimen mcrd where mcrd.code='1' limit 1) as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.caseInitGoal</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(t) from (
                select id as id, name as name
                from mc_case_init_goal where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'caseInitGoal')::json ->> 'id')::int from defmodel dm)
                ) as t)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.careProvidingForm</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(t) from (
                select id as id, name as name
                from md_care_providing_form where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'careProvidingForm')::json ->> 'id')::int from defmodel dm)
                ) as t)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.careProvisionCondition</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select id as id, name as name
                from md_care_provision_condition
                where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'careProvisionCondition')::json ->> 'id')::int from defmodel dm)
                )as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.paymentMethod</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select id as id, name as name
                from mc_payment_method
                where id = (
                select  (((dm.fields_model::json -> 'mcCase')::json -> 'paymentMethod')::json ->> 'id')::int from defmodel dm)
                )as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.visitPlace</id>
            <domain>object</domain>
            <expression>
                coalesce((select row_to_json(r) from(select id as id, name as name
                from plc_visit_place
                where id = (
                select  ((dm.fields_model::json -> 'visitPlace')::json ->> 'id')::int from defmodel dm)
                )as r),
                (select row_to_json(r) from(select id as id, name as name from  plc_visit_place where code = '1') as r))
            </expression>
        </field>

        <field>
            <id>mcCaseDef.profile</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select id as id, name as name
                from md_profile
                where id = (
                select  ((dm.fields_model::json -> 'profile')::json ->> 'id')::int from defmodel dm)
                )as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.diagnosis</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select id as id, name as name
                from md_diagnosis
                where id = (
                select  ((dm.fields_model::json -> 'diagnosis')::json ->> 'id')::int from defmodel dm)
                )as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.service</id>
            <domain>object</domain>
            <expression>
                (
                    select row_to_json(r)
                    from (
                        select id as id, name as name
                        from sr_service
                        where id = (
                            select coalesce(
                                (case when ssrss.id is null
                                then(
                                    case when ma.service_id is null
                                    then (
                                        case when (select count(*) from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false) > 1
                                        then null
                                        else (
                                            case when (select count(srgs) from sr_res_group_service srgs where srgs.default_service = true and srgs.group_id =
                                                (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false)) > 1
                                            then null
                                            else (select srgs.srv_type_id from sr_res_group_service srgs where srgs.default_service = true and srgs.group_id =
                                                (select srg.id from sr_res_group srg where srg.responsible_id = :employeePosId and srg.is_system = false))
                                            end)
                                        end)
                                    else ma.service_id
                                    end)
                                else ssrss.id
                                end),
                                (select  ((dm.fields_model::json -> 'service')::json ->> 'id')::int from defmodel dm)
                            )
                        )
                ) as r)
            </expression>
        </field>

        <field>
            <id>mcCaseDef.diseaseType</id>
            <domain>object</domain>
            <expression>
                (select row_to_json(r) from(select id as id, name as name
                from mc_disease_type
                where id = (
                select  ((dm.fields_model::json -> 'diseaseType')::json ->> 'id')::int from defmodel dm)
                )as r)
            </expression>
        </field>
        <!--/defaultModel-->
        <field>
            <id>mcCase.isNewCheck</id>
            <domain>boolean</domain>
            <expression>false</expression>
        </field>

    </fields>
</query>