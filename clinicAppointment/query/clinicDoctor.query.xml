<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <object-id>clinicAppointment</object-id>
    <name>clinicDoctor</name>
    <execution>
        <n2o:sql>
            <n2o:items-query>select :select
                from mc_case mc
                left join mc_step ms on ( ms.case_id = mc.id )
                left join sr_res_group srg on ( ms.res_group_id = srg.id  )
                left join pim_employee_position pep on ( srg.responsible_id = pep.id  )
                left join pim_employee pe on ( pep.employee_id = pe.id  )
                left join pim_individual pi on ( pe.individual_id = pi.id  )
                left join pim_position pp on ( pep.position_id = pp.id )
                left join pim_speciality ps on ( pp.speciality_id = ps.id  )

                where
                <!--srg.is_system = false and -->
                mc.id = ANY(select mc1.id from pim_individual pi1 inner join pim_employee pe1 on pe1.individual_id = pi1.id
                inner join pim_employee_position pep1 on pe1.id = pep1.employee_id
                inner join sr_res_group srg1 on srg1.responsible_id = pep1.id
                inner join pim_position pp1 on pep1.position_id = pp1.id
                inner join mc_step ms1 on ( ms1.res_group_id = srg1.id  )
                inner join mc_case mc1 on ( ms1.case_id = mc1.id )
                WHERE mc1.clinic_id = mc.clinic_id and pi1.id = pi.id and mc1.patient_id = mc.patient_id
                <!--and srg1.is_system = false -->
                and (case when :specialityId is not null then pp1.speciality_id = :specialityId else true end) ORDER BY mc1.id DESC NULLS LAST LIMIT 1)
                and :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(pi)
                from mc_case mc
                left join mc_step ms on ( ms.case_id = mc.id )
                left join sr_res_group srg on ( ms.res_group_id = srg.id  )
                left join pim_employee_position pep on ( srg.responsible_id = pep.id  )
                left join pim_employee pe on ( pep.employee_id = pe.id  )
                left join pim_individual pi on ( pe.individual_id = pi.id  )
                left join pim_position pp on ( pep.position_id = pp.id )
                left join pim_speciality ps on ( pp.speciality_id = ps.id  )

                where
                <!--srg.is_system = false and -->
                mc.id = ANY(select mc1.id from pim_individual pi1 inner join pim_employee pe1 on pe1.individual_id = pi1.id
                inner join pim_employee_position pep1 on pe1.id = pep1.employee_id
                inner join sr_res_group srg1 on srg1.responsible_id = pep1.id
                inner join pim_position pp1 on pep1.position_id = pp1.id
                inner join mc_step ms1 on ( ms1.res_group_id = srg1.id  )
                inner join mc_case mc1 on ( ms1.case_id = mc1.id )
                WHERE mc1.clinic_id = mc.clinic_id and pi1.id = pi.id and mc1.patient_id = mc.patient_id
                <!--and srg1.is_system = false -->
                and (case when :specialityId is not null then pp1.speciality_id = :specialityId else true end) ORDER BY mc1.id DESC NULLS LAST LIMIT 1)
                and :where
            </n2o:count-query>
            <n2o:alias>pi</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>

        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>pi.id</expression>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>pi.surname ||' '||left(initcap(pi.name),1)||'. '||left(initcap(pi.patr_name),1)|| '. ' || pe.note</expression>
            <search>
                (upper(pi.surname ||' '||pi.name||' '||pi.patr_name) like '%' || upper(:name) || '%'
                or upper(pi.surname) like upper(:name || '%')
                or upper(pi.name) like upper('%' || :name || '%')
                or upper(pi.patr_name) like upper('%' || :name || '%')
                or upper(left(initcap(pi.surname),1)||left(initcap(pi.name),1)||left(initcap(pi.patr_name),1)) like upper('%' || :name || '%'))
            </search>
        </field>

        <!--<field>-->
            <!--<id>orgId</id>-->
            <!--<domain>integer</domain>-->
            <!--<expression>srg.org_id</expression>-->
            <!--<display>:expression</display>-->
        <!--</field>-->

        <field>
            <id>orgId</id>
            <domain>integer</domain>
            <expression>mc.clinic_id</expression>
            <display>:expression</display>
        </field>

        <field>
            <id>specialityId</id>
            <domain>integer</domain>
            <expression>pp.speciality_id</expression>
        </field>

        <field>
            <id>patientId</id>
            <domain>integer</domain>
            <expression>mc.patient_id</expression>
        </field>

    </fields>
</query>