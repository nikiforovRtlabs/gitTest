<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <object-id>hosp_classifier</object-id>

    <execution>
        <n2o:sql>
            <n2o:items-query>select :select from sr_service where :where order by id</n2o:items-query>
            <n2o:count-query>select count(1) from sr_service where :where</n2o:count-query>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>id</expression>
            <search>:expression = :id</search>
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>coalesce(code || ' ' || name, name)</expression>
            <search>upper(:expression) like '%'||upper(:name)||'%'</search>
        </field>
        <field>
            <id>orgId</id>
            <domain>integer</domain>
            <expression>org_id</expression>
            <search>:expression = :orgId</search>
        </field>
        <field>
            <id>beginDate</id>
            <domain>date</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>
        <field>
            <id>endDate</id>
            <domain>date</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>
        <field>
            <id>period</id>
            <domain>boolean</domain>
            <display unavailable="true"/>
            <search>
                <![CDATA[(not(:beginDate::date is not null and to_dt is not null and to_date(:beginDate, 'yyyy-MM-dd') > to_dt or
                :endDate::date is not null and from_dt is not null and to_date(:endDate, 'yyyy-MM-dd') < from_dt))
                ]]></search>
        </field>
        <field>
            <id>templateId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search>id not in (select service_id from services_template_service where template_id = :templateId and (:saveServiceId::int4 is null or service_id != :saveServiceId))</search>
        </field>
        <field>
            <id>saveServiceId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>
    </fields>

</query>