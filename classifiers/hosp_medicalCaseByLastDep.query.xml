<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <object-id>hosp_classifier</object-id>

    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select from hsp_record r
                join mc_step s on s.id = r.id
                join mc_case c on c.id = s.case_id
                join pci_patient p on p.id = c.patient_id
                join pim_individual i on i.id = p.id
                left join fin_funding_source_type fst on fst.id = r.funding_id
                where not exists(select 1 from hsp_record h2 inner join mc_step s2 on s2.id = h2.id where s2.case_id = c.id and h2.previous_id = r.id)
                and c.closing_step_id is null and :where
                order by upper(i.surname), upper(i.name), upper(i.patr_name)
            </n2o:items-query>

            <n2o:count-query>
                select count(r) from hsp_record r
                join mc_step s on s.id = r.id
                join mc_case c on c.id = s.case_id
                join pci_patient p on p.id = c.patient_id
                join pim_individual i on i.id = p.id
                left join fin_funding_source_type fst on fst.id = r.funding_id
                where not exists(select 1 from hsp_record h2 inner join mc_step s2 on s2.id = h2.id where s2.case_id = c.id and h2.previous_id = r.id)
                and c.closing_step_id is null and :where
            </n2o:count-query>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>c.id</expression>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>
                coalesce('â„–' || c.uid || ' ', '') ||
                (coalesce(i.surname, '') || coalesce(' ' || i.name, '')  || coalesce(' ' || i.patr_name, '')) ||
                coalesce('(' || to_char(i.birth_dt, 'dd/MM/yyyy') || ')', '')
             </expression>
            <search>upper(:expression) like '%'||upper(:name)||'%'</search>
        </field>

        <field>
            <id>patient.id</id>
            <domain>integer</domain>
            <expression>c.patient_id</expression>
        </field>

        <field>
            <id>clinic.id</id>
            <domain>integer</domain>
            <expression>c.clinic_id</expression>
        </field>

        <field>
            <id>step.id</id>
            <domain>integer</domain>
            <expression>r.id</expression>
        </field>

        <field>
            <id>financialType.id</id>
            <domain>integer</domain>
            <expression>fst.id</expression>
        </field>

        <field>
            <id>financialType.name</id>
            <domain>integer</domain>
            <expression>fst.name</expression>
        </field>

        <field>
            <id>departmentId</id>
            <domain>integer</domain>
            <expression>r.department_id</expression>
        </field>


    </fields>

</query>