<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <object-id>hosp_classifier</object-id>

    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select from services_template st where :where and (:financialTypeId is null or
                not exists
                (select * from services_template_prescription stp
                join services_template_prescription_holding stph on stp.id = stph.prescription_id where st.id = stp.template_id
                and exists
                (select * from inventory.holding h  where h.id = stph.holding_id
                and not exists
                (select * from inventory.hold_modif hm
                join inventory.form_type ft on ft.id = hm.form_type_id
                join inventory.batch b on b.hold_modif_id = hm.id
                join inventory.store_supply ss on ss.batch_id = b.id
                join inventory.store s on s.id = ss.store_id
                where h.id = hm.holding_id and hm.mnei_id = stph.hold_mnei_id and ss.funding_source_id  in (select ffs.id from
                inventory.funding_source ffs
                inner join inventory.funding_source_payment_type fspt1 on fspt1.funding_source_id = ffs.id
                inner join fin_funding_source_type ffst on ffst.id=fspt1.payment_type_id
                where :financialId = ffst.id and fspt1.is_check_accounting = true
                and (fspt1.org_id is null or fspt1.org_id = :orgId)
                and (ffs.org_id is null or ffs.org_id = :orgId))))))

            </n2o:items-query>
            <n2o:count-query>
                select count(*) from services_template st where :where and (:financialTypeId is null or
                not exists
                (select * from services_template_prescription stp
                join services_template_prescription_holding stph on stp.id = stph.prescription_id where st.id = stp.template_id
                and exists
                (select * from inventory.holding h  where h.id = stph.holding_id
                and not exists
                (select * from inventory.hold_modif hm
                join inventory.form_type ft on ft.id = hm.form_type_id
                join inventory.batch b on b.hold_modif_id = hm.id
                join inventory.store_supply ss on ss.batch_id = b.id
                join inventory.store s on s.id = ss.store_id
                where h.id = hm.holding_id and hm.mnei_id = stph.hold_mnei_id and ss.funding_source_id  in (select ffs.id from
                inventory.funding_source ffs
                inner join inventory.funding_source_payment_type fspt1 on fspt1.funding_source_id = ffs.id
                inner join fin_funding_source_type ffst on ffst.id=fspt1.payment_type_id
                where :financialId = ffst.id and fspt1.is_check_accounting = true
                and (fspt1.org_id is null or fspt1.org_id = :orgId)
                and (ffs.org_id is null or ffs.org_id = :orgId))))))

            </n2o:count-query>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>st.id</expression>
            <search>id = :id</search>
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>st.name</expression>
            <search>upper(:expression) like '%'||upper(:name)||'%'</search>
        </field>

        <field>
            <id>orgId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search>st.clinic_id = :orgId</search>
        </field>

        <field>
            <id>isService</id>
            <domain>boolean</domain>
            <expression>st.is_service</expression>
        </field>

        <field>
            <id>isHolding</id>
            <domain>boolean</domain>
            <expression>st.is_holding</expression>
        </field>

        <field>
            <id>financialTypeId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>

        <field>
            <id>financialTypeName</id>
            <domain>string</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>

        <field>
            <id>financialId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>
    </fields>

</query>