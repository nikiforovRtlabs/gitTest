<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <object-id>statisticalMap</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select from sr_res_group_relationship rgr
                join mc_step s on s.res_group_id = rgr.group_id
                join hsp_record r on r.id = s.id
                join pim_department d on d.id = r.department_id
                join pim_employee_position_resource epr on epr.id = rgr.resource_id
                join pim_employee_position ep on ep.id = epr.employee_position_id
                join pim_employee e on e.id = ep.employee_id
                join pim_individual i on i.id = e.individual_id
                where d.type_id != 4 and exists
                (select rr.id from sr_res_role rr where rr.id = rgr.role_id and rr.kind_id = 1 and rr.is_default_doctor_role is true) and :where
                order by :order
            </n2o:items-query>

            <n2o:count-query>
                select count(1) from sr_res_group_relationship rgr
                join mc_step s on s.res_group_id = rgr.group_id
                join hsp_record r on r.id = s.id
                join pim_department d on d.id = r.department_id
                join pim_employee_position_resource epr on epr.id = rgr.resource_id
                join pim_employee_position ep on ep.id = epr.employee_position_id
                join pim_employee e on e.id = ep.employee_id
                join pim_individual i on i.id = e.individual_id
                where d.type_id != 4 and exists
                (select rr.id from sr_res_role rr where rr.id = rgr.role_id and rr.kind_id = 1 and rr.is_default_doctor_role is true) and :where
            </n2o:count-query>

        </n2o:sql>
    </execution>

    <fields>

        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>rgr.id</expression>
        </field>

        <field>
            <id>doctor</id>
            <domain>string</domain>
            <name>Врач</name>
            <expression>coalesce(i.surname, '') || ' '
                || case coalesce(substring(i.name for 1), '') when '' then '' else substring(i.name for 1) || '.' end
                || ' ' || case coalesce(substring(i.patr_name for 1), '') when '' then '' else substring(i.patr_name for 1) || '.' end
            </expression>
            <sorting>:expression</sorting>
        </field>

        <field>
            <id>bdatetime</id>
            <domain>date</domain>
            <name>Дата начала</name>
            <expression>rgr.bdatetime</expression>
            <sorting>:expression</sorting>
        </field>

        <field>
            <id>edatetime</id>
            <domain>date</domain>
            <name>Дата окончания</name>
            <expression>rgr.edatetime</expression>
            <sorting>:expression</sorting>
        </field>

        <field>
            <id>department</id>
            <domain>string</domain>
            <name>Отделение</name>
            <expression>d.name</expression>
            <sorting>:expression</sorting>
        </field>

        <field>
            <id>caseId</id>
            <domain>integer</domain>
            <display unavailable="true"/>
            <search>s.case_id = :caseId</search>
        </field>

    </fields>
</query>