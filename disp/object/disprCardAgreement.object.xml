<?xml version='1.0' encoding='UTF-8'?>
<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xsi:schemaLocation="http://n2oapp.net/framework/config/schema/object-1.0 http://localhost:8080/n2o/config/schema/object/object-1.0.xsd">
    <name>disprCardAgreement</name>

    <actions>
        <action id="agreeService" name="Согласиться">
            <invocation>
                <sp:stored-procedure name="disp.agreeServiceForPatient" data-source="jdbc/lsd"/>
            </invocation>
            <in-parameters>
                <param name="agreeId" mapping="[0]"/>
                <param name="serviceId" mapping="[1]"/>
                <param name="agree" mapping="[2]"/>
                <param name="denial" mapping="[3]"/>
                <param name="agreeDate" mapping="[4]" domain="string"/>
                <param name="mainId" mapping="[5]"/>
            </in-parameters>
        </action>
        <action id="deniService" name="Отказ">
            <invocation>
                <sp:stored-procedure name="disp.denialServiceForPatient" data-source="jdbc/lsd"/>
            </invocation>
            <in-parameters>
                <param name="agreeId" mapping="[0]"/>
                <param name="serviceId" mapping="[1]"/>
                <param name="agree" mapping="[2]"/>
                <param name="denial" mapping="[3]"/>
                <param name="agreeDate" mapping="[4]" domain="string"/>
                <param name="mainId" mapping="[5]"/>
            </in-parameters>
        </action>
        <action id="agreeDispr" name="Отказ/Согласие дис">
            <invocation>
                <sql:sql>
                    select disp.agreement(:generalDate, :mainId, :check_pres_group_id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="generalDate" mapping="['generalDate']" domain="string"/>
                <param name="mainId" mapping="['mainId']" domain="integer"/>
                <param name="check_pres_group*.id" mapping="['check_pres_group_id']" domain="string"/>
                <param name="id" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="setRequiredService"/><!--
                <validation ref-id="correctDate"/>-->
                <validation ref-id="serviceInBill"/>
                <validation ref-id="validateExistsCaseWithSameInitGoal"/>
            </validations>
        </action>
        <action id="deniDispr" name="Отказ/Согласие дис">
            <invocation>
                <!--<sp:stored-procedure name="disp.deniDisprForPatient" data-source="jdbc/lsd"/>-->
                <sql:sql>
                   SELECT disp.deniDisprForPatient(:gddid, :gdate, :mid, :esidArr, :checkSrv, :esidArr2,:case);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="generalDeniDispr.id" mapping="['gddid']" domain="integer"/>
                <param name="generalDate" mapping="['gdate']" domain="string"/>
                <param name="mainId" mapping="['mid']" domain="integer"/>
                <param name="event_services*.id" mapping="['esidArr']" domain="string"/>
                <param name="check_pres_group*.id" mapping="['checkSrv']" domain="string"/>
                <param name="event_services_2*.id" mapping="['esidArr2']" domain="string"/>
                <param name="case_id" mapping="['case']" domain="integer"/>
                <param name="id" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <!--<validation ref-id="correctDate"/>-->
                <validation ref-id="serviceInBill"/>
                <validation ref-id="denialSetRequiredService"/>
                <validation ref-id="denialRenderServiceInBill"/>
                <validation ref-id="denialRenderService"/>
                <validation ref-id="validateExistsCaseWithSameInitGoalForDeni"/>
            </validations>
        </action>
        <action id="agreeServiceForPatientAll" name="Согласиться">
            <invocation>
                <sp:stored-procedure name="disp.agreeServiceForPatientAll" data-source="jdbc/lsd"/>
            </invocation>
            <in-parameters>
                <param name="agreeId" mapping="[0]"/>
                <param name="serviceId" mapping="[1]"/>
                <param name="agree" mapping="[2]"/>
                <param name="denial" mapping="[3]"/>
                <param name="agreeDate" mapping="[4]" domain="string"/>
                <param name="mainId" mapping="[5]"/>
            </in-parameters>
        </action>
        <action id="denialServiceForPatientAll" name="Отказ">
            <invocation>
                <sp:stored-procedure name="disp.denialServiceForPatientAll" data-source="jdbc/lsd"/>
            </invocation>
            <in-parameters>
                <param name="agreeId" mapping="[0]"/>
                <param name="serviceId" mapping="[1]"/>
                <param name="agree" mapping="[2]"/>
                <param name="denial" mapping="[3]"/>
                <param name="agreeDate" mapping="[4]" domain="string"/>
                <param name="mainId" mapping="[5]"/>
            </in-parameters>
        </action>
    </actions>
<validations>
    <constraint id="correctData" level="error">
        <invocation>
            <sql:sql>
                SELECT to_date(:date, 'dd.mm.yyyy') >= to_date(:birthDate, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
            <param name="birthDate" mapping="['birthDate']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата согласия не может быть раньше даты рождения</message>
    </constraint>

    <constraint id="correctDataInterval" level="error">
        <invocation>
            <sql:sql>
                SELECT now()>=to_date(:date, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата согласия не должна быть больше текущей даты</message>
    </constraint>


    <constraint id="correctDataInterval_2" level="error">
        <invocation>
            <sql:sql>
                SELECT to_date(:date, 'dd.mm.yyyy') >=to_date(:start, 'dd.mm.yyyy')
                and to_date(:end, 'dd.mm.yyyy') >=to_date(:date, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
            <param name="start" mapping="['start']" domain="string"/>
            <param name="end" mapping="['end']" domain="string"/>
            <param name="startDate" mapping="['startDate']" domain="string"/>
            <param name="endDate" mapping="['endDate']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата согласия должна входить в период проведения мероприятия {startDate} - {endDate}</message>
    </constraint>



    <constraint id="correctDataIntervalDenial" level="error">
        <invocation>
            <sql:sql>
                SELECT now()>=to_date(:date, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата отказа не должна быть больше текущей даты</message>
    </constraint>


    <constraint id="correctDataIntervalDenial_2" level="error">
        <invocation>
            <sql:sql>
                SELECT to_date(:date, 'dd.mm.yyyy') >=to_date(:start, 'dd.mm.yyyy')
                and to_date(:end, 'dd.mm.yyyy') >=to_date(:date, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
            <param name="start" mapping="['start']" domain="string"/>
            <param name="end" mapping="['end']" domain="string"/>
            <param name="startDate" mapping="['startDate']" domain="string"/>
            <param name="endDate" mapping="['endDate']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата отказа должна входить в период проведения мероприятия {startDate} - {endDate}</message>
    </constraint>

    <constraint id="correctDataDenial" level="error">
        <invocation>
            <sql:sql>
                SELECT to_date(:date, 'dd.mm.yyyy') >= to_date(:birthDate, 'dd.mm.yyyy')
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['date']" domain="string"/>
            <param name="birthDate" mapping="['birthDate']" domain="string"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата отказа не может быть раньше даты рождения</message>
    </constraint>


    <constraint id="denialSetRequiredService" level="error" moment="before-action">
        <message>Нельзя отказаться от обязательных услуг : "{value}"</message>
        <invocation>
            <sql:sql>
                select disp.denialsetrequiredserviceforpatient(:gddid, :checkPresGroup,:esidArr,:esidArr2,
                :id);
            </sql:sql>
        </invocation>
        <in-parameters>

            <param name="generalDeniDispr.id" mapping="['gddid']" domain="integer"/>
            <param name="check_pres_group*.id" mapping="['checkPresGroup']" domain="integer[]"/>
            <param name="event_services*.id" mapping="['esidArr']" domain="string"/>
            <param name="event_services_2*.id" mapping="['esidArr2']" domain="string"/>
            <param name="mainId" mapping="['id']" domain="integer"/>
        </in-parameters>
        <out-parameters>
            <param name="value" mapping="[0][0][0]"/>
        </out-parameters>
        <result expression="[0][0][0]=='true'"/>
    </constraint>


    <constraint id="denialRenderService" level="warning" moment="before-action">
        <message>Пациенту оказаны услуги : "{value}". При отказе они будут очищены. Продолжить?</message>
        <invocation>
            <sql:sql>
                select disp.denialrenderingservice(:gddid, :checkPresGroup,:esidArr::character varying,:esidArr2,:id);
            </sql:sql>
        </invocation>
        <in-parameters>

            <param name="generalDeniDispr.id" mapping="['gddid']" domain="integer"/>
            <param name="check_pres_group*.id" mapping="['checkPresGroup']" domain="integer[]"/>
            <param name="event_services*.id" mapping="['esidArr']" domain="string"/>
            <param name="event_services_2*.id" mapping="['esidArr2']" domain="string"/>
            <param name="mainId" mapping="['id']" domain="integer"/>
        </in-parameters>
        <out-parameters>
            <param name="value" mapping="[0][0][0]"/>
        </out-parameters>
        <result expression="[0][0][0]=='true'"/>
    </constraint>



    <constraint id="setRequiredService" level="error">
        <message>Не назначены обязательные услуги : "{value}"</message>
        <invocation>
            <sql:sql>
                select disp.setrequiredserviceforpatient(:checkPresGroup,
                :id);
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="check_pres_group*.id" mapping="['checkPresGroup']" domain="integer[]"/>
            <param name="mainId" mapping="['id']"/>
        </in-parameters>
        <out-parameters>
            <param name="value" mapping="[0][0][0]"/>
        </out-parameters>
        <result expression="[0][0][0]=='true'"/>
    </constraint>

    <!--<constraint id="correctDate" level="warning">
        <invocation>
            <sql:sql>
                select exists(select 1 from disp.md_event_patient mep
                left join pim_individual i on mep.indiv_id=i.id
                left join pci_patient pci on pci.id = i.id
                left join pci_patient_reg pcireg on pcireg.patient_id = i.id
                where pcireg.state_id = (select id from md_reg_state where code = '1') and mep.id = :mainId
                and to_date(:generalDate ,'DD.MM.YYYY')> pcireg.reg_dt
                and (pcireg.unreg_dt is null or pcireg.unreg_dt > to_date(:generalDate,'DD.MM.YYYY') )
                )
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDate" mapping="['generalDate']" domain="string"/>
            <param name="mainId" mapping="['mainId']" domain="integer"/>
        </in-parameters>
        <result expression="[0][0][0] == true"/>
        <message>Дата согласия выходит за рамки дат прикрепления пациента</message>
    </constraint>-->
    <constraint id="serviceInBill" level="error">
        <message>На случай сформирован счет-реестр, действие запрещено</message>
        <invocation>
            <sql:sql>
                select disp.service_validate5(:id)
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="mainId" mapping="['id']"/>
        </in-parameters>
        <result expression="[0][0][0] == 0"/>
    </constraint>
    <constraint id="denialRenderServiceInBill" level="error" moment="before-action">
        <message>Пациенту оказаны услуги : "{value}". Они входят в состав счёта и не могут быть очищены.</message>
        <invocation>
            <sql:sql>
                select disp.denidisprvalidation(:gddid, :mid,:esidArr2);
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="generalDeniDispr.id" mapping="['gddid']" domain="integer"/>
            <param name="mainId" mapping="['mid']" domain="integer"/>
            <param name="event_services_2*.id" mapping="['esidArr2']" domain="string"/>
        </in-parameters>
        <out-parameters>
            <param name="value" mapping="[0][0][0]" domain="string"/>
        </out-parameters>
        <result expression="([0][0][0]=='') || ([0][0][0]==null)"/>
    </constraint>
    <constraint id="validateExistsCaseWithSameInitGoal" level="warning">
        <message>{mess}</message>
        <invocation>
            <sql:sql>
                select case when :id is null then (select disp.validate_exists_case_with_same_init_goal(:mepid))
                            else null
                            end;
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="mainId" mapping="['mepid']" domain="integer"/>
            <param name="id" mapping="['id']" domain="integer"/>
        </in-parameters>
        <out-parameters>
            <param name="mess" mapping="[0][0][0]" domain="string"/>
        </out-parameters>
        <result expression="[0][0][0] == null"/>
    </constraint>
    <constraint id="validateExistsCaseWithSameInitGoalForDeni" level="warning">
        <message>{mess}</message>
        <invocation>
            <sql:sql>
                select case when (:id is null and :gddid = 1) then (select disp.validate_exists_case_with_same_init_goal(:mepid))
                else null
                end;
            </sql:sql>
        </invocation>
        <in-parameters>
            <param name="mainId" mapping="['mepid']" domain="integer"/>
            <param name="id" mapping="['id']" domain="integer"/>
            <param name="generalDeniDispr.id" mapping="['gddid']" domain="integer"/>
        </in-parameters>
        <out-parameters>
            <param name="mess" mapping="[0][0][0]" domain="string"/>
        </out-parameters>
        <result expression="[0][0][0] == null"/>
    </constraint>
</validations>
    <!--<validations>-->
        <!--<constraint id="checkValidService" level="error">-->
            <!--<invocation>-->
                <!--<sql:sql>-->
                    <!--select count(ssr.id) from disp.md_event_patient mep-->
                    <!--inner join disp.md_event_service_patient mesp on mesp.event_patient_id = mep.id-->
                    <!--left join disp.md_event_eq_case meec on meec.event_patient_id = mep.id-->
                    <!--left join MD_SRV_RENDERED msr on msr.case_id = meec.case_id-->
                    <!--left join SR_SRV_RENDERED ssr on ssr.id = msr.id-->
                    <!--where mep.id = :epid-->
                <!--</sql:sql>-->
            <!--</invocation>-->
            <!--<in-parameters>-->
                <!--<param name="mainId" mapping="['epid']" domain="integer"/>-->
                <!--&lt;!&ndash;<param name="event_services*.id" mapping="['service']" domain="integer[]"/>&ndash;&gt;-->
            <!--</in-parameters>-->
            <!--<result expression="false"/>-->
            <!--<message>ырвоыаоывоа</message>-->
        <!--</constraint>-->
    <!--</validations>-->
</object>