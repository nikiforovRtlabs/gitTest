<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
>
<name>Осмотры и исследования</name>
<object-id>driverCardService</object-id>
<execution>
    <n2o:sql>
        <n2o:items-query>select :select
            from disp.md_event_patient mep
            left join pim_individual i on i.id = mep.indiv_id
            inner join disp.md_event_service_patient mesp on mesp.event_patient_id = mep.id
            left join disp.md_event_service_patient_agreement mespa on mespa.service_id = mesp.id
            left join disp.md_event_service mes on mes.id = mesp.service_id

            left join disp.md_event me on me.id=mep.event_id
            left join md_standard ms on ms.id = me.standard_id
            left join md_norm_document_service mnds on mnds.id = mes.doc_service_id

            left join pim_organization po on po.id = mes.org_id
            left join sr_service ss on ss.id = mes.service_id
            --left join disp.md_event_service_patient_status mesps on mesps.service_id = mesp.id
            left join disp.md_event_service_status mess on mess.code = mesp.status
            left join (select case_id, service_id, res_group_id, ssr2.id from MD_SRV_RENDERED amsr2
            left join SR_SRV_RENDERED ssr2 on ssr2.id = amsr2.id
            ) as msr on msr.case_id = mep.case_id and msr.service_id = mes.service_id
            left join SR_RES_GROUP srg on srg.id = msr.res_group_id
            left join gibdd.md_gibdd_service gs on gs.service_id = msr.id and gs.event_patient_id = mep.id
            left join gibdd.md_gibdd_reference r on r.id = mep.id
            where :where
            order by :order
        </n2o:items-query>
        <n2o:count-query>select count(mep)
            from disp.md_event_patient mep
            left join pim_individual i on i.id = mep.indiv_id
            left join disp.md_event me on me.id=mep.event_id
            inner join disp.md_event_service_patient mesp on mesp.event_patient_id = mep.id
            left join disp.md_event_service_patient_agreement mespa on mespa.service_id = mesp.id
            left join disp.md_event_service mes on mes.id = mesp.service_id




            left join pim_organization po on po.id = mes.org_id
            left join sr_service ss on ss.id = mes.service_id
            --left join disp.md_event_service_patient_status mesps on mesps.service_id = mesp.id
            left join disp.md_event_service_status mess on mess.code = mesp.status
            left join (select case_id, service_id, res_group_id, ssr2.id from MD_SRV_RENDERED amsr2
            left join SR_SRV_RENDERED ssr2 on ssr2.id = amsr2.id
            ) as msr on msr.case_id = mep.case_id and msr.service_id = mes.service_id
            left join SR_RES_GROUP srg on srg.id = msr.res_group_id
            left join gibdd.md_gibdd_service gs on gs.service_id = msr.id and gs.event_patient_id = mep.id
            left join gibdd.md_gibdd_reference r on r.id = mep.id
            where :where
        </n2o:count-query>
        <n2o:alias>mep</n2o:alias>
    </n2o:sql>
</execution>

<fields>
    <field>
        <id>id</id>
        <domain>Integer</domain>
        <display>mesp.id</display>
        <search>mesp.id = :id</search>
    </field>
    <field>
        <id>eventId</id>
        <domain>Integer</domain>
        <display>mesp.event_id</display>
        <search>mesp.event_id = :eventId</search>
    </field>
    <field>
        <id>indivId</id>
        <domain>Integer</domain>
        <display>mesp.indiv_id</display>
        <search>mesp.indiv_id = :indivId</search>
    </field>
    <field>
        <id>mainId</id>
        <domain>Integer</domain>
        <display>mep.id</display>
        <search>mep.id = :mainId</search>
    </field>
    <field>
        <id>service_code</id>
        <domain>string</domain>
        <expression>mnds.code</expression>
        <display>mnds.code</display>
        <search>mnds.code = :service_code</search>
    </field>
    <field>
        <id>service.id</id>
        <domain>Integer</domain>
        <expression>ss.id</expression>
        <display>ss.id</display>
        <search>ss.id = :service.id</search>
    </field>
    <field>
        <id>service.name</id>
        <name>Услуга</name>
        <domain>String</domain>
        <display>ss.name</display>
        <search>ss.name = :service.name</search>
        <sorting>ss.name</sorting>
    </field>
    <field>
        <id>org.id</id>
        <domain>Integer</domain>
        <expression>po.id</expression>
        <display>po.id</display>
        <search>po.id = :org.id</search>
        <sorting>po.id</sorting>
    </field>
    <field>
        <id>org.short_name</id>
        <name>Организация</name>
        <domain>String</domain>
        <expression>po.short_name</expression>
        <display>CASE mesp.status WHEN 4 THEN po.short_name
            WHEN 3 THEN NULLIF(
            (select po2.short_name
            from disp.md_event_service_link mesl
            inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
            left join pim_organization po2 on po2.id = ssr.org_id
            where  mesl.case_id = mep.case_id and mesl.event_service_id = mes.id), NULL
            )
            ELSE NULL
            END</display>
        <search>po.short_name = :org.short_name</search>
        <sorting>po.short_name</sorting>
    </field>
    <field>
        <id>resource.id</id>
        <domain>Integer</domain>
        <expression>srg.id</expression>
        <display>srg.id</display>
        <search>srg.id = :resource.id</search>
    </field>
    <field>
        <id>resource.name</id>
        <name>Ресурс</name>
        <domain>String</domain>
        <expression>srg.name</expression>
        <display>CASE mesp.status WHEN 4 THEN srg.name
            WHEN 3 THEN NULLIF(
            (select srg2.name
            from  disp.md_event_service_link mesl
            inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
            left join SR_RES_GROUP srg2 on srg2.id = ssr.res_group_id
            where  mesl.case_id = mep.case_id and mesl.event_service_id = mes.id), NULL
            )
            ELSE NULL
            END</display>
        <search>srg.name = :resource.name</search>
        <sorting>srg.name</sorting>
    </field>
    <field>
        <id>status.id</id>
        <domain>Integer</domain>
        <expression>mess.id</expression>
        <display>mess.id</display>
        <search>mess.id = :status.id</search>
    </field>
    <field>
        <id>status.name</id>
        <name>Статус</name>
        <domain>String</domain>
        <expression>mess.name</expression>
        <display>mess.name</display>
        <search>mess.name = :status.name</search>
        <sorting>mess.name</sorting>
    </field>
    <field>
        <id>date_render</id>
        <domain>date</domain>
        <name>Дата оказания</name>
        <expression>
            <![CDATA[
                CASE mesp.status WHEN 4 THEN NULLIF(
                                                (select ssr.bdate
                                                from MD_SRV_RENDERED msr
                                                inner join SR_SRV_RENDERED ssr on ssr.id = msr.id and ssr.service_id = mes.service_id
                                                where  msr.case_id = mep.case_id limit 1), NULL
                                              )
                                  WHEN 3 THEN NULLIF(
                                                (select ssr.bdate
                                                from  disp.md_event_service_link mesl
                                                inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
                                                where  mesl.case_id = mep.case_id and mesl.event_service_id = mes.id limit 1), NULL
                                              )
                                  ELSE NULL
                END
                ]]>
        </expression>
        <display>:expression</display>
        <sorting>:expression</sorting>
    </field>

    <field>
        <id>date_deni</id>
        <domain>date</domain>
        <name>Отказ</name>
        <expression>
            <![CDATA[
                CASE mesp.status WHEN 2 THEN NULLIF((select agree_date from disp.md_event_service_patient_agreement where service_id = mesp.id and denial = true), NULL)
                                  ELSE NULL
                END
                ]]>
        </expression>
        <display>
            <![CDATA[
                CASE mesp.status WHEN 2 THEN NULLIF((select agree_date from disp.md_event_service_patient_agreement where service_id = mesp.id and denial = true), NULL)
                                  ELSE NULL
                END
                ]]>
        </display>
    </field>
    <field>
        <id>agreeService</id>
        <domain>boolean</domain>
        <expression>mespa.agree</expression>
        <display>mespa.agree</display>
    </field>
    <field>
        <id>order</id>
        <domain>integer</domain>
        <display>mes.order_idx</display>
        <search unavailable="true" />
        <sorting>mes.order_idx</sorting>
    </field>
    <field>
        <id>first</id>
        <domain>boolean</domain>
        <display>mes.first</display>
        <search unavailable="true" />
        <sorting>mes.first</sorting>
    </field>
    <field>
        <id>last</id>
        <domain>boolean</domain>
        <display>mes.last</display>
        <search unavailable="true" />
        <sorting>mes.last</sorting>
    </field>

    <field>
        <id>v_has_first</id>
        <domain>boolean</domain>
        <display>
            CASE WHEN (select count(*) from disp.md_event_service
            where event_id = mes.event_id and first = TRUE) > 0 THEN TRUE ELSE FALSE END
        </display>
    </field>
    <field>
        <id>v_is_first</id>
        <domain>boolean</domain>
        <display>
            mes.first
        </display>
    </field>
    <field>
        <id>v_first_ren</id>
        <domain>boolean</domain>
        <display>
            CASE WHEN (select mess1.code from disp.md_event_patient mep1
            inner join disp.md_event_service_patient mesp1 on mesp1.indiv_id = mep1.indiv_id and mesp1.event_id = mep1.event_id
            left join disp.md_event_service mes1 on mes1.id = mesp1.service_id
            left join disp.md_event_service_status mess1 on mess1.code = mesp1.status
            where mep1.id = mep.id and mes1.first = TRUE) = 4 THEN TRUE ELSE FALSE END
        </display>
    </field>

    <field>
        <id>v_has_last</id>
        <domain>boolean</domain>
        <display>
            CASE WHEN (select count(*) from disp.md_event_service
            where event_id = mes.event_id and last = TRUE) > 0 THEN TRUE ELSE FALSE END
        </display>
    </field>
    <field>
        <id>v_is_last</id>
        <domain>boolean</domain>
        <display>
            mes.last
        </display>
    </field>
    <field>
        <id>v_last_all_ren</id>
        <domain>boolean</domain>
        <display>
            CASE WHEN (select count(*) from disp.md_event_patient mep1
            inner join disp.md_event_service_patient mesp1 on mesp1.indiv_id = mep1.indiv_id and mesp1.event_id = mep1.event_id
            left join disp.md_event_service mes1 on mes1.id = mesp1.service_id
            left join disp.md_event_service_status mess1 on mess1.code = mesp1.status
            where mep1.id = mep.id and (mes1.last IS NULL or mes1.last = FALSE) and mess1.code = 4) = (select count(*) from disp.md_event_patient mep1
            inner join disp.md_event_service_patient mesp1 on mesp1.indiv_id = mep1.indiv_id and mesp1.event_id = mep1.event_id
            left join disp.md_event_service mes1 on mes1.id = mesp1.service_id

            left join disp.md_event me1 on me1.id=mep1.event_id
            left join md_standard ms1 on ms1.id = me1.standard_id
            left join md_norm_document_service mnds1 on mnds1.id = mes1.doc_service_id

            where mep1.id = mep.id and mnds1.code != 'Д1.18') THEN TRUE ELSE FALSE END
        </display>
    </field>
    <field>
        <id>categories</id>
        <name>Заключение</name>
        <domain>String</domain>
        <display>
            (select string_agg(substr(gc.name, 11) || (case gsc.is_valid when true then ' - Годен' else ' - Не годен' end), ', ') from gibdd.md_gibdd_service_category gsc join gibdd.md_gibdd_category gc on gc.id = gsc.category_id where gsc.gibdd_service_id = gs.id)
        </display>
    </field>
    <field>
        <id>existsNotValid</id>
        <domain>Boolean</domain>
        <display>
            (select case when (not exists(select 1 from gibdd.md_gibdd_service_category mgsc where mgsc.gibdd_service_id = gs.id))
            then 1
            else (case when exists(select 1 from gibdd.md_gibdd_service_category mgsc where mgsc.is_valid = false and mgsc.gibdd_service_id = gs.id) then 2
            else 3 end)
            end)
        </display>
    </field>
    <field>
        <id>ssr_id</id>
        <domain>integer</domain>
        <display>msr.id</display>
        <search unavailable="true"/>
    </field>
    <field>
        <id>cardStatusId</id>
        <domain>integer</domain>
        <display>r.status</display>
    </field>
    <field>
        <id>fio</id>
        <domain>String</domain>
        <expression>concat_ws(' ', i.surname, i.name, i.patr_name)</expression>
        <display>concat_ws(' ', i.surname, i.name, i.patr_name)</display>
        <search>lower(concat_ws(' ', i.surname, i.name, i.patr_name)) like '%' || lower(:fio) || '%'</search>
        <name>ФИО</name>
    </field>
    <field>
        <id>renderedDate.begin</id>
        <domain>date</domain>
        <display unavailable="true"/>
        <expression>
            <![CDATA[
                CASE mesp.status WHEN 4 THEN NULLIF(
                                                (select ssr.bdate
                                                from MD_SRV_RENDERED msr
                                                inner join SR_SRV_RENDERED ssr on ssr.id = msr.id and ssr.service_id = mes.service_id
                                                where msr.case_id = mep.case_id limit 1), NULL
                                              )
                                  WHEN 3 THEN NULLIF(
                                                (select ssr.bdate
                                                from disp.md_event_service_link mesl
                                                inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
                                                where mesl.case_id = mep.case_id and mesl.event_service_id = mes.id limit 1), NULL
                                              )
                                  ELSE NULL
                END
                ]]>
        </expression>
        <search>:expression >= :renderedDate.begin</search>
    </field>
    <field>
        <id>renderedDate.end</id>
        <domain>date</domain>
        <display unavailable="true"/>
        <expression>
            <![CDATA[
                CASE mesp.status WHEN 4 THEN NULLIF(
                                                (select ssr.bdate
                                                from  MD_SRV_RENDERED msr
                                                inner join SR_SRV_RENDERED ssr on ssr.id = msr.id and ssr.service_id = mes.service_id
                                                where msr.case_id = mep.case_id limit 1), NULL
                                              )
                                  WHEN 3 THEN NULLIF(
                                                (select ssr.bdate
                                                from disp.md_event_service_link mesl
                                                inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
                                                where  mesl.case_id = mep.case_id and mesl.event_service_id = mes.id limit 1), NULL
                                              )
                                  ELSE NULL
                END
                ]]>
        </expression>
        <search><![CDATA[
                :expression <= :renderedDate.end
                ]]>
        </search>
    </field>
    <field>
        <id>caseId</id>
        <domain>Integer</domain>
        <display>mep.case_id</display>
        <search>mep.case_id = :caseId</search>
    </field>
    <field>
        <id>mespId</id>
        <domain>Integer</domain>
        <display>mesp.id</display>
        <search>mesp.id = :id</search>
    </field>
    <field>
        <id>org_id</id>
        <domain>Integer</domain>
        <expression>me.org_id</expression>
        <display>me.org_id</display>
    </field>
    <field>
        <id>canRenderService</id>
        <domain>integer</domain>
        <display>(exists(select 1 from sr_res_group rg join sr_res_group_service rgs on rg.id = rgs.group_id
            join sr_res_group_relationship rgr on rg.id = rgr.group_id join sr_resource r on rgr.resource_id = r.id
            join pim_employee_position_resource epr on epr.id = r.id
            where rgs.srv_type_id = ss.id and epr.employee_position_id = :canRenderService))
        </display>
        <search unavailable="true"/>
    </field>
    <field>
        <id>orgContext</id>
        <domain>Integer</domain>
        <display>( case when :emplPosId is not null then ((exists(select 1 from sr_res_group rg join
            sr_res_group_service rgs on rg.id = rgs.group_id
            join sr_res_group_relationship rgr on rg.id = rgr.group_id join sr_resource r on rgr.resource_id = r.id
            join pim_employee_position_resource epr on epr.id = r.id
            where rgs.srv_type_id = ss.id and epr.employee_position_id = :emplPosId)))
            else (mes.org_id=:orgContext) end)
        </display>
        <search>( case when :emplPosId is not null then ((exists(select 1 from sr_res_group rg join sr_res_group_service
            rgs on rg.id = rgs.group_id
            join sr_res_group_relationship rgr on rg.id = rgr.group_id join sr_resource r on rgr.resource_id = r.id
            join pim_employee_position_resource epr on epr.id = r.id
            where rgs.srv_type_id = ss.id and epr.employee_position_id = :emplPosId)))
            else (mes.org_id=:orgContext) end)
        </search>
    </field>
    <field>
        <id>canRenderService2</id>
        <domain>integer</domain>
        <display>
            (exists(select 1 from sr_res_group rg join sr_res_group_service rgs on rg.id = rgs.group_id
            join sr_res_group_relationship rgr on rg.id = rgr.group_id join sr_resource r on rgr.resource_id = r.id
            join pim_employee_position_resource epr on epr.id = r.id
            join pim_employee_position ep on ep.id = epr.employee_position_id
            where rgs.srv_type_id = ss.id and ep.employee_id = (select employee_id from pim_employee_position where id = :canRenderService2)))
        </display>
        <search unavailable="true"/>
    </field>
    <field>
        <id>readOnly</id>
        <domain>boolean</domain>
        <display>:readOnly</display>
        <search unavailable="true"/>
    </field>
    <field>
        <id>dateRenderSorting</id>
        <domain>date</domain>
        <display unavailable="true"/>
        <sorting>
            CASE mesp.status WHEN 4 THEN coalesce(
            (select ssr.bdate
            from MD_SRV_RENDERED msr
            inner join SR_SRV_RENDERED ssr on ssr.id = msr.id and ssr.service_id = mes.service_id
            where  msr.case_id = mep.case_id limit 1), '01.01.1900'::date
            )
            WHEN 3 THEN coalesce(
            (select ssr.bdate
            from disp.md_event_service_link mesl
            inner join SR_SRV_RENDERED ssr on ssr.id = mesl.service_id
            where mesl.case_id = mep.case_id and mesl.event_service_id = mes.id limit 1), '01.01.1900'::date
            )
            ELSE '01.01.1900'::date
            END
        </sorting>
    </field>
    <field>
        <id>is_referral</id>
        <name>Направление</name>
        <domain>boolean</domain>
        <display>(exists(select 1 from md_referral r where r.service_id = msr.id))</display>
    </field>
    <field>
        <id>is_notification</id>
        <name>Извещение</name>
        <domain>boolean</domain>
        <display>(exists(select 1 from disp.md_notification r where r.service_id = msr.id))</display>
    </field>
    <field>
        <id>isActiveCard</id>
        <domain>boolean</domain>
        <display>r.status = 1</display>
        <search>r.status = 1</search>
    </field>
    <field>
        <id>emplPosId</id>
        <domain>integer</domain>
        <display unavailable="true" value="#{emplPos.id?}"/>
    </field>
    <field>
        <id>formId</id>
        <domain>string</domain>
        <display>(select case when count(service_code)=0  Then 'driverCardServiceFormDefault' else
            (select n2o_form from disp.service_n2o_form where service_code = mnds.code limit 1) end
            from disp.service_n2o_form where service_code = mnds.code)</display>
        <search unavailable="true"/>
        <sorting unavailable="true"/>
    </field>

    <field>
        <id>filterBResource</id>
        <domain>boolean</domain>
        <expression>:filterBResource</expression>
        <search>
            (exists (select 1 from sr_res_group_service srgs where srgs.group_id in (select srgx.id FROM SR_RES_GROUP srgx
            WHERE srgx.responsible_id = :canRenderService and ss.id = srgs.srv_type_id)))
        </search>
    </field>

    <!--<field>-->
        <!--<id>testing</id>-->
        <!--<domain>integer</domain>-->
        <!--<expression>(select srgx.id FROM SR_RES_GROUP srgx-->
            <!--WHERE srgx.responsible_id = :canRenderService and srgx.is_system is false limit 1)</expression>-->
    <!--</field>-->
</fields>
</query>