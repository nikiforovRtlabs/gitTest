<?xml version="1.0" encoding="UTF-8"?>
<object xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-2.0">
    <name>toothService</name>

    <actions>
        <action id="createToothService" form-submit-label="Сохранить">
            <invocation>
                <rest:rest method="POST">
                    <rest:query>
                        ${n2o.backend.path}/stomatology/appointmentResult/service
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="tooth*.id" mapping="['toothIds']" domain="integer[]"/>
                <param name="toothSurface.id" mapping="['toothSurfaceId']" domain="integer"/>
                <param name="isRendered" mapping="['isRendered']" domain="boolean"/>
                <param name="clinic.id" mapping="['clinicId']" domain="integer" value="#{org.id}"/>
                <param name="visit.mcCaseId" mapping="['caseId']" domain="integer"/>
                <param name="visit.patientId" mapping="['patientId']" domain="integer"/>
                <param name="visit.id" mapping="['stepId']" domain="integer"/>
                <!--<param name="service*.toothDiseaseId" mapping="['toothDiseaseIds']" domain="integer[]"/>-->
                <param name="dentalFormulaId" mapping="['dentalFormulaId']" domain="integer"/>
                <param name="bdate" mapping="['bdate']" domain="date"/>
                <param name="isUrgent" mapping="['isUrgent']" domain="boolean"/>
                <!--<param name="service*.id" mapping="['serviceIds']" domain="integer[]"/>-->
                <param name="quantity" mapping="['quantity']" domain="integer"/>
                <param name="duration" mapping="['duration']" domain="string"/>
                <param name="diagnosis.diagnosisId" mapping="['diagnosisId']" domain="integer"/>
                <param name="toothNumber" mapping="['toothNumber']" domain="string"/>
                <param name="resGroup.id" mapping="['resGroupId']" domain="integer"/>
                <param name="funding.id" mapping="['fundingId']" domain="integer"/>
                <param name="totalCost" mapping="['totalCost']" domain="string"/>
                <param name="cost" mapping="['cost']" domain="string"/>
                <param name="durationMeasure.id" mapping="['durationMeasureId']" domain="integer"/>
                <param name="isAmalgamFilling" mapping="['isAmalgamFilling']" domain="boolean"/>
                <param name="anesthesiaType.id" mapping="['anesthesiaTypeId']" domain="integer"/>
                <param name="funding.id" mapping="['fundingId']" domain="integer"/>

                <param name="rootService.id" mapping="['rootServiceId']" domain="integer"/>
                <param name="childService*.id" mapping="['childServiceIds']" domain="integer[]"/>
                <param name="rootService.isComplex" mapping="['isComplex']" domain="boolean"/>
                <param name="cul" mapping="['cul']"/>
                <param name="childService*.culserviceid" mapping="['culServiceIds']" domain="object[]"/>
                <param name="doctor.id" mapping="['doctorId']" domain="integer"/>
                <!--<param name="rootService.toothDiseaseId" mapping="['toothDiseaseId']" domain="integer"/>-->
                <!--<param name="childService*.toothDiseaseId" mapping="['toothDiseaseIds']" domain="integer[]"/>-->
            </in-parameters>
            <out-parameters>
                <param name="toothService.id" mapping="['id']" domain="integer"/>
            </out-parameters>
            <validations activate="blackList">
                <validation ref-id="canDeleteService"/>
                <validation ref-id="isServiceProtocolExist"/>
            </validations>
        </action>

        <action id="updateToothService" form-submit-label="Сохранить">
            <invocation>
                <rest:rest method="PUT">
                    <rest:query>
                        ${n2o.backend.path}/stomatology/appointmentResult/service
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="tooth.id" mapping="['toothId']" domain="integer" required="false"/>
                <param name="toothSurface.id" mapping="['toothSurfaceId']" domain="integer" required="false"/>
                <param name="isRendered" mapping="['isRendered']" domain="boolean"/>
                <param name="clinic.id" mapping="['clinicId']" domain="integer" value="#{org.id}"/>
                <param name="case.id" mapping="['caseId']" domain="integer"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="visit.id" mapping="['stepId']" domain="integer"/>
                <param name="renderedId" mapping="['renderedId']" domain="integer"/>
                <param name="toothService.id" mapping="['id']" domain="integer"/>
                <param name="dentalFormulaId" mapping="['dentalFormulaId']" domain="integer"/>
                <param name="bdate" mapping="['bdate']" domain="date"/>
                <param name="isUrgent" mapping="['isUrgent']" domain="boolean"/>
                <param name="quantity" mapping="['quantity']" domain="integer"/>
                <param name="duration" mapping="['duration']" domain="string"/>
                <param name="diagnosis.diagnosisId" mapping="['diagnosisId']" domain="integer"/>
                <param name="toothNumber" mapping="['toothNumber']" domain="string"/>
                <param name="resGroup.id" mapping="['resGroupId']" domain="integer"/>
                <param name="funding.id" mapping="['fundingId']" domain="integer"/>
                <param name="totalCost" mapping="['totalCost']" domain="string"/>
                <param name="cost" mapping="['cost']" domain="string"/>
                <param name="durationMeasure.id" mapping="['durationMeasureId']" domain="integer"/>
                <param name="isAmalgamFilling" mapping="['isAmalgamFilling']" domain="boolean"/>
                <param name="anesthesiaType.id" mapping="['anesthesiaTypeId']" domain="integer"/>
                <param name="mcCaseId" mapping="['caseId']" domain="integer"/>
                <param name="stepId" mapping="['stepId']" domain="integer"/>
                <param name="resourceGroupId" mapping="['resGroupId']" domain="integer"/>
                <param name="funding.id" mapping="['fundingId']" domain="integer"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>

                <param name="service.id" mapping="['serviceId']" domain="integer"/>
                <param name="service.toothDiseaseId" mapping="['serviceToothDiseaseId']" domain="integer"/>
                <param name="rootService.id" mapping="['rootServiceId']" domain="integer"/>
                <param name="childService*.id" mapping="['childServiceIds']" domain="integer[]"/>
                <param name="rootService.isComplex" mapping="['isComplex']" domain="boolean"/>
                <!--<param name="rootService.toothDiseaseId" mapping="['toothDiseaseId']" domain="integer"/>-->
                <!--<param name="childService*.toothDiseaseId" mapping="['toothDiseaseIds']" domain="integer[]"/>-->
                <param name="initialRootServiceId" mapping="['initialRootServiceId']" domain="integer"/>
                <param name="isNotDelete" mapping="['isNotDelete']" domain="boolean"/>
                <param name="cul" mapping="['cul']"/>
                <param name="childService*.culserviceid" mapping="['culServiceIds']" domain="object[]"/>
                <param name="doctor.id" mapping="['doctorId']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="toothService.id" mapping="['id']" domain="integer"/>
            </out-parameters>
            <validations activate="blackList">
                <validation ref-id="canDeleteService"/>
            </validations>
        </action>

        <action id="deleteToothService" name="Удалить">
            <invocation>
                <rest:rest method="DELETE">
                    <rest:query>
                        ${n2o.backend.path}/stomatology/appointmentResult/service/{renderedId}/{toothServiceId}
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="renderedId" mapping="['renderedId']" domain="integer"/>
                <param name="toothService.id" mapping="['toothServiceId']" domain="integer"/>
                <param name="service.id" mapping="['serviceId']" domain="integer"/>
                <param name="dentalFormulaId" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="canDeleteService"/>
            </validations>
        </action>
    </actions>

    <validations>
        <condition id="isNumberConditionQuantity" level="error">
            <message>Значение должно быть числовым.</message>
            <expression on="quantity">
                <![CDATA[(typeof quantity == 'undefined') || (quantity == null) || (/^[0-9]*$/.test(quantity) == true)]]></expression>
        </condition>
        <condition id="isQuantityPositive" level="error">
            <message>Значение должно быть больше 0.</message>
            <expression on="quantity">
                <![CDATA[quantity > 0]]></expression>
        </condition>
        <condition id="isNumberConditionDuration" level="error">
            <message>Значение должно быть числовым.</message>
            <expression on="duration">
                <![CDATA[(typeof duration == 'undefined') || (duration == null) || (/^[0-9]*$/.test(duration) == true)]]></expression>
        </condition>
        <condition id="isNumberConditionToothNumber" level="error">
            <message>Значение должно быть числовым.</message>
            <expression on="toothNumber">
                <![CDATA[(typeof toothNumber == 'undefined') || (toothNumber == null) || (/^[0-9]*$/.test(toothNumber) == true)]]></expression>
        </condition>
        <condition id="isNumberConditionCost" level="error">
            <message>Значение должно быть числовым.</message>
            <expression on="cost">
                <![CDATA[(typeof cost == 'undefined') || (cost == null) || (/^[0-9]*$/.test(cost) == true)]]></expression>
        </condition>
        <condition id="isNumberConditionTotalCost" level="error">
            <message>Значение должно быть числовым.</message>
            <expression on="totalCost">
                <![CDATA[(typeof totalCost == 'undefined') || (totalCost == null) || (/^[0-9]*$/.test(totalCost) == true)]]></expression>
        </condition>

        <condition id="isToothFieldRequired" level="error">
            <expression on="tooth,rootService,service,childService"><![CDATA[
                var valid = true;
                var isToothFieldRequired = false;
                if (typeof rootService != 'undefined' && rootService.isComplex) {
                    if (typeof childService != 'undefined') {
                        for(var i = 0; i < childService.length; i++) {
                            isToothFieldRequired = isToothFieldRequired || childService[i].isToothRequired || childService[i].istoothrequired;
                        }
                    }
                    if (typeof service != 'undefined') {
                        isToothRequired = isToothFieldRequired || service.isToothRequired;
                    }
                } else {
                    isToothFieldRequired = rootService.isToothRequired;
                }
                if (isToothFieldRequired) {
                    valid = typeof tooth != 'undefined' && (Array.isArray(tooth)&& tooth.length > 0 || !Array.isArray(tooth) && !!tooth.id);
                }
                valid;
            ]]></expression>
            <message>Поле обязательно для заполнения</message>
        </condition>

        <condition id="areRequiredServicesSelected" level="error">
            <expression on="rootService,childService">
                <![CDATA[
                    var flag = false;
                    if (typeof childService != 'undefined' && typeof rootService != 'undefined' && typeof rootService.requiredFieldsIds != 'undefined') {
                        var requiredCount = 0;
                        for (var i = 0 ; i < childService.length; i++) {
                            if (rootService.requiredFieldsIds.indexOf(childService[i].id) > -1) {
                                requiredCount++;
                            }
                        }
                        flag = !!(requiredCount == rootService.requiredFieldsIds.length);
                    }
                    else {flag = true;}
                    flag;
                ]]>
            </expression>
            <message>Не выбраны обязательные для выполнения услуги</message>
        </condition>

        <constraint id="canDeleteService" level="error">
            <message>Услуга является обязательной в составе комплексной услуги. Сначала удалите необязательные услуги.</message>
            <invocation>
                <sql:sql>
                    select (case when ssr1.complex_srv_id is not null then
                    (case when ((select count(ssr2.id) from sr_srv_rendered ssr2
                    inner join sr_service s2 on ssr2.service_id = s2.id
                    inner join sr_srv_composition sc2 on sc2.service_id = s2.id
                    where ssr2.complex_srv_id = ssr1.complex_srv_id and (sc2.is_required is null or sc2.is_required = false))>0)
                    then true else false end) else false end), sc1.is_required
                    from sr_srv_rendered ssr1 left join sr_service s1 on ssr1.service_id = s1.id
                    left join sr_srv_composition sc1 on sc1.service_id = s1.id
                    where ssr1.id = :renderedId
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="renderedId" mapping="['renderedId']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] != true || [0][0][1] != true"/>
        </constraint>

        <constraint id="isServiceProtocolExist" level="warning">
            <message>Для редактируемой услуги есть заполненный протокол. При сохранении протокол будет удален.</message>
            <invocation>
                <sql:sql>
                    select count(msp.*), (case when :serviceId = (select service_id from sr_srv_rendered where id = :renderedId) then 0 else 1 end)
                    from  md_srv_protocol msp
                    join sr_srv_rendered ssr on ssr.id = msp.srv_rendered_id
                    where ssr.id = :renderedId
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="renderedId" mapping="['renderedId']" domain="integer"/>
                <param name="service.id" mapping="['serviceId']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0 || [0][0][1] == 0"/>
        </constraint>
        <condition id="culValValidation" level="error">
            <message>Введенное значение должно быть числом в формате 99999999.99!</message>
            <expression on="cul"><![CDATA[
                var regex = new RegExp('\^[0-9]{0,8}([.]{1}[0-9]{1,2}){0,1}\$');
                var b = true;
                if(typeof cul != 'undefined' && cul != null && cul != '')
                    b = regex.test(cul);
                b;
                ]]>
            </expression>
        </condition>

    </validations>

</object>
