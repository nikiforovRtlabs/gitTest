<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:n2o="http://n2oapp.net/framework/config/schema/action-invocation-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0">
    <name>Норма продукта</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    insert into receipt.baby_food_norm(id,age_category_id,benefit_definition_id,product_id,rate)
                    values (nextval('receipt.baby_food_norm_id_seq'),:age_category_id,:benefit_definition_id,:product_id,cast(:rate as numeric(7,3)));
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="ageCategory.id" mapping="['age_category_id']" domain="integer"/>
                <param name="benefit_definition.id" mapping="['benefit_definition_id']" domain="integer"/>
                <param name="product.id" mapping="['product_id']" domain="integer"/>
                <param name="norm" mapping="['rate']" domain="string"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Норма продукта питания сохранена в системе успешно
            </success-text>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    update receipt.baby_food_norm set
                    age_category_id = :age_category_id,
                    benefit_definition_id = :benefit_definition_id,
                    product_id = :product_id,
                    rate = cast(:rate as numeric(7,3))
                    where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="ageCategory.id" mapping="['age_category_id']" domain="integer"/>
                <param name="benefit_definition.id" mapping="['benefit_definition_id']" domain="integer"/>
                <param name="product.id" mapping="['product_id']" domain="integer"/>
                <param name="norm" mapping="['rate']" domain="string"/>
            </in-parameters>
            <success-text>
                Изменение данных о норме продукта питания сохранено в системе успешно
            </success-text>
        </action>
        <action id="delete">
            <invocation>
                <sql:sql>
                    delete from receipt.baby_food_norm where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </in-parameters>
        </action>
    </actions>
    <validations>
        <constraint id="normUnique" level="error">
            <message>
                Код '{code}' уже используется для продукта {name}. Укажите другой код!
            </message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from receipt.baby_food_product
                    where trim(upper(code)) = trim(upper(:code))
                    and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
                <param name ="code" mapping = "['code']" domain="string"/>
            </in-parameters>
            <out-parameters>
                <param name="name" mapping="[0][0][0]" domain="string"/>
            </out-parameters>
            <!--[0].length == 0 or [0][0][0] == true-->
            <result expression="[0].length == 0 or [0][0][0] == 0"/>
        </constraint>
    </validations>

</object>
