<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-3.0">
    <name>receiptJournal</name>
    <object-id>receipt</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from receipt.receipt r
                join receipt.receipt_type rt on rt.id=r.type_id
                left join receipt.receipt_implementation_info rii on rii.receipt_id = r.id
                left join public.pim_employee_position pep on pep.id = r.employee_position_id
                left join public.pim_employee pe on pe.id = pep.employee_id
                left join public.pim_individual docpi on docpi.id = pe.individual_id
                left join public.pim_individual pi on pi.id = r.patient_id
                left join md_diagnosis md on md.id = r.diagnosis_id
                <!--general-->
                left join receipt.general_receipt gen on gen.id=r.id
                left join inventory.inn gi on gi.id=gen.inn_id
                left join inventory.form_type ft on ft.id = gen.form_type_id
                <!--/general-->
                <!--milky-->
                left join receipt.baby_food_receipt bfr on bfr.id = r.id
                left join pci_benefit_definition mpbd on mpbd.id = bfr.benefit_definition_id
                left join pci_benefit_type mpbt on mpbt.id = mpbd.benefit_type_id
                <!--/milky-->
                <!--benefit-->
                left join receipt.benefit_receipt br on br.id = r.id
                left join inventory.hold_modif ftb on ftb.id = br.inv_holding_modif_id
                left join inventory.inn bi on bi.id = br.inn_id
                left join inventory.holding invh on invh.id = br.inv_holding_id
                left join fin_funding_source_type ffst on ffst.id = br.funding_source_type_id
                left join pci_benefit_definition bpbd on bpbd.id = br.benefit_definition_id
                left join pci_benefit_type bpbt on bpbt.id = bpbd.benefit_type_id
                <!--/benefit-->
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(r)
                from receipt.receipt r
                join receipt.receipt_type rt on rt.id=r.type_id
                left join receipt.receipt_implementation_info rii on rii.receipt_id = r.id
                left join public.pim_employee_position pep on pep.id = r.employee_position_id
                left join public.pim_employee pe on pe.id = pep.employee_id
                left join public.pim_individual docpi on docpi.id = pe.individual_id
                left join public.pim_individual pi on pi.id = r.patient_id
                left join md_diagnosis md on md.id = r.diagnosis_id
                <!--general-->
                left join receipt.general_receipt gen on gen.id=r.id
                left join inventory.inn gi on gi.id=gen.inn_id
                left join inventory.form_type ft on ft.id = gen.form_type_id
                <!--/general-->
                <!--milky-->
                left join receipt.baby_food_receipt bfr on bfr.id = r.id
                left join pci_benefit_definition mpbd on mpbd.id = bfr.benefit_definition_id
                left join pci_benefit_type mpbt on mpbt.id = mpbd.benefit_type_id
                <!--/milky-->
                <!--benefit-->
                left join receipt.benefit_receipt br on br.id = r.id
                left join inventory.inn bi on bi.id = br.inn_id
                left join inventory.holding invh on invh.id = br.inv_holding_id
                left join fin_funding_source_type ffst on ffst.id = br.funding_source_type_id
                left join pci_benefit_definition bpbd on bpbd.id = br.benefit_definition_id
                left join pci_benefit_type bpbt on bpbt.id = bpbd.benefit_type_id
                <!--/benefit-->
                where :where
            </n2o:count-query>
            <n2o:alias>mr</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>

        <field>
            <id>id</id>
            <domain>integer</domain>
            <name>Идентификатор</name>
            <display/>
            <expression>r.id</expression>
            <filters>
                <filter type="eq" filter-field="id">
                    :expression = :id
                </filter>
            </filters>
        </field>

        <field>
            <id>caseId</id>
            <domain>integer</domain>
            <display/>
            <expression>r.case_id</expression>
            <filters>
                <filter type="eq" filter-field="caseId">:expression = :caseId</filter>
            </filters>
        </field>

        <field>
            <id>clinic.id</id>
            <domain>integer</domain>
            <name>МО</name>
            <display/>
            <expression>r.clinic_id</expression>
            <filters>
                <filter type="eq" filter-field="clinic.id">:expression = :clinic.id</filter>
            </filters>
        </field>

        <field>
            <id>type.id</id>
            <domain>integer</domain>
            <display/>
            <expression>rt.id</expression>
            <filters>
                <filter type="eq" filter-field="type.id">:expression = :type.id</filter>
            </filters>
        </field>

        <field>
            <id>type.code</id>
            <domain>string</domain>
            <name>Код типа рецепта</name>
            <display/>
            <expression>rt.code</expression>
        </field>

        <field>
            <id>type.name</id>
            <domain>string</domain>
            <name>Тип рецепта</name>
            <display/>
            <expression>rt.name</expression>
            <sorting/>
        </field>

        <field>
            <id>series</id>
            <domain>string</domain>
            <name>Серия</name>
            <display/>
            <expression>r.series</expression>
            <filters>
                <filter type="eq" filter-field="series">:expression = :series</filter>
            </filters>
            <sorting/>
        </field>

        <field>
            <id>num</id>
            <domain>string</domain>
            <name>Номер</name>
            <display/>
            <expression>r.num</expression>
            <filters>
                <filter type="eq" filter-field="num">:expression = :num</filter>
            </filters>
            <sorting/>
        </field>

        <field>
            <id>patient.id</id>
            <domain>integer</domain>
            <name>Пациент</name>
            <display/>
            <expression>r.patient_id</expression>
            <filters>
                <filter type="eq" filter-field="patient.id">:expression = :patient.id</filter>
            </filters>
        </field>

        <field>
            <id>patient.name</id>
            <domain>string</domain>
            <name>Пациент</name>
            <display/>
            <expression>pi.surname || ' ' || pi.name || ' ' || pi.patr_name</expression>
            <sorting/>
        </field>

        <field>
            <id>benefit_type.id</id>
            <domain>integer</domain>
            <name>Категория льготы</name>
            <display/>
            <expression>(case when br.id is null then bpbt.id else mpbt.id end)</expression>
            <filters>
                <filter type="eq" filter-field="benefit_type.id">(bpbt.id = :benefit_type.id or mpbt.id = :benefit_type.id)</filter>
            </filters>
        </field>

        <field>
            <id>benefit_type.name</id>
            <domain>string</domain>
            <name>Категория льготы</name>
            <display/>
            <expression>coalesce(mpbt.name,bpbt.name)</expression>
            <sorting/>
        </field>

        <field>
            <id>inv_inn.id</id>
            <domain>integer</domain>
            <display/>
            <expression>(case when gi.id is not null then gi.id else bi.id end)</expression>
            <filters>
                <filter type="eq" filter-field="inv_inn.id">(gi.id = :inv_inn.id or bi.id = :inv_inn.id)</filter>
            </filters>
        </field>

        <field>
            <id>inv_inn.name</id>
            <domain>string</domain>
            <name>ЛС(торговое наименование)</name>
            <display/>
            <expression>(case when gi.id is not null then gi.name_rus else bi.name_rus end)</expression>
        </field>

        <field>
            <id>employee.id</id>
            <domain>integer</domain>
            <name>Назначивший врач</name>
            <display/>
            <expression>r.employee_position_id</expression>
            <filters>
                <filter type="eq" filter-field="employee.id">:employee.id = :expression </filter>
            </filters>
        </field>

        <field>
            <id>employee.fio</id>
            <domain>string</domain>
            <name>Назначивший врач</name>
            <display/>
            <expression>docpi.surname||' '||left(initcap(docpi.name),1)||'. '||left(initcap(docpi.patr_name),1)</expression>
            <sorting/>
        </field>

        <field>
            <id>employee.canCreateBenefitReceipt</id>
            <domain>boolean</domain>
            <display/>
            <expression>(case when (select count(peptpr.*) from pim_empl_posit_to_prefer_recipe peptpr where now()::date >= peptpr.begin_date::date and (peptpr.end_date is null or peptpr.end_date::date >= now()::date) and peptpr.employee_position_id = :emplPos.id) > 0 then true else false end)</expression>
        </field>

        <field>
            <id>issue_dt</id>
            <domain>date</domain>
            <name>Дата выдачи рецепта</name>
            <display/>
            <expression>r.issue_dt</expression>
            <filters>
                <!--<filter type="eq" filter-field="issue_dt">:expression = :issue_dt</filter>-->
                <filter type="more" filter-field="issue_dt.begin">:expression >= :issue_dt.begin</filter>
                <filter type="less" filter-field="issue_dt.end"><![CDATA[:expression <= :issue_dt.end]]></filter>
            </filters>
            <sorting/>
        </field>

        <!-- <field>
             <id>issue_date</id>
             <domain>string</domain>
             <name>Дата выписки</name>
             <display/>
             <expression>to_char(r.issue_dt,'DD.MM.YYYY')</expression>
         </field>-->

        <field>
            <id>funding_source_type.id</id>
            <domain>integer</domain>
            <display/>
            <expression>ffst.id</expression>
            <filters>
                <filter type="eq" filter-field="funding_source_type.id">:expression = :funding_source_type.id</filter>
            </filters>
        </field>

        <!-- <field>
             <id>funding_source_type.name</id>
             <domain>string</domain>
             <name>Источник финансирования</name>
             <display/>
             <expression>ffst.name</expression>
         </field>-->

        <field>
            <id>diagnosis.id</id>
            <domain>integer</domain>
            <name>Идентификатор аболевания</name>
            <display/>
            <expression>r.diagnosis_id</expression>
            <filters>
                <filter type="eq" filter-field="diagnosis.id">:expression = :diagnosis.id</filter>
            </filters>
        </field>

        <field>
            <id>diagnosis.name</id>
            <domain>string</domain>
            <name>Заболевание</name>
            <display/>
            <expression>md.code || ' ' || md.name</expression>
            <filters>
                <filter type="eq" filter-field="diagnosis.name">upper(:expression) like '%' || upper(md.code) || '%' || upper(md.name) || '%'</filter>
            </filters>
            <sorting/>
        </field>

        <field>
            <id>benefit_definition.id</id>
            <domain>integer</domain>
            <name>Льгота</name>
            <display/>
            <expression>(case when br.id is null then bpbd.id else mpbd.id end)</expression>
            <filters>
                <filter type="eq" filter-field="benefit_definition.id">(bpbd.id = :benefit_definition.id or mpbd.id = :benefit_definition.id)</filter>
            </filters>
        </field>

        <!--<field>
            <id>benefit_definition.name</id>
            <domain>string</domain>
            <name>Льгота</name>
            <display/>
            <expression>pbd.name</expression>
        </field>-->

        <field>
            <id>inv_holding.id</id>
            <domain>integer</domain>
            <display/>
            <expression>invh.id</expression>
            <filters>
                <filter type="eq" filter-field="inv_holding.id">:expression = :inv_holding.id</filter>
            </filters>
        </field>

        <field>
            <id>canceled</id>
            <domain>boolean</domain>
            <name>Признак аннулирован</name>
            <display/>
            <expression>r.canceled</expression>
            <filters>
                <filter type="eq" filter-field="canceled">:expression = :canceled</filter>
            </filters>
        </field>

        <field>
            <id>isImplemented</id>
            <domain>boolean</domain>
            <name>Рецепт отпущен</name>
            <display/>
            <expression>(rii.id is not null)</expression>
            <filters>
                <filter type="eq" filter-field="isImplemented">:expression = :isImplemented</filter>
            </filters>
        </field>

        <field>
            <id>implementationDate</id>
            <domain>date</domain>
            <name>Дата отпуска</name>
            <display/>
            <expression>rii.date</expression>
            <filters>
                <filter type="more" filter-field="implementationDate.begin">:expression >= :implementationDate.begin</filter>
                <filter type="less" filter-field="implementationDate.end"><![CDATA[:expression <= :implementationDate.end]]></filter>
            </filters>
            <sorting/>
        </field>

        <field>
            <id>isDeferred</id>
            <domain>boolean</domain>
            <name>Отложен</name>
            <display/>
            <expression>rii.is_deferred</expression>
            <filters>
                <filter type="eq" filter-field="isDeferred">:expression = :isDeferred</filter>
            </filters>
        </field>

        <field>
            <id>deferredDate</id>
            <domain>date</domain>
            <name>Дата отл.</name>
            <display/>
            <expression>rii.deferred_date</expression>
            <filters>
                <filter type="more" filter-field="deferredDate.begin">:expression >= :deferredDate.begin</filter>
                <filter type="less" filter-field="deferredDate.end"><![CDATA[:expression <= :deferredDate.end]]></filter>
            </filters>
            <sorting/>
        </field>

        <field>
            <id>form_type.id</id>
            <domain>integer</domain>
            <display/>
            <expression>coalesce(ft.id,ftb.id)</expression>
        </field>

        <field>
            <id>form_type.name</id>
            <domain>string</domain>
            <name>Форма выпуска</name>
            <display/>
            <expression>coalesce(ft.short_name,ftb.name)</expression>
        </field>

        <field>
            <id>dosage</id>
            <domain>string</domain>
            <name>Дозировка</name>
            <display/>
            <expression>(case when gen.id is null then br.dosage else gen.dosage end)</expression>
        </field>

        <field>
            <id>use_method</id>
            <domain>string</domain>
            <name>Способ применения</name>
            <display/>
            <expression>(case when gen.id is null then br.use_method else gen.use_method end)</expression>
        </field>

        <field>
            <id>isStomatologyVisit</id>
            <domain>boolean</domain>
            <display/>
            <expression>:isStomatologyVisit</expression>
        </field>

        <field>
            <id>privilegedReceiptForNonRegisterPatients</id>
            <domain>boolean</domain>
            <display/>
            <expression>:privilegedReceiptForNonRegisterPatients</expression>
        </field>
        <field>
            <id>checkPatientAge</id>
            <domain>boolean</domain>
            <expression>:checkPatientAge</expression>
            <display/>
        </field>
        <field>
            <id>checkNotModuleReceipt</id>
            <domain>boolean</domain>
            <expression>:checkNotModuleReceipt</expression>
            <display/>
        </field>
        <field>
            <id>userId</id>
            <domain>Integer</domain>
            <expression>:userId</expression>
            <display default-value="#{user.id?}"/>
            <filters>
                <filter type="eq" filter-field="userId" default-value="#{user.id?}">
                    (:checkNotModuleReceipt is true or :clinic.id is not null  or (:clinic.id is null and r.clinic_id in (SELECT suo.org_id FROM sec_user_org suo where suo.user_id = :userId)))
                </filter>
            </filters>
        </field>
    </fields>
</query>
