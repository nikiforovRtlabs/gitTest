<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-1.0">
    <name>Расходная накладная</name>

    <actions>
        <action id="save" form-submit-label="Сохранить">

            <invocation>
                <rest:rest method="POST" >
                    ${n2o.backend.path}/inventory/exp-invoice
                </rest:rest>
            </invocation>

            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docType.id" mapping="['docTypeId']"/>
                <param name="docNumber" mapping="['docNumber']" domain="string"/>
                <param name="docDate" mapping="['docDate']"/>
                <param name="trustDoc.id" mapping="['trustDocId']"/>
                <param name="orderDoc.id" mapping="['orderDocId']"/>
                <param name="sendStore.id" mapping="['sendStoreId']"/>
                <param name="storeOprExp.id" mapping="['storeOprExpId']"/>
                <param name="recStore.id" mapping="['recStoreId']"/>
                <param name="storeOprArr.id" mapping="['storeOprArrId']"/>
                <param name="fundSource.id" mapping="['fundSourceId']"/>
                <param name="newFundSource.id" mapping="['newFundSourceId']"/>
                <param name="comGroup.id" mapping="['comGroupId']"/>
                <param name="note" mapping="['note']"/>
                <param name="org.id" mapping="['orgId']"/>
                <param name="sendRespEmpPos.id" mapping="['sendRespEmpPosId']"/>
                <param name="recRespEmpPos.id" mapping="['recRespEmpPosId']"/>
                <param name="amountFact" mapping="['amountFact']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docNumber" mapping="['displayedValue']"/>
            </out-parameters>
            <success-text>Расходная накладная № {docNumber} сохранена</success-text>
        </action>

        <action id="delete" name="Удалить" form-submit-label="Удалить">
            <invocation>
                <sql:sql>
                    delete from inventory.document i where i.id= :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
            </in-parameters>
            <confirmation-text>При удалении Расходной накладной будут удалены все её спецификации.
                Вы уверены, что хотите удалить Расходную накладную?</confirmation-text>
            <validations activate="nothing"/>
            <success-text>Документ и спецификации удалены</success-text>
        </action>

        <action id="execute" form-submit-label="Провести" name="Провести">
            <invocation>
                <rest:rest method="GET" >
                    ${n2o.backend.path}/inventory/execute
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="executeDate.id" mapping="['executeDate']" domain="string"/>
                <param name="docType.name" mapping="['docType']"/>
                <param name="empPos.id" mapping="['empPosId']"/>
                <param name="sendStore.id" mapping="['storeId']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <success-text>Документ проведён</success-text>
            <validations activate="whiteList">
                <validation ref-id="emplPosIsEmpty"/>
            </validations>
        </action>

        <action id="cancel" form-submit-label="Отменить" name="Отменить">
            <invocation>
                <rest:rest method="GET" >
                    ${n2o.backend.path}/inventory/execute/cancel
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docType.name" mapping="['docType']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <confirmation-text>Вы действительно хотите отменить проводку документа?</confirmation-text>
            <success-text>Проводка документа отменена</success-text>
        </action>

        <action id="accept" form-submit-label="Принять" name="Принять">
            <invocation>
                <rest:rest method="GET" >
                    ${n2o.backend.path}/inventory/execute/accept
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="executeDate.id" mapping="['acceptDt']" domain="string"/>
                <param name="recStore.id" mapping="['storeId']"/>
                <param name="empPos.id" mapping="['empPosId']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <success-text>Документ принят</success-text>
            <validations activate="whiteList">
                <validation ref-id="emplPosIsEmpty"/>
            </validations>
        </action>

        <action id="revert_accept" form-submit-label="Отменить приём" name="Отменить приём">
            <invocation>
                <rest:rest method="GET" >
                    ${n2o.backend.path}/inventory/execute/revert_accept
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <confirmation-text>Вы действительно хотите отменить приём документа?</confirmation-text>
            <success-text>Статус документа изменён на "не принят"</success-text>
        </action>

        <action id="createExpInvoiceBasedOnArrival" name="Добавление Расходной накладной на основе Приходной">
            <invocation>
                <rest:rest method="POST" >
                    ${n2o.backend.path}/inventory/exp-invoice/createBasedOnArrivalInvoice
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docType.id" mapping="['docTypeId']"/>
                <param name="docNumber" mapping="['docNumber']" domain="string"/>
                <param name="docDate" mapping="['docDate']"/>
                <param name="trustDoc.id" mapping="['trustDocId']"/>
                <param name="orderDoc.id" mapping="['orderDocId']"/>
                <param name="sendStore.id" mapping="['sendStoreId']"/>
                <param name="storeOprExp.id" mapping="['storeOprExpId']"/>
                <param name="recStore.id" mapping="['recStoreId']"/>
                <param name="storeOprArr.id" mapping="['storeOprArrId']"/>
                <param name="fundSource.id" mapping="['fundSourceId']"/>
                <param name="newFundSource.id" mapping="['newFundSourceId']"/>
                <param name="comGroup.id" mapping="['comGroupId']"/>
                <param name="note" mapping="['note']"/>
                <param name="org.id" mapping="['orgId']"/>
                <param name="sendRespEmpPos.id" mapping="['sendRespEmpPosId']"/>
                <param name="recRespEmpPos.id" mapping="['recRespEmpPosId']"/>
                <param name="arrivalInvoiceId" mapping="['arrivalInvoiceId']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docNumber" mapping="['displayedValue']"/>
                <param name="url" value="#inventory.expInvoiceList"/>
            </out-parameters>
            <success-text>Расходная накладная № {docNumber} сохранена</success-text>
        </action>
    </actions>

    <validations>
        <constraint id="expInvCheckUnique" level="error">
            <invocation>
                <sql:sql>
                    select count(1) from inventory.document
                    where int_doc_number = :docNumber
                    and int_doc_type_id = :docTypeId
                    and org_id = :orgId
                    and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="docNumber" mapping="['docNumber']" domain="string"/>
                <param name="docType.id" mapping="['docTypeId']"/>
                <param name="org.id" mapping="['orgId']"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
            <message>Расходная накладная с таким номером уже существует.</message>
        </constraint>

        <constraint id="arrInvIsNotExecuted" level="error">
            <message>Операция не может быть завершена. Приходная накладная не проведена.</message>
            <invocation>
                <sql:sql>
                    select count(1) from inventory.arrival_invoice arr
                    inner join inventory.document doc on doc.id=arr.id
                    where arr.id=:arrivalInvoiceId and doc.doc_status_id = 2
                </sql:sql>
            </invocation>
            <result expression="[0][0][0]==1"/>
            <in-parameters>
                <param name="arrivalInvoiceId" mapping="['arrivalInvoiceId']"/>
            </in-parameters>
        </constraint>

        <condition id="emplPosIsEmpty" level="error">
            <message>Операция не может быть завершена. Не указана должность в контексте пользователя</message>
            <expression>typeof empPos!='undefined' &amp;&amp; empPos!=null &amp;&amp; empPos.id!=null</expression>
        </condition>

        <constraint id="fundingSourceUpdateAvailable" level="error">
            <message>Источник финансирования не может быть изменен. Существуют спецификации</message>
            <invocation>
                <sql:sql>
                    select (:fundSourceId is null)
                    or not exists (select 1 from inventory.exp_spec s where s.doc_id = :id)
                    or coalesce((select fund_source_id from inventory.exp_invoice where id = :id) = :fundSourceId, false)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="fundSource.id" mapping="['fundSourceId']"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>

        <constraint id="comGroupUpdateAvailable" level="error">
            <message>Товарная группа не может быть изменена. Существуют спецификации</message>
            <invocation>
                <sql:sql>
                    select (:comGroupId is null)
                    or not exists (select 1 from inventory.exp_spec s where s.doc_id = :id)
                    or coalesce((select com_group_id from inventory.exp_invoice where id = :id) = :comGroupId, false)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="comGroup.id" mapping="['comGroupId']"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>

    </validations>
</object>
