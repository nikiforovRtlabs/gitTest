<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-3.0">
    <object-id>employeePositionResourceStocks</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>select :select
                from pim_employee_position_resource pepr
                inner join pim_employee_position pep on (pep.id = pepr.employee_position_id )
                inner join pim_employee pe on (pe.id = pep.employee_id)
                inner join pim_individual pi on (pi.id = pe.individual_id)
                inner join pim_position pp on (pp.id = pep.position_id)
                inner join sr_resource sr on sr.id=pepr.id
                inner join sr_res_kind srk on srk.id=sr.res_kind_id
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(r)
                from pim_employee_position_resource pepr
                inner join pim_employee_position pep on (pep.id = pepr.employee_position_id )
                inner join pim_employee pe on (pe.id = pep.employee_id)
                inner join pim_individual pi on (pi.id = pe.individual_id)
                inner join pim_position pp on (pp.id = pep.position_id)
                inner join sr_resource sr on sr.id=pepr.id
                inner join sr_res_kind srk on srk.id=sr.res_kind_id
                where :where
            </n2o:count-query>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>pepr.id</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>employee_position_id</id>
            <domain>integer</domain>
            <expression>pep.id</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>trim(format('%s %s %s, %s',
                           pi.surname,
                           case when left(pi.name,1) isnull then '' else upper(left(pi.name,1))||'.' end,
                           case when left(pi.patr_name,1) isnull then '' else upper(left(pi.patr_name,1))||'.' end,
                           pp.name ))</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="name">
                    upper(:expression) like upper(:name)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>res_kind.id</id>
            <domain>integer</domain>
            <expression>srk.id</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>res_kind.name</id>
            <domain>string</domain>
            <expression>srk.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>code</id>
            <domain>string</domain>
            <expression>sr.code</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>power</id>
            <domain>integer</domain>
            <expression>sr.power</expression>
            <display/>
            <sorting/>
        </field>
    </fields>
</query>
