<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-3.0">
    <object-id>empResSimpleResource</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from sr_resource r
                inner join pim_employee_position_resource epr on epr.id=r.id
                inner join pim_employee_position ep on ep.id=epr.employee_position_id
                inner join pim_position p on p.id = ep.position_id
                inner join pim_employee e on e.id=ep.employee_id
                inner join pim_individual i on i.id=e.individual_id
                left join sr_res_role rr on rr.id=r.role_id
                left join sr_res_kind rk on rk.id=r.res_kind_id
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(r)
                from sr_resource r
                inner join pim_employee_position_resource epr on epr.id=r.id
                inner join pim_employee_position ep on ep.id=epr.employee_position_id
                inner join pim_position p on p.id = ep.position_id
                inner join pim_employee e on e.id=ep.employee_id
                inner join pim_individual i on i.id=e.individual_id
                left join sr_res_role rr on rr.id=r.role_id
                left join sr_res_kind rk on rk.id=r.res_kind_id
                where :where
            </n2o:count-query>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>oid</id>
            <domain>integer</domain>
            <expression>r.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>employee_id</id>
            <domain>integer</domain>
            <expression>ep.employee_id</expression>
            <filters>
                <filter type="eq" filter-field="employee_id"/>
            </filters>
        </field>
        <field>
            <id>power</id>
            <domain>integer</domain>
            <expression>r.power</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>res_kind.oid</id>
            <domain>integer</domain>
            <expression>rk.id</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>res_kind.name</id>
            <domain>string</domain>
            <expression>rk.name</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>code</id>
            <domain>string</domain>
            <expression>r.code</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="code">
                    upper(:expression) like '%'||upper(:code)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>res_role.oid</id>
            <domain>integer</domain>
            <expression>rr.id</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>res_role.name</id>
            <domain>string</domain>
            <expression>rr.name</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>employee.oid</id>
            <domain>integer</domain>
            <expression>e.id</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>employee.name</id>
            <domain>string</domain>
            <expression>trim(format('%s %s %s', i.surname, i.name, i.patr_name))</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>emp_id_fio</id>
            <domain>string</domain>
            <!--
            К сожалению, вместо строки json из json_build_object в UI отображаются пустые значения
            по этой причине вынужден использовать строку с разделителем ~
            <expression>json_build_object('oid', emp.id, 'name', trim(format('%s %s %s', ind.surname, ind.name, ind.patr_name)))::text</expression>
            -->
            <expression>e.id::text|| '~' ||trim(format('%s %s %s', i.surname, i.name, i.patr_name))</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>position.employee_position_id</id>
            <domain>integer</domain>
            <expression>ep.id</expression>
            <display/>
        </field>
        <field>
            <id>position.position_name</id>
            <domain>string</domain>
            <expression>p.name</expression>
            <sorting/>
            <display/>
        </field>
    </fields>
</query>
