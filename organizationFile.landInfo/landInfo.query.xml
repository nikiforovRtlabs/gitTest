<?xml version='1.0' encoding='UTF-8'?>
<query xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0"
       xmlns="http://n2oapp.net/framework/config/schema/query-3.0">
    <object-id>landInfo</object-id>
    <name>Земельные участки</name>
    <execution>
        <n2o:sql>
            <n2o:items-query>select :select
                from pim_land land
                left join pim_organization org on (org.id = land.org_id)
                left join address_element addr on (addr.id = land.address_id)
                left join address_element_data aed on (aed.id = addr.id )
                left join pim_ownership_pattern own on (own.id = land.ownership_pattern_id)
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(1)
                from pim_land land
                left join pim_organization org on (org.id = land.org_id)
                left join address_element addr on (addr.id = land.address_id)
                left join address_element_data aed on (aed.id = addr.id )
                left join pim_ownership_pattern own on (own.id = land.ownership_pattern_id)
                where :where
            </n2o:count-query>
            <n2o:alias>land</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>

        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>land.id</expression>
            <filters auto-generate="true"/>
            <display/>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>land.name</expression>
            <filters>
                <filter type="eq" filter-field="name">upper(:expression) like upper('%'||:name||'%') </filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>land.id</id>
            <domain>integer</domain>
            <expression>land.id</expression>
            <filters auto-generate="true"/>
            <display/>
        </field>

        <field>
            <id>area</id>
            <domain>numeric</domain>
            <expression>land.area</expression>
            <display/>
        </field>

        <field>
            <id>code</id>
            <domain>string</domain>
            <expression>land.code</expression>
            <filters>
                <filter type="eq" filter-field="code">trim(upper(land.code)) like trim(upper('%'||:code||'%'))</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>note</id>
            <domain>string</domain>
            <expression>land.note</expression>
            <filters>
                <filter type="eq" filter-field="note">trim(upper(land.note)) like trim(upper('%'||:note||'%'))</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>title_right_support</id>
            <domain>string</domain>
            <expression>land.title_right_support</expression>
            <filters>
                <filter type="eq" filter-field="title_right_support">trim(upper(land.title_right_support)) like trim(upper('%'||:title_right_support||'%'))</filter>
            </filters>
            <display/>
        </field>

        <!--<field>-->
            <!--<id>addr.id</id>-->
            <!--<domain>integer</domain>-->
            <!--<expression>addr.id</expression>-->
            <!--<display/>-->
        <!--</field>-->

        <!--<field>-->
        <!--<id>addr1.id</id>-->
        <!--<domain>integer</domain>-->
        <!--<expression>addr.id</expression>-->
        <!--<display/>-->
        <!--</field>-->

        <field>
            <id>address.id</id>
            <domain>integer</domain>
            <expression>addr.id</expression>
            <filters>
                <filter type="eq" filter-field="address.id">:expression = :address.id</filter>
            </filters>
            <display/>
            <sorting/>
        </field>

        <field>
            <id>address_value</id>
            <domain>string</domain>
            <expression>aed.search_name</expression>
            <display/>
            <sorting/>
        </field>


        <!--<field>-->
            <!--<id>addr.id</id>-->
            <!--<domain>integer</domain>-->
            <!--<filters>-->
                <!--<filter type="eq" filter-field="addr.id">-->
                    <!--<![CDATA[-->
                    <!--(-->
                        <!--:addr.id is null or-->
                        <!--exists (-->
                            <!--select * from md_district_address da-->
                            <!--where da.district_id = cd.id and (-->
                                <!--select count(*) from (-->
                                    <!--with recursive t as (-->
                                        <!--select ae.* from address_element ae where ae.id = da.address_id-->
                                        <!--union all-->
                                        <!--select ae.* from address_element ae join t on ae.id = t.parent_id-->
                                    <!--)-->
                                    <!--select id from t-->
                                    <!--where t.id = (:addr.id -> 'id')::integer-->
                            <!--) t1) > 0-->
                        <!--)-->
                    <!--)-->
                    <!--]]>-->
                <!--</filter>-->
            <!--</filters>-->
        <!--</field>-->

        <field>
            <id>addr.name</id>
            <domain>string</domain>
            <expression>addr.name</expression>
            <display/>
        </field>

        <field>
            <id>own.id</id>
            <domain>integer</domain>
            <expression>own.id</expression>
            <filters>
                <filter type="eq" filter-field="own.id">own.id = :own.id</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>own.name</id>
            <domain>string</domain>
            <expression>own.name</expression>
            <display/>
        </field>

        <field>
            <id>org.id</id>
            <domain>integer</domain>
            <expression>org.id</expression>
            <filters auto-generate="true">
                <filter type="eq" default-value="#{stocks.orgId}" filter-field="org.id">org.id = :org.id</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>org.name</id>
            <domain>string</domain>
            <expression>org.short_name</expression>
            <display/>
        </field>

        <field>
            <id>from_dt</id>
            <domain>date</domain>
            <expression>land.from_dt</expression>
            <filters>
                <filter type="eq" filter-field="from_dt">:expression = :from_dt </filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>to_dt</id>
            <domain>date</domain>
            <expression>land.to_dt</expression>
            <filters auto-generate="true">
                <filter type="eq" filter-field="to_dt">land.to_dt = :to_dt</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>okato.value</id>
            <domain>string</domain>
            <expression>land.okato</expression>
            <filters auto-generate="true">
                <filter type="eq" filter-field="okato.value">land.okato = :okato.value</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>status.id</id>
            <domain>integer</domain>
            <expression>1=1</expression>
            <filters auto-generate="true">
                <filter type="eq" filter-field="status.id"><![CDATA[
                    (case
                      when :status.id = 1 then (land.to_dt isnull or land.to_dt >= current_date)
                      when :status.id = 2 then (land.to_dt notnull and land.to_dt < current_date)
                      when :status.id = 3 then true
                     end)
                    ]]>
                </filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>territory_code</id>
            <domain>string</domain>
            <expression>land.territory_code</expression>
            <filters>
                <filter type="eq" filter-field="territory_code">trim(upper(land.territory_code)) = trim(upper(:territory_code))</filter>
            </filters>
            <display/>
        </field>

        <field>
            <id>nearest_station_name</id>
            <domain>string</domain>
            <expression>land.nearest_station_name</expression>
            <display/>
        </field>

        <field>
            <id>nearest_station_distance</id>
            <domain>numeric</domain>
            <expression>land.nearest_station_distance</expression>
            <display/>
        </field>

        <field>
            <id>nearest_airport_name</id>
            <domain>string</domain>
            <expression>land.nearest_airport_name</expression>
            <display/>
        </field>

        <field>
            <id>nearest_airport_distance</id>
            <domain>numeric</domain>
            <expression>land.nearest_airport_distance</expression>
            <display/>
        </field>

        <field>
            <id>nearest_bus_station_name</id>
            <domain>string</domain>
            <expression>land.nearest_bus_station_name</expression>
            <display/>
        </field>

        <field>
            <id>nearest_bus_station_distance</id>
            <domain>numeric</domain>
            <expression>land.nearest_bus_station_distance</expression>
            <display/>
        </field>

        <field>
            <id>nearest_helipad_name</id>
            <domain>string</domain>
            <expression>land.nearest_helipad_name</expression>
            <display/>
        </field>

        <field>
            <id>nearest_helipad_distance</id>
            <domain>numeric</domain>
            <expression>land.nearest_helipad_distance</expression>
            <display/>
        </field>

        <field>
            <id>main_road_name</id>
            <domain>string</domain>
            <expression>land.main_road_name</expression>
            <display/>
        </field>

    </fields>
</query>