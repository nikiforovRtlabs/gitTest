<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-3.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <object-id>transport</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from amb.pim_transport t
                left join amb.pim_transport_category tc on tc.id=t.category_id
                left join amb.pim_transport_brand_name bn on bn.id=t.brand_name_id
                left join public.pim_building b on b.id=t.building_id
                left join public.fin_contract fc on fc.id=t.contract_id
                left join public.ns_country c on c.id=t.country_id
                left join public.pim_department d on d.id=t.department_id
                left join public.pim_organization m on m.id=t.manufacturer_id
                left join amb.pim_transport_model tm on tm.id=t.model_id
                left join public.pim_organization o on o.id=t.org_id
                left join public.pim_ownership_pattern os on os.id=t.ownership_pattern_id
                left join public.pim_room r on r.id=t.room_id
                left join public.cmn_measure mr on mr.id=t.service_measure_id
                left join amb.pim_transport_equipment te on te.id=t.transport_equipment_id
                left join amb.pim_transport_type tt on tt.id=t.type_id
                left join pim_org_unit ou on ou.id=t.unit_id
                left join pim_org_structure ostr on ostr.id=ou.structure_id
                left join ( select transport_id, count(*)
                            from amb.pim_transport_resource
                            group by transport_id) res on res.transport_id=t.id
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(t)
                from amb.pim_transport t
                left join amb.pim_transport_category tc on tc.id=t.category_id
                left join amb.pim_transport_brand_name bn on bn.id=t.brand_name_id
                left join public.pim_building b on b.id=t.building_id
                left join public.fin_contract fc on fc.id=t.contract_id
                left join public.ns_country c on c.id=t.country_id
                left join public.pim_department d on d.id=t.department_id
                left join public.pim_organization m on m.id=t.manufacturer_id
                left join amb.pim_transport_model tm on tm.id=t.model_id
                left join public.pim_organization o on o.id=t.org_id
                left join public.pim_ownership_pattern os on os.id=t.ownership_pattern_id
                left join public.pim_room r on r.id=t.room_id
                left join public.cmn_measure mr on mr.id=t.service_measure_id
                left join amb.pim_transport_equipment te on te.id=t.transport_equipment_id
                left join amb.pim_transport_type tt on tt.id=t.type_id
                left join pim_org_unit ou on ou.id=t.unit_id
                left join pim_org_structure ostr on ostr.id=ou.structure_id
                left join ( select transport_id, count(*)
                            from amb.pim_transport_resource
                            group by transport_id) res on res.transport_id=t.id
                where :where
            </n2o:count-query>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>t.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>owner_org.oid</id>
            <domain>integer</domain>
            <expression>o.id</expression>
            <display/>
            <filters>
                <filter type="eq" filter-field="owner_org.oid" default-value="#{stocks.orgId}"/>
            </filters>
        </field>
        <field>
            <id>vin</id>
            <domain>string</domain>
            <expression>t.code</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="vin">
                    upper(:expression) like '%'||upper(:vin)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>inventory_number</id>
            <domain>string</domain>
            <expression>t.inventory_number</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="inventory_number">
                    upper(:expression) like '%'||upper(:inventory_number)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>inventory_code</id>
            <domain>string</domain>
            <expression>t.inventory_code</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="inventory_code">
                    upper(:expression) like '%'||upper(:inventory_code)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>inventory_code_view</id>
            <domain>string</domain>
            <expression>t.inventory_code||'RUS'</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>okof_code</id>
            <domain>string</domain>
            <expression>t.okof_code</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="okof_code">
                    upper(trim(:expression)) like '%'||upper(trim(:okof_code))||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>category.oid</id>
            <domain>integer</domain>
            <expression>tc.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>category.name</id>
            <domain>string</domain>
            <expression>tc.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>type.oid</id>
            <domain>integer</domain>
            <expression>tt.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>type.name</id>
            <domain>string</domain>
            <expression>tt.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>equipment.oid</id>
            <domain>integer</domain>
            <expression>te.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>equipment.name</id>
            <domain>string</domain>
            <expression>te.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>brand.oid</id>
            <domain>integer</domain>
            <expression>bn.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>brand.name</id>
            <domain>string</domain>
            <expression>bn.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>transport_model.oid</id>
            <domain>integer</domain>
            <expression>tm.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>transport_model.name</id>
            <domain>string</domain>
            <expression>tm.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>model</id>
            <domain>string</domain>
            <expression>t.model</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="model">
                    upper(:expression) like '%'||upper(:model)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>display_model</id>
            <domain>string</domain>
            <expression>coalesce(tm.name,'') || (case when t.model is null then '' else ' (' || t.model || ')' end)</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>manufacturer.oid</id>
            <domain>integer</domain>
            <expression>m.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>manufacturer.name</id>
            <domain>string</domain>
            <expression>m.full_name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>country.oid</id>
            <domain>integer</domain>
            <expression>c.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>country.name</id>
            <domain>string</domain>
            <expression>c.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>issue_dt</id>
            <domain>date</domain>
            <expression>t.issue_dt</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>issue_period.begin</id>
            <domain>string</domain>
            <expression>:issue_period.begin</expression>
            <filters>
                <filter type="eq" filter-field="issue_period.begin">
                    <![CDATA[
                        t.issue_dt >= to_date (:issue_period.begin, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>

        <field>
            <id>issue_period.end</id>
            <domain>string</domain>
            <expression>:issue_period.end</expression>
            <filters>
                <filter type="eq" filter-field="issue_period.end">
                    <![CDATA[
                        t.issue_dt <= to_date (:issue_period.end, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>department.oid</id>
            <domain>integer</domain>
            <expression>d.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>department.name</id>
            <domain>string</domain>
            <expression>d.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>purchase_dt</id>
            <domain>date</domain>
            <expression>t.purchase_dt</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>purchase_period.begin</id>
            <domain>string</domain>
            <expression>:purchase_period.begin</expression>
            <filters>
                <filter type="eq" filter-field="purchase_period.begin">
                    <![CDATA[
                        t.purchase_dt >= to_date (:purchase_period.begin, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>

        <field>
            <id>purchase_period.end</id>
            <domain>string</domain>
            <expression>:purchase_period.end</expression>
            <filters>
                <filter type="eq" filter-field="purchase_period.end">
                    <![CDATA[
                        t.purchase_dt <= to_date (:purchase_period.end, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>purchaseDtHidden</id>
            <domain>date</domain>
            <expression>t.purchase_dt</expression>
            <display/>
        </field>
        <field>
            <id>ownership.oid</id>
            <domain>integer</domain>
            <expression>os.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>ownership.name</id>
            <domain>string</domain>
            <expression>os.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>warranty_dt</id>
            <domain>date</domain>
            <expression>t.warranty_dt</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>warranty_period.begin</id>
            <domain>string</domain>
            <expression>:warranty_period.begin</expression>
            <filters>
                <filter type="eq" filter-field="warranty_period.begin">
                    <![CDATA[
                    t.warranty_dt >= to_date (:warranty_period.begin, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>warranty_period.end</id>
            <domain>string</domain>
            <expression>:warranty_period.end</expression>
            <filters>
                <filter type="eq" filter-field="warranty_period.end">
                    <![CDATA[
                        t.warranty_dt <= to_date (:warranty_period.end, 'dd.mm.yyyy')
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>service_period</id>
            <domain>numeric</domain>
            <expression>t.service_period</expression>
            <display/>
            <sorting/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>measure.oid</id>
            <domain>integer</domain>
            <expression>mr.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>measure.name</id>
            <domain>string</domain>
            <expression>mr.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>building.oid</id>
            <domain>integer</domain>
            <expression>b.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>building.name</id>
            <domain>string</domain>
            <expression>b.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>room.oid</id>
            <domain>integer</domain>
            <expression>r.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>room.name</id>
            <domain>string</domain>
            <expression>r.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>contract.oid</id>
            <domain>integer</domain>
            <expression>fc.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>contract.name</id>
            <domain>string</domain>
            <expression>'от ' || to_char(fc.date, 'DD.mm.YYYY') || ' № ' || fc.number</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>period.begin</id>
            <domain>date</domain>
            <expression>t.from_dt</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="period.begin">
                    <![CDATA[
                    ((t.to_dt is not NULL and t.from_dt is NULL) or (:period.begin::DATE <= t.from_dt AND (:period.end::DATE is null or :period.end::DATE >= t.from_dt)))
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>period.end</id>
            <domain>date</domain>
            <expression>t.to_dt</expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="period.end">
                    <![CDATA[
                    ((t.from_dt is not NULL and t.to_dt is NULL) or ((:period.begin::DATE is null or :period.begin::DATE <= t.to_dt) AND :period.end::DATE >= t.to_dt))
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>orgunit.oid</id>
            <domain>integer</domain>
            <expression>ou.id</expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>orgunit.name</id>
            <domain>string</domain>
            <expression>ostr.name</expression>
            <display/>
            <sorting/>
        </field>
        <field>
            <id>is_resource</id>
            <domain>boolean</domain>
            <expression> res.count > 0 </expression>
            <display/>
            <sorting/>
            <filters>
                <filter type="eq" filter-field="is_resource">
                    exists ( select resource_id from amb.pim_transport_resource where transport_id=t.id )
                </filter>
            </filters>
        </field>
        <field>
            <id>id_name</id>
            <domain>string</domain>
            <expression> format('%s~%s %s', t.id, t.inventory_number, tt.name) </expression>
            <display/>
            <filters auto-generate="true"/>
        </field>
        <field>
            <id>type.requiredCategory</id>
            <domain>boolean</domain>
            <expression>(upper(tt.name) = upper('Автомобиль'))</expression>
            <display/>
        </field>

        <field>
            <id>resource_id</id>
            <domain>integer</domain>
            <expression>(select resource_id from amb.pim_transport_resource where transport_id=t.id limit 1)</expression>
            <display/>
        </field>

        <field>
            <id>has_group_resource</id>
            <domain>integer</domain>
            <expression>
                exists(
                  select srgr.id
                  from sr_res_group_relationship srgr
                where srgr.resource_id = (select resource_id from amb.pim_transport_resource where transport_id=t.id limit 1) )
            </expression>
            <display/>
        </field>
    </fields>
</query>