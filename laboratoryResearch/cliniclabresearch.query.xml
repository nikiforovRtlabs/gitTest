<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-3.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <!--<id>hosp_lab_dep</id>-->
    <object-id>hosp_classifier</object-id>

    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from public.sr_service s
                join public.sr_srv_type st on st.id=s.type_id and st.app_code in ('LABORATORY','PROBES')
                left join sr_srv_composition sc on s.id = sc.service_id
                left join public.md_clinic_laboratory_research mclr on mclr.service_id=s.id
                left join public.md_clinic_biomaterial mcb on mcb.id = mclr.clinic_biomaterial_id
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(*)
                from public.sr_service s
                join public.sr_srv_type st on st.id=s.type_id and st.app_code in ('LABORATORY','PROBES')
                left join public.md_clinic_laboratory_research mclr on mclr.service_id=s.id
                left join public.md_clinic_biomaterial mcb on mcb.id = mclr.clinic_biomaterial_id
                where :where
            </n2o:count-query>
            <n2o:alias>s</n2o:alias>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <display/>
            <expression>s.id</expression>
            <filters>
                <filter type="eq" filter-field="id">
                    :expression = :id
                </filter>
            </filters>
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <display/>
            <expression>s.name</expression>
            <filters>
                <filter type="eq" filter-field="name">
                    upper(:expression) like '%'||upper(:name)||'%'
                </filter>
            </filters>
        </field>
        <field>
            <id>EtBiomaterial_id</id>
            <domain>integer</domain>
            <name>Биоматериал по умолчанию</name>
            <display/>
            <expression>mcb.id</expression>
        </field>
        <field>
            <id>EtBiomaterial_name</id>
            <domain>string</domain>
            <display/>
            <expression>mcb.name</expression>
        </field>
        <field>
            <id>organizationId</id>
            <domain>integer</domain>
            <display/>
            <expression>s.org_id</expression>
            <filters>
                <filter type="eq" filter-field="organizationId">
                    :expression = :organizationId
                </filter>
            </filters>
        </field>
        <field>
            <id>date</id>
            <domain>date</domain>
            <filters>
                <filter type="eq" filter-field="date">
                    <![CDATA[
                    (
                    mclr.id is null
					OR
					mclr.from_dt is null and mclr.to_dt is null or
                    (mclr.from_dt is null or mclr.from_dt <= to_date(:date, 'yyyy-MM-dd') and
                    (mclr.to_dt is null or mclr.to_dt >= to_date(:date, 'yyyy-MM-dd'))
                    )
                    )
                    ]]>
                </filter>
            </filters>
        </field>
        <field>
            <id>complexId</id>
            <domain>integer</domain>
            <expression>sc.complex_id</expression>
            <display/>
            <filters>
                <filter type="eq" filter-field="complexId">:expression = :complexId</filter>
            </filters>
        </field>
        <field>
            <id>service_id</id>
            <domain>integer</domain>
            <display/>
            <expression>s.id</expression>
        </field>
    </fields>

</query>