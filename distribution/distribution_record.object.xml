<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-2.0">

    <name>Записи о распределении бланков</name>

    <fields>
        <field id="id" domain="integer"/>
        <field id="restQuantity" domain="integer"/>
    </fields>

    <actions>
        <action id="create" name="Создать">
            <invocation>
                <rest:rest method="POST" >
                    <rest:query>
                        ${n2o.backend.path}/sicklists/bso/distribution
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="orgId" mapping="['clinicId']" domain="integer"/>
                <param name="receiveDate" mapping="['receiveDate']" domain="date"/>
                <param name="receiver.quantity" mapping="['restQuantity']" domain="string"/>
                <param name="receivedQuantity" mapping="['receivedQuantity']" domain="string"/>
                <param name="orderReport" mapping="['orderReport']" domain="string"/>
                <param name="requisites" mapping="['requisites']" domain="string"/>
                <param name="receiver.id" mapping="['receiver']" domain="integer"/>
                <param name="orderReportDate" mapping="['orderReportDate']" domain="date"/>
                <param name="utilRequisites" mapping="['utilRequisites']" domain="string"/>
                <param name="returnedQuantity" mapping="['returnedQuantity']" domain="string"/>
                <param name="responsible.id" mapping="['responsible']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </out-parameters>

            <validations activate="whiteList">
                <validation ref-id="checkIfDistrDiapasonsNotExist"/>
            </validations>
        </action>
        <action id="update" name="Изменить">
            <invocation>
                <rest:rest method="PUT">
                    <rest:query>
                        ${n2o.backend.path}/sicklists/bso/distribution/{id}
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="orgId" mapping="['clinicId']" domain="integer"/>
                <param name="receiveDate" mapping="['receiveDate']" domain="date"/>
                <param name="receiver.quantity" mapping="['restQuantity']" domain="string"/>
                <param name="receivedQuantity" mapping="['receivedQuantity']" domain="string"/>
                <param name="orderReport" mapping="['orderReport']" domain="string"/>
                <param name="requisites" mapping="['requisites']" domain="string"/>
                <param name="receiver.id" mapping="['receiver']" domain="integer"/>
                <param name="orderReportDate" mapping="['orderReportDate']" domain="date"/>
                <param name="utilRequisites" mapping="['utilRequisites']" domain="string"/>
                <param name="returnedQuantity" mapping="['returnedQuantity']" domain="string"/>
                <param name="responsible.id" mapping="['responsible']" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="checkIfDistrDiapasonsNotExist"/>
                <validation ref-id="areBeingDeletedNumbersNotInUseDistr"/>
            </validations>
        </action>

        <action id="delete" name="Удалить">
            <invocation>
                <rest:rest method="DELETE">
                    <rest:query>
                        ${n2o.backend.path}/sicklists/bso/distribution/{id}
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="areBeingDeletedNumbersNotInUseBeforeRefreshDistr"/>
            </validations>
        </action>

    </actions>

    <validations>
        <constraint id="checkIfDistrDiapasonsNotExist" level="error">
            <invocation>
                <sql:sql>
                    select * from sickdoc.counting_check_range_exists(:requisites,:table_name,:id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="requisites" mapping="['requisites']" domain="string"/>
                <param value="bso_distr_record_range" name = "table_name" domain="string"/>
                <param name="id" mapping="['id']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
            <message>Невозможно завершить операцию. Некоторые номера из указанных уже существуют в системе!</message>
        </constraint>

        <constraint id="areBeingDeletedNumbersNotInUseDistr" level="error">
            <invocation>
                <rest:rest method="GET">
                    <rest:query>
                        ${n2o.backend.path}/sicklists/bso/receiving/updateValidation
                    </rest:query>
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="requisites" mapping="['requisites']" domain="string"/>
                <param name="id"  value="['id']"/>
                <param name="type" value="distribution"/>
            </in-parameters>
            <out-parameters>
                <param name="data" mapping="['data']"/>
            </out-parameters>
            <message>Невозможно изменить диапазон. В системе есть оформленные ЛН на удаляемые номера.</message>
            <result expression="['data'] == true"/>
        </constraint>

        <constraint id="areBeingDeletedNumbersNotInUseBeforeRefreshDistr" level="error">
            <invocation>

                <sql:sql>
                    SELECT COUNT(*) from sickdoc.bso_distr_record_range brr
                    WHERE exists(
                    SELECT 1 FROM sickdoc.sickdoc s
                    WHERE left(s.number,9) !='' and  left(s.number,9)::bigint BETWEEN brr.start_num::bigint
                    AND COALESCE(brr.end_num,brr.start_num)::bigint
                    ) and brr.distr_record_id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
            <message>Невозможно завершить операцию. Некоторые номера из указанных уже существуют в системе!</message>
        </constraint>

        <condition id="notNegativeFloatReceivedQuantity" level="error">
            <message>Некорректное значение</message>
            <expression on="receivedQuantity">
                <![CDATA[
                !receivedQuantity || (/^\d+$/.test(receivedQuantity))
                ]]>
            </expression>
        </condition>

        <condition id="notNegativeFloatOrderReport" level="error">
            <message>Некорректное значение</message>
            <expression on="orderReport">
                <![CDATA[
                 !orderReport || (/^\d+$/.test(orderReport))
                ]]>
            </expression>
        </condition>

        <condition id="notNegativeFloatReceiver" level="error">
            <message>Некорректное значение</message>
            <expression on="receiver.quantity">
                <![CDATA[
                !receiver || !receiver.quantity || (/^\d+$/.test(receiver.quantity))
                ]]>
            </expression>
        </condition>

        <condition id="notNegativeFloatReturned" level="error">
            <message>Некорректное значение</message>
            <expression on="returnedQuantity">
                <![CDATA[
                !returnedQuantity || (/^\d+$/.test(returnedQuantity))
                ]]>
            </expression>
        </condition>

        <condition id="limitReceiveDate" level="error">
            <message>Не позже текущей даты</message>
            <expression on="receiveDate">
                <![CDATA[
                !receiveDate || moment(receiveDate, 'DD.MM.YYYY').valueOf() <= new Date().getTime();
            ]]>
            </expression>
        </condition>

        <condition id="limitOrderReportDate" level="error">
            <message>Не позже текущей даты</message>
            <expression on="orderReportDate">
                <![CDATA[
                !orderReportDate || moment(orderReportDate, 'DD.MM.YYYY').valueOf() <= new Date().getTime();
            ]]>
            </expression>
        </condition>
    </validations>
</object>
