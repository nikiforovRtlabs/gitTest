<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <object-id>batch</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>select :select
                from (select ss.id ssid, batch.id batchid, ss.store_id ssstore_id, hm.id hmid,
                ss.funding_source_id ssfunding_source_id, hm.name hmname,fs.name fundSourceName, org.id orgid,
                org.short_name orgshort_name, batch.series batchseries, batch.expire_dt batchexpire_dt,
                batch.delivery_dt batchdelivery_dt, ss.price ssprice,
                inventory.get_quantity_info_string_for_batch(ss.id,hm.id,ss.act_balance_mnei,:docDate::date,hm.price_unit_flag,hm.mnei_id,coalesce(hm.mnei_count_in_sec_pk,1)) quantityInfo,
                extract(month from age(batch.expire_dt::date, current_date)) monthOfExpiration,
                extract(day from age(batch.expire_dt::date, current_date)) dayOfExpiration,
                extract(year from age(batch.expire_dt::date, current_date)) yearOfExpiration
                from inventory.batch batch
                left outer join inventory.store_supply ss on ss.batch_id = batch.id
                left outer join inventory.holding_producer prod on batch.hold_producer_id= prod.id
                left outer join pim_organization org on org.id=prod.org_id
                left outer join inventory.hold_modif hm on hm.id=batch.hold_modif_id
                left outer join inventory.funding_source fs on fs.id=ss.funding_source_id
                ) as batchList
                where quantityInfo !='0' and :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(1)
                from (select ss.id ssid, batch.id batchid, ss.store_id ssstore_id, hm.id hmid,
                ss.funding_source_id ssfunding_source_id,hm.name hmname, org.id orgid,
                batch.series batchseries, batch.expire_dt batchexpire_dt,
                batch.delivery_dt batchdelivery_dt, ss.price ssprice,
                inventory.get_quantity_info_string_for_batch(ss.id,hm.id,ss.act_balance_mnei,:docDate::date,hm.price_unit_flag,hm.mnei_id,coalesce(hm.mnei_count_in_sec_pk,1)) quantityInfo
                from inventory.batch batch
                left outer join inventory.store_supply ss on ss.batch_id = batch.id
                left outer join inventory.holding_producer prod on batch.hold_producer_id= prod.id
                left outer join pim_organization org on org.id=prod.org_id
                left outer join inventory.hold_modif hm on hm.id=batch.hold_modif_id
                left outer join inventory.funding_source fs on fs.id=ss.funding_source_id
                ) as batchList
                where quantityInfo !='0' and :where
            </n2o:count-query>
            <n2o:alias>batch</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>ssid</expression>
        </field>
        <field>
            <id>requestSpec.id</id>
            <domain>integer</domain>
            <expression>(select :requestSpec.id)</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>batch.id</id>
            <domain>integer</domain>
            <expression>batchid</expression>
        </field>
        <field>
            <id>store.id</id>
            <domain>integer</domain>
            <expression>ssstore_id</expression>
        </field>
        <field>
            <id>storeSupply.id</id>
            <domain>integer</domain>
            <expression>ssid</expression>
        </field>
        <field>
            <id>holdModif.name</id>
            <domain>string</domain>
            <expression>hmname</expression>
            <name>Наименование ЛС и ИМН</name>
            <search unavailable="true"/>
        </field>
        <field>
            <id>expDoc.id</id>
            <domain>integer</domain>
            <expression>(select :expDoc.id)</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>holdModif.id</id>
            <domain>integer</domain>
            <expression>hmid</expression>
            <search>
               (hmid  = :holdModif.id or hmid in (select subst.substitute_id from inventory.modif_substitute subst where subst.modif_id = :holdModif.id))
            </search>
        </field>
        <field>
            <id>fundSource.id</id>
            <domain>integer</domain>
            <expression>ssfunding_source_id</expression>
            <search>:expression in (select funding_source_id from inventory.funding_source_payment_type where payment_type_id = :paymentType.id)</search>
        </field>
        <field>
            <id>fundSource.name</id>
            <name>Финансирование</name>
            <domain>string</domain>
            <expression>fundSourceName</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>paymentType.id</id>
            <domain>integer</domain>
            <search unavailable="true"/>
            <display unavailable="true"/>
        </field>
        <field>
            <id>arrDocument.id</id>
            <domain>integer</domain>
            <search>
                exists(select 1 from inventory.store_opr_jur jur where jur.rec_store_sup_id = ssid and
                jur.doc_id = :arrDocument.id)
            </search>
            <display unavailable="true"/>
        </field>
        <field>
            <id>producer.id</id>
            <domain>integer</domain>
            <expression>orgid</expression>
        </field>
        <field>
            <id>producer.name</id>
            <domain>string</domain>
            <expression>orgshort_name</expression>
            <name>Производитель</name>
        </field>
        <field>
            <id>series</id>
            <domain>string</domain>
            <expression>batchseries</expression>
            <name>Серия</name>
            <search>upper(:expression) like '%'||upper(:series)||'%'</search>
        </field>
        <field>
            <id>expireDt</id>
            <domain>date</domain>
            <expression>batchexpire_dt</expression>
            <name>Срок годности</name>
            <search type="between">
                <![CDATA[(:expireDt.begin::date is null or batch.expire_dt >= :expireDt.begin) and
                        (:expireDt.end::date is null or batch.expire_dt <= :expireDt.end) ]]>
            </search>
        </field>
        <field>
            <id>expireDt.end</id>
            <domain>date</domain>
            <search unavailable="true"/>
            <display unavailable="true"/>
        </field>
        <field>
            <id>expireDt.begin</id>
            <domain>date</domain>
            <search unavailable="true"/>
            <display unavailable="true"/>
        </field>
        <field>
            <id>deliveryDate</id>
            <domain>date</domain>
            <expression>batchdelivery_dt</expression>
            <name>Дата</name>
            <search>:expression = :deliveryDate</search>
        </field>
        <field>
            <id>quantityInfo</id>
            <domain>string</domain>
            <name>Кол-во</name>
            <expression>quantityInfo</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>requestSpecQuantity</id>
            <domain>string</domain>
            <display unavailable="true"/>
            <search unavailable="true"/>
        </field>
        <field>
            <id>requiredQuantity</id>
            <domain>string</domain>
            <expression>(cast(:requestSpecQuantity as numeric) - (select coalesce(sum(s.quantity),0) from inventory.exp_spec s where s.request_spec_id=:requestSpec.id))</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>specForBatchCreated</id>
            <domain>string</domain>
            <expression> case when exists (select 1 from inventory.exp_spec s where s.batch_id=batchid and s.doc_id= :expDoc.id and price_vat=ssprice)
            then 'warning' end</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>docDate</id>
            <domain>date</domain>
            <expression>(select :docDate::date)</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>priceWithVat</id>
            <domain>string</domain>
            <name>Цена за ед.</name>
            <expression>ssprice</expression>
        </field>
        <field>
            <id>periodOfExpiration</id>
            <name>Период срока годности</name>
            <domain>string</domain>
            <expression><![CDATA[(case when yearOfExpiration<0 or monthOfExpiration<0 or (yearOfExpiration=0 and monthOfExpiration = 0 and (dayOfExpiration=0 or dayOfExpiration<0))  then 'text-error'
            else
             case when yearOfExpiration= 0 and (monthOfExpiration = 0 or (monthOfExpiration = 1 and dayOfExpiration = 0))
                  then 'text-info'
                  else
                      case when yearOfExpiration= 0 and (monthOfExpiration = 1 or (monthOfExpiration = 2 and dayOfExpiration = 0)) then 'text-success' end
                  end
            end)]]>
            </expression>
            <search unavailable="true"/>
        </field>
    </fields>
</query>