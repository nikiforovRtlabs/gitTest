<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-3.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <!--<id>establish_cause</id>-->
    <name>Установил причины смерти</name>
    <object-id>establish_cause</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from certificates.establish_cause ec
                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(*)
                from certificates.establish_cause ec
                where :where
            </n2o:count-query>
            <n2o:alias>ec</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <name>Идентификатор</name>
            <display/>
            <expression>ec.id</expression>
            <filters>
                <filter type="eq" filter-field="id">
                    :expression = :id
                </filter>
            </filters>
        </field>
        <field>
            <id>code</id>
            <domain>integer</domain>
            <name>Код</name>
            <display/>
            <expression>cast(trim(ec.code) as integer)</expression>
            <!--<filters>-->
                <!--<filter type="eq" filter-field="code">-->
                    <!--trim(upper(:expression)) like trim(upper(:code||'%'))-->
                <!--</filter>-->
            <!--</filters>-->
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <name>Наименование</name>
            <display/>
            <expression>
                case when (:is_perinatal is not null and :is_perinatal = true)
                    then ec.perinatal_code
                    else ec.code
                end
                ||' '||ec.name
            </expression>
            <filters>
                <filter type="eq" filter-field="name">
                    trim(upper(:expression)) like trim(upper(:name||'%'))
                </filter>
            </filters>
            <sorting>
                case when (:is_perinatal is not null and :is_perinatal = true)
                    then cast(trim(ec.perinatal_code) as integer)
                    else cast(trim(ec.code) as integer)
                end
            </sorting>
        </field>
        <field>
            <id>ecode</id>
            <domain>string</domain>
            <name>Дополнительный код</name>
            <display/>
            <expression>ec.e_code</expression>
            <filters>
                <filter type="eq" filter-field="ecode">
                    trim(upper(:expression)) like trim(upper(:ecode||'%'))
                </filter>
                <filter type="less" filter-field="ecodeLess">
                    :ecodeLess > :expression
                </filter>
            </filters>
        </field>

        <field>
            <id>perinatal_code</id>
            <domain>string</domain>
            <display/>
            <expression>ec.perinatal_code</expression>
            <filters>
                <filter type="eq" filter-field="perinatal_code">
                    trim(upper(:expression)) like trim(upper(:perinatal_code||'%'))
                </filter>
            </filters>
        </field>
        <field>
            <id>is_perinatal</id>
            <domain>boolean</domain>
            <display/>
            <expression>
                case when ec.perinatal_code is not null
                    then true
                    else false
                end
            </expression>
            <filters>
                <filter type="eq" filter-field="is_perinatal">
                    :expression = :is_perinatal
                </filter>
            </filters>
        </field>
    </fields>
</query>