<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>death_certificate</id>-->
    <name>Свидетельство о смерти</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    insert into certificates.perinatal_death_certificate(
                    code,number,issue_dt,certificate_kind_id,is_duplicate,is_mothers_words,is_faulty,org_id,org_name,
                    death_child_birth_dt,child_birth_dt,death_dt,death_moment_id,
                    indiv_id,fio,mathers_bdt,address_id,region,district,city,street,home,apartment,citizenship_type_id,
                    marital_status_id,education_id,busyness_id,childbirth_order,
                    child_surname,gender_id,death_place_id,
                    death_address_id,death_region,death_district,death_city,death_citizenship_type_id,
                    weight,height,is_singleton,birth_order,sum,
                    general_order,death_kind_id,took_birth_id,establish_cause_id,definition_grounds_id,
                    receptionist_id,"position",reseptionist,
                    recipient_id,recipient_fio,recipient_doc,
                    parent_perinatal_death_certificate_id
                    )
                    values (
                    :code,
                    :number,
                    :issue_dt,
                    :certificate_kind_id,
                    :is_duplicate,
                    :is_mothers_words,
                    :is_faulty,
                    :org_id,
                    :org_name,
                    :death_child_birth_dt,
                    :child_birth_dt,
                    :death_dt,
                    :death_moment_id,
                    :indiv_id,
                    :fio,
                    :mathers_bdt,
                    :address_id,
                    :region,
                    :district,
                    :city,
                    :street,
                    :home,
                    :apartment,
                    :citizenship_type_id,
                    :marital_status_id,
                    :education_id,
                    :busyness_id,
                    :childbirth_order,
                    :child_surname,
                    :gender_id,
                    :death_place_id,
                    :death_address_id,
                    :death_region,
                    :death_district,
                    :death_city,
                    :death_citizenship_type_id,
                    :weight,
                    :height,
                    :is_singleton,
                    :birth_order,
                    :sum,
                    :general_order,
                    :death_kind_id,
                    :took_birth_id,
                    :establish_cause_id,
                    :definition_grounds_id,
                    :receptionist_id,
                    :position,
                    :reseptionist,
                    :recipient_id,
                    :recipient_fio,
                    :recipient_doc,
                    <!--:parent_perinatal_death_certificate_id-->
                    case when :certificate_kind_id in (3,4)
                        then
                            case when (:is_duplicate is null or :is_duplicate is false)
                                then :parent_instead
                                else coalesce (:parent_death_certificate_id,:parent_instead)
                            end
                        else :parent_death_certificate_id
                    end::int
                    );
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="code" mapping="['code']" domain="string"/>
                <param name="number" mapping="['number']" domain="string"/>
                <param name="issue_date" mapping="['issue_dt']" domain="date"/>
                <param name="kind.id" mapping="['certificate_kind_id']" domain="integer"/>
                <param name="is_duplicate" mapping="['is_duplicate']" domain="boolean"/>
                <param name="is_mamwords" mapping="['is_mothers_words']" domain="boolean"/>
                <param name="is_faulty" mapping="['is_faulty']" domain="boolean"/>
                <param name="org.id" mapping="['org_id']" domain="integer"/>
                <param name="org_name" mapping="['org_name']" domain="string"/>
                <param name="death_child_birth_dt" mapping="['death_child_birth_dt']" domain="date"/>
                <param name="child_birth_dt" mapping="['child_birth_dt']" domain="date"/>
                <param name="death_dt" mapping="['death_dt']" domain="date"/>
                <param name="death_moment.id" mapping="['death_moment_id']" domain="integer"/>
                <param name="indiv.id" mapping="['indiv_id']" domain="integer"/>
                <param name="fio" mapping="['fio']" domain="string"/>
                <param name="mathers_bdt" mapping="['mathers_bdt']" domain="date"/>
                <param name="maddr.id" mapping="['address_id']" domain="integer"/>
                <param name="region" mapping="['region']" domain="string"/>
                <param name="district" mapping="['district']" domain="string"/>
                <param name="city" mapping="['city']" domain="string"/>
                <param name="street" mapping="['street']" domain="string"/>
                <param name="home" mapping="['home']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="mcitiship.id" mapping="['citizenship_type_id']" domain="integer"/>
                <param name="marital_status.id" mapping="['marital_status_id']" domain="integer"/>
                <param name="education.id" mapping="['education_id']" domain="integer"/>
                <param name="busyness.id" mapping="['busyness_id']" domain="integer"/>
                <param name="childbirth_order" mapping="['childbirth_order']" domain="integer"/>
                <param name="child_surname" mapping="['child_surname']" domain="string"/>
                <param name="gender.id" mapping="['gender_id']" domain="integer"/>
                <param name="death_place.id" mapping="['death_place_id']" domain="integer"/>
                <param name="death_address.id" mapping="['death_address_id']" domain="integer"/>
                <param name="death_region" mapping="['death_region']" domain="string"/>
                <param name="death_district" mapping="['death_district']" domain="string"/>
                <param name="death_city" mapping="['death_city']" domain="string"/>
                <param name="death_citiship.id" mapping="['death_citizenship_type_id']" domain="integer"/>
                <param name="weight" mapping="['weight']" domain="integer"/>
                <param name="height" mapping="['height']" domain="integer"/>
                <param name="is_singleton" mapping="['is_singleton']" domain="boolean"/>
                <param name="birth_order" mapping="['border']" domain="integer"/>
                <param name="sum" mapping="['sum']" domain="integer"/>
                <param name="general_order" mapping="['general_order']" domain="integer"/>
                <param name="death_kind.id" mapping="['death_kind_id']" domain="integer"/>
                <param name="took_birth.id" mapping="['took_birth_id']" domain="integer"/>
                <param name="establish_cause.id" mapping="['establish_cause_id']" domain="integer"/>
                <param name="definition_grounds.id" mapping="['definition_grounds_id']" domain="integer"/>
                <param name="receptionist.id" mapping="['receptionist_id']" domain="integer"/>
                <param name="position" mapping="['position']" domain="string"/>
                <param name="reseptionist" mapping="['reseptionist']" domain="string"/>
                <param name="recipient.id" mapping="['recipient_id']" domain="integer"/>
                <param name="recipient_fio" mapping="['recipient_fio']" domain="string"/>
                <param name="recipient_doc" mapping="['recipient_doc']" domain="string"/>
                <param name="parent.id" mapping="['parent_death_certificate_id']" domain="integer"/>
                <param name="parent_instead.id" mapping="['parent_instead']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Свидетельство сохранено в системе успешно
            </success-text>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    update certificates.perinatal_death_certificate set
                    issue_dt = :issue_dt,
                    certificate_kind_id = :certificate_kind_id,
                    is_duplicate = :is_duplicate,
                    is_mothers_words = :is_mothers_words,
                    is_faulty = :is_faulty,
                    death_child_birth_dt = :death_child_birth_dt,
                    child_birth_dt = :child_birth_dt,
                    death_dt = :death_dt,
                    death_moment_id = :death_moment_id,
                    indiv_id = :indiv_id,
                    fio = :fio,
                    mathers_bdt = :mathers_bdt,
                    address_id = :address_id,
                    region = :region,
                    district = :district,
                    city = :city,
                    street = :street,
                    home = :home,
                    apartment = :apartment,
                    citizenship_type_id = :citizenship_type_id,
                    marital_status_id = :marital_status_id,
                    education_id = :education_id,
                    busyness_id = :busyness_id,
                    childbirth_order = :childbirth_order,
                    child_surname = :child_surname,
                    gender_id = :gender_id,
                    death_place_id = :death_place_id,
                    death_address_id = :death_address_id,
                    death_region = :death_region,
                    death_district = :death_district,
                    death_city = :death_city,
                    death_citizenship_type_id = :death_citizenship_type_id,
                    weight = :weight,
                    height = :height,
                    is_singleton = :is_singleton,
                    birth_order = :birth_order,
                    sum = :sum,
                    general_order = :general_order,
                    death_kind_id = :death_kind_id,
                    took_birth_id = :took_birth_id,
                    establish_cause_id = :establish_cause_id,
                    definition_grounds_id = :definition_grounds_id,
                    recipient_id = :recipient_id,
                    recipient_fio = :recipient_fio,
                    recipient_doc = :recipient_doc,
                    parent_perinatal_death_certificate_id =
                    <!--:parent_perinatal_death_certificate_id-->
                        case when :certificate_kind_id in (3,4)
                            then
                                case when (:is_duplicate is null or :is_duplicate is false)
                                    then :parent_instead
                                    else coalesce (:parent_death_certificate_id,:parent_instead)
                                end
                            else :parent_death_certificate_id
                        end::int
                    where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <!--<param name="code" mapping="['code']" domain="string"/>-->
                <!--<param name="number" mapping="['number']" domain="string"/>-->
                <param name="issue_date" mapping="['issue_dt']" domain="date"/>
                <param name="kind.id" mapping="['certificate_kind_id']" domain="integer"/>
                <param name="is_duplicate" mapping="['is_duplicate']" domain="boolean"/>
                <param name="is_mamwords" mapping="['is_mothers_words']" domain="boolean"/>
                <param name="is_faulty" mapping="['is_faulty']" domain="boolean"/>
                <!--<param name="org.id" mapping="['org_id']" domain="integer"/>-->
                <!--<param name="org_name" mapping="['org_name']" domain="string"/>-->
                <param name="death_child_birth_dt" mapping="['death_child_birth_dt']" domain="date"/>
                <param name="child_birth_dt" mapping="['child_birth_dt']" domain="date"/>
                <param name="death_dt" mapping="['death_dt']" domain="date"/>
                <param name="death_moment.id" mapping="['death_moment_id']" domain="integer"/>
                <param name="indiv.id" mapping="['indiv_id']" domain="integer"/>
                <param name="fio" mapping="['fio']" domain="string"/>
                <param name="mathers_bdt" mapping="['mathers_bdt']" domain="date"/>
                <param name="maddr.id" mapping="['address_id']" domain="integer"/>
                <param name="region" mapping="['region']" domain="string"/>
                <param name="district" mapping="['district']" domain="string"/>
                <param name="city" mapping="['city']" domain="string"/>
                <param name="street" mapping="['street']" domain="string"/>
                <param name="home" mapping="['home']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="mcitiship.id" mapping="['citizenship_type_id']" domain="integer"/>
                <param name="marital_status.id" mapping="['marital_status_id']" domain="integer"/>
                <param name="education.id" mapping="['education_id']" domain="integer"/>
                <param name="busyness.id" mapping="['busyness_id']" domain="integer"/>
                <param name="childbirth_order" mapping="['childbirth_order']" domain="integer"/>
                <param name="child_surname" mapping="['child_surname']" domain="string"/>
                <param name="gender.id" mapping="['gender_id']" domain="integer"/>
                <param name="death_place.id" mapping="['death_place_id']" domain="integer"/>
                <param name="death_address.id" mapping="['death_address_id']" domain="integer"/>
                <param name="death_region" mapping="['death_region']" domain="string"/>
                <param name="death_district" mapping="['death_district']" domain="string"/>
                <param name="death_city" mapping="['death_city']" domain="string"/>
                <param name="death_citiship.id" mapping="['death_citizenship_type_id']" domain="integer"/>
                <param name="weight" mapping="['weight']" domain="integer"/>
                <param name="height" mapping="['height']" domain="integer"/>
                <param name="is_singleton" mapping="['is_singleton']" domain="boolean"/>
                <param name="birth_order" mapping="['border']" domain="integer"/>
                <param name="sum" mapping="['sum']" domain="integer"/>
                <param name="general_order" mapping="['general_order']" domain="integer"/>
                <param name="death_kind.id" mapping="['death_kind_id']" domain="integer"/>
                <param name="took_birth.id" mapping="['took_birth_id']" domain="integer"/>
                <param name="establish_cause.id" mapping="['establish_cause_id']" domain="integer"/>
                <param name="definition_grounds.id" mapping="['definition_grounds_id']" domain="integer"/>
                <!--<param name="receptionist.id" mapping="['receptionist_id']" domain="integer"/>-->
                <!--<param name="position" mapping="['position']" domain="string"/>-->
                <!--<param name="reseptionist" mapping="['reseptionist']" domain="string"/>-->
                <param name="recipient.id" mapping="['recipient_id']" domain="integer"/>
                <param name="recipient_fio" mapping="['recipient_fio']" domain="string"/>
                <param name="recipient_doc" mapping="['recipient_doc']" domain="string"/>
                <param name="parent.id" mapping="['parent_death_certificate_id']" domain="integer"/>
                <param name="parent_instead.id" mapping="['parent_instead']" domain="integer"/>
            </in-parameters>
        </action>
        <action id="copy">
            <invocation>
                <sql:sql>
                    insert into certificates.perinatal_death_certificate(
                    code,number,issue_dt,certificate_kind_id,is_duplicate,is_mothers_words,is_faulty,org_id,org_name,
                    death_child_birth_dt,child_birth_dt,death_dt,death_moment_id,
                    indiv_id,fio,mathers_bdt,address_id,region,district,city,street,home,apartment,citizenship_type_id,
                    marital_status_id,education_id,busyness_id,childbirth_order,
                    child_surname,gender_id,death_place_id,
                    death_address_id,death_region,death_district,death_city,death_citizenship_type_id,
                    weight,height,is_singleton,birth_order,sum,
                    general_order,death_kind_id,took_birth_id,establish_cause_id,definition_grounds_id,
                    receptionist_id,"position",reseptionist,
                    recipient_id,recipient_fio,recipient_doc,
                    parent_perinatal_death_certificate_id
                    )
                    values (
                    :code,
                    :number,
                    :issue_dt,
                    :certificate_kind_id,
                    :is_duplicate,
                    :is_mothers_words,
                    :is_faulty,
                    :org_id,
                    :org_name,
                    :death_child_birth_dt,
                    :child_birth_dt,
                    :death_dt,
                    :death_moment_id,
                    :indiv_id,
                    :fio,
                    :mathers_bdt,
                    :address_id,
                    :region,
                    :district,
                    :city,
                    :street,
                    :home,
                    :apartment,
                    :citizenship_type_id,
                    :marital_status_id,
                    :education_id,
                    :busyness_id,
                    :childbirth_order,
                    :child_surname,
                    :gender_id,
                    :death_place_id,
                    :death_address_id,
                    :death_region,
                    :death_district,
                    :death_city,
                    :death_citizenship_type_id,
                    :weight,
                    :height,
                    :is_singleton,
                    :birth_order,
                    :sum,
                    :general_order,
                    :death_kind_id,
                    :took_birth_id,
                    :establish_cause_id,
                    :definition_grounds_id,
                    :receptionist_id,
                    :position,
                    :reseptionist,
                    :recipient_id,
                    :recipient_fio,
                    :recipient_doc,
                    <!--:parent_perinatal_death_certificate_id-->
                    case when :certificate_kind_id in (3,4)
                        then
                            case when (:is_duplicate is null or :is_duplicate is false)
                                then :parent_instead
                                else coalesce (:parent_death_certificate_id,:parent_instead)
                            end
                        else :parent_death_certificate_id
                    end
                    );
                    select certificates.copy_death_reasons (
                    cast(currval('certificates.perinatal_death_certificate_seq') as integer),true
                    ,case when :certificate_kind_id in (3,4)
                        then
                            case when (:is_duplicate is null or :is_duplicate is false)
                                then :parent_instead
                                else coalesce (:parent_death_certificate_id,:parent_instead)
                            end
                        else :parent_death_certificate_id
                    end);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="code" mapping="['code']" domain="string"/>
                <param name="number" mapping="['number']" domain="string"/>
                <param name="issue_date" mapping="['issue_dt']" domain="date"/>
                <param name="kind.id" mapping="['certificate_kind_id']" domain="integer"/>
                <param name="is_duplicate" mapping="['is_duplicate']" domain="boolean"/>
                <param name="is_mamwords" mapping="['is_mothers_words']" domain="boolean"/>
                <param name="is_faulty" mapping="['is_faulty']" domain="boolean"/>
                <param name="org.id" mapping="['org_id']" domain="integer"/>
                <param name="org_name" mapping="['org_name']" domain="string"/>
                <param name="death_child_birth_dt" mapping="['death_child_birth_dt']" domain="date"/>
                <param name="child_birth_dt" mapping="['child_birth_dt']" domain="date"/>
                <param name="death_dt" mapping="['death_dt']" domain="date"/>
                <param name="death_moment.id" mapping="['death_moment_id']" domain="integer"/>
                <param name="indiv.id" mapping="['indiv_id']" domain="integer"/>
                <param name="fio" mapping="['fio']" domain="string"/>
                <param name="mathers_bdt" mapping="['mathers_bdt']" domain="date"/>
                <param name="maddr.id" mapping="['address_id']" domain="integer"/>
                <param name="region" mapping="['region']" domain="string"/>
                <param name="district" mapping="['district']" domain="string"/>
                <param name="city" mapping="['city']" domain="string"/>
                <param name="street" mapping="['street']" domain="string"/>
                <param name="home" mapping="['home']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="mcitiship.id" mapping="['citizenship_type_id']" domain="integer"/>
                <param name="marital_status.id" mapping="['marital_status_id']" domain="integer"/>
                <param name="education.id" mapping="['education_id']" domain="integer"/>
                <param name="busyness.id" mapping="['busyness_id']" domain="integer"/>
                <param name="childbirth_order" mapping="['childbirth_order']" domain="integer"/>
                <param name="child_surname" mapping="['child_surname']" domain="string"/>
                <param name="gender.id" mapping="['gender_id']" domain="integer"/>
                <param name="death_place.id" mapping="['death_place_id']" domain="integer"/>
                <param name="death_address.id" mapping="['death_address_id']" domain="integer"/>
                <param name="death_region" mapping="['death_region']" domain="string"/>
                <param name="death_district" mapping="['death_district']" domain="string"/>
                <param name="death_city" mapping="['death_city']" domain="string"/>
                <param name="death_citiship.id" mapping="['death_citizenship_type_id']" domain="integer"/>
                <param name="weight" mapping="['weight']" domain="integer"/>
                <param name="height" mapping="['height']" domain="integer"/>
                <param name="is_singleton" mapping="['is_singleton']" domain="boolean"/>
                <param name="birth_order" mapping="['border']" domain="integer"/>
                <param name="sum" mapping="['sum']" domain="integer"/>
                <param name="general_order" mapping="['general_order']" domain="integer"/>
                <param name="death_kind.id" mapping="['death_kind_id']" domain="integer"/>
                <param name="took_birth.id" mapping="['took_birth_id']" domain="integer"/>
                <param name="establish_cause.id" mapping="['establish_cause_id']" domain="integer"/>
                <param name="definition_grounds.id" mapping="['definition_grounds_id']" domain="integer"/>
                <param name="receptionist.id" mapping="['receptionist_id']" domain="integer"/>
                <param name="position" mapping="['position']" domain="string"/>
                <param name="reseptionist" mapping="['reseptionist']" domain="string"/>
                <param name="recipient.id" mapping="['recipient_id']" domain="integer"/>
                <param name="recipient_fio" mapping="['recipient_fio']" domain="string"/>
                <param name="recipient_doc" mapping="['recipient_doc']" domain="string"/>
                <param name="parent.id" mapping="['parent_death_certificate_id']" domain="integer"/>
                <param name="parent_instead.id" mapping="['parent_instead']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Свидетельство сохранено в системе успешно
            </success-text>
        </action>
    </actions>
    <validations>
        <constraint id="pdCertif_unique" level="error">
            <message>Внимание! Серия и номер свидетельства совпадают с ранее выданным!</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from certificates.perinatal_death_certificate pdc
                    where trim(pdc.code) = trim(:code) and trim(pdc.number) = trim(:number)
                    and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="code" mapping="['code']" domain="string"/>
                <param name="number" mapping="['number']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
    </validations>
</object>