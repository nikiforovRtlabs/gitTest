<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>death_reason</id>-->
    <name>Причины смерти</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    insert into certificates.death_reason(
                    death_certificate_id,
                    is_direct,is_interim,is_primary,is_foreign,
                    perinatal_death_certificate_id,
                    is_perinatal,is_other_baby_reason,is_mother_direct,is_mother_other_reason,

                    diagnos_id,diagnos_name,diagnos_code,
                    minutes,hours,days,weeks,months,years,
                    is_print,
                    is_primary_diagnosis
                    )
                    values (
                    case when (:is_perinatal is null or :is_perinatal = false) then :death_certificate_id end,
                    case when (:orderI1 = 1 or :is_perinatal = true and :order = 1) then true end,
                    case when :orderI1 = 2 then true end,
                    case when :orderI3 = 3 then true end,
                    case when (:orderI4 = 4 or :is_perinatal = true and :order = 5) then true end,
                    case when (:is_perinatal = true) then :death_certificate_id end,
                    :is_perinatal,
                    case when (:is_perinatal = true and :order = 2) then true end,
                    case when (:is_perinatal = true and :order = 3) then true end,
                    case when (:is_perinatal = true and :order = 4) then true end,

                    :diagnos_id,
                    :diagnos_name,
                    :diagnos_code,
                    :minutes,
                    :hours,
                    :days,
                    :weeks,
                    :months,
                    :years,
                    :is_print,
                    false
                    );
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="certificate.id" mapping="['death_certificate_id']" domain="integer"/>

                <param name="orderI-1.id" mapping="['orderI1']" domain="integer"/>
                <param name="orderI-3.id" mapping="['orderI3']" domain="integer"/>
                <param name="orderI-4.id" mapping="['orderI4']" domain="integer"/>

                <param name="is_perinatal" mapping="['is_perinatal']" domain="boolean"/>
                <param name="orderAll.id" mapping="['order']" domain="integer"/>

                <param name="diagnos.id" mapping="['diagnos_id']" domain="integer"/>
                <param name="diagnos.name" mapping="['diagnos_name']" domain="string"/>
                <param name="diagnos.code" mapping="['diagnos_code']" domain="string"/>
                <param name="minutes" mapping="['minutes']" domain="integer"/>
                <param name="hours" mapping="['hours']" domain="integer"/>
                <param name="days" mapping="['days']" domain="integer"/>
                <param name="weeks" mapping="['weeks']" domain="integer"/>
                <param name="months" mapping="['months']" domain="integer"/>
                <param name="years" mapping="['years']" domain="integer"/>
                <param name="is_print" mapping="['is_print']" domain="boolean"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Причина смерти сохранена в системе успешно
            </success-text>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    update certificates.death_reason set
                        is_direct = case when (:orderI1 = 1 or :is_perinatal = true and :order = 1) then true end,
                        is_interim = case when :orderI1 = 2 then true end,
                        is_primary = case when :orderI3 = 3 then true end,
                        is_foreign = case when (:orderI4 = 4 or :is_perinatal = true and :order = 5) then true end,
                        <!--is_perinatal = case when (:is_perinatal = true) then :death_certificate_id end,-->
                        is_other_baby_reason = case when (:is_perinatal = true and :order = 2) then true end,
                        is_mother_direct = case when (:is_perinatal = true and :order = 3) then true end,
                        is_mother_other_reason = case when (:is_perinatal = true and :order = 4) then true end,
                        diagnos_id = :diagnos_id,
                        diagnos_name = :diagnos_name,
                        diagnos_code = :diagnos_code,
                        minutes = :minutes,
                        hours = :hours,
                        days = :days,
                        weeks = :weeks,
                        months = :months,
                        years = :years,
                        is_print = :is_print
                    where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <!--<param name="certificate.id" mapping="['death_certificate_id']" domain="integer"/>-->
                <!--<param name="is_direct" mapping="['is_direct']" domain="boolean"/>-->
                <!--<param name="is_interim" mapping="['is_interim']" domain="boolean"/>-->
                <!--<param name="is_primary" mapping="['is_primary']" domain="boolean"/>-->
                <!--<param name="is_foreign" mapping="['is_foreign']" domain="boolean"/>-->
                <param name="orderI-1.id" mapping="['orderI1']" domain="integer"/>
                <param name="orderI-3.id" mapping="['orderI3']" domain="integer"/>
                <param name="orderI-4.id" mapping="['orderI4']" domain="integer"/>

                <!--<param name="is_perinatal" mapping="['is_perinatal']" domain="boolean"/>-->
                <param name="orderAll.id" mapping="['order']" domain="integer"/>

                <param name="diagnos.id" mapping="['diagnos_id']" domain="integer"/>
                <param name="diagnos.name" mapping="['diagnos_name']" domain="string"/>
                <param name="diagnos.code" mapping="['diagnos_code']" domain="string"/>
                <param name="minutes" mapping="['minutes']" domain="integer"/>
                <param name="hours" mapping="['hours']" domain="integer"/>
                <param name="days" mapping="['days']" domain="integer"/>
                <param name="weeks" mapping="['weeks']" domain="integer"/>
                <param name="months" mapping="['months']" domain="integer"/>
                <param name="years" mapping="['years']" domain="integer"/>
                <param name="is_print" mapping="['is_print']" domain="boolean"/>
            </in-parameters>
            <success-text>
                Изменения причины смерти сохранены в системе успешно
            </success-text>
        </action>

        <action id="originReason">
            <invocation>
                <sql:sql>
                    <!--insert into certificates.death_reason(-->
                    <!--death_certificate_id,-->
                    <!--diagnos_id,diagnos_name,diagnos_code,-->
                    <!--is_primary_diagnosis-->
                    <!--)-->
                    <!--values (-->
                    <!--case when (:is_perinatal is null or :is_perinatal = false) then :death_certificate_id end,-->
                    <!--:diagnos_id,-->
                    <!--:diagnos_name,-->
                    <!--:diagnos_code,-->
                    <!--true-->
                    <!--);-->
                    <!--<![CDATA[-->
                    <!--do $$-->
                    <!--begin-->
                    <!--execute-->
                            <!--case when (:has_original is false or :has_original is null)-->
                                <!--then-->
                                    <!--'insert into certificates.death_reason(death_certificate_id, diagnos_id,diagnos_name,diagnos_code,is_primary_diagnosis)-->
                                    <!--values ('''||cast(:death_certificate_id as varchar)||''','''||cast(:diagnos_id as varchar)||''','''||:diagnos_name||''','''||:diagnos_code||''',true);'-->
                                <!--else-->
                                    <!--'update certificates.death_reason set diagnos_id = '''||cast(:diagnos_id as varchar)||''', diagnos_name = '''||:diagnos_name||''',diagnos_code = '''||:diagnos_code||'''where id ='''||cast(:original_id as varchar)||''';'-->
                            <!--end;-->
                    <!--end $$-->
                    <!--]]>-->
                    <!--<![CDATA[-->
                    <!--do $$-->
                    <!--begin-->
                    select certificates.save_original_diagnosis(:actionstring)
                    <!--end $$-->
                    <!--]]>-->
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="original_id" mapping="['original_id']" domain="integer"/>
                <param name="has_original" mapping="['has_original']" domain="boolean"/>
                <param name="certificate.id" mapping="['death_certificate_id']" domain="integer"/>
                <param name="diagnos.id" mapping="['diagnos_id']" domain="integer"/>
                <param name="diagnos.name" mapping="['diagnos_name']" domain="string"/>
                <param name="diagnos.code" mapping="['diagnos_code']" domain="string"/>
                <param name="actionstring" mapping="['actionstring']" domain="string"/>
            </in-parameters>
            <!--<out-parameters>-->
                <!--<param name="id" mapping="[0][0]" domain="integer"/>-->
            <!--</out-parameters>-->
            <success-text>
                Первоначальная причина смерти сохранена в системе успешно
            </success-text>
        </action>
    </actions>
    <validations>
        <!--<condition id="check_filling" level="error">-->
            <!--<expression>-->
                <!--((typeof addr_data != 'undefined') &amp;&amp; (source.addr_data != null) &amp;&amp; (source.addr_data.id != null)) ||((typeof source.addr_descr != 'undefined') &amp;&amp; (source.addr_descr != null)) -->
            <!--</expression>-->
            <!--<message></message>-->
        <!--</condition>-->

        <!--<condition id="checkAddr" level="error">-->
            <!--<expression>((typeof addr_data != 'undefined') &amp;&amp; (addr_data != null) &amp;&amp; (addr_data.id != null)) ||((typeof addr_descr != 'undefined') &amp;&amp; (addr_descr != null)) </expression>-->
            <!--<message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>-->
        <!--</condition>-->

        <!--<constraint id="dCertif_unique" level="error">-->
            <!--<message>Внимание! Серия и номер свидетельства совпадают с ранее выданным!</message>-->
            <!--<invocation>-->
                <!--<sql:sql>-->
                    <!--select count(*)-->
                    <!--from certificates.death_certificate dc-->
                    <!--where trim(dc.code) = trim(:code) and trim(dc.number) = trim(:number)-->
                    <!--and (:id is null or id != :id)-->
                <!--</sql:sql>-->
            <!--</invocation>-->
            <!--<in-parameters>-->
                <!--<param name="id" mapping="['id']" domain="integer"/>-->
                <!--<param name="code" mapping="['code']" domain="string"/>-->
                <!--<param name="number" mapping="['number']" domain="string"/>-->
            <!--</in-parameters>-->
            <!--<result expression="[0][0][0] == 0"/>-->
        <!--</constraint>-->
    </validations>
</object>