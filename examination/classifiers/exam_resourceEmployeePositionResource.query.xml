<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <object-id>exam_classifier</object-id>

    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from pim_employee_position p
                join pim_employee_position_resource r on r.employee_position_id = p.id
                join pim_employee e on p.employee_id = e.id
                join pim_individual i on e.individual_id = i.id
                join pim_position pp on p.position_id = pp.id
                left join pim_position_name pname on pp.id = pname.position_id
                join sr_resource rs on rs.id = r.id
                where e.is_dismissed is not true and (pname.sex_id is null or pname.sex_id = i.gender_id) and :where
                order by :order
            </n2o:items-query>

            <n2o:count-query>
                select count(r)
                from pim_employee_position p
                join pim_employee_position_resource r on r.employee_position_id = p.id
                join pim_employee e on p.employee_id = e.id
                join pim_individual i on e.individual_id = i.id
                join pim_position pp ON p.position_id = pp.id
                left join pim_position_name pname on pp.id = pname.position_id
                join sr_resource rs on rs.id = r.id
                where e.is_dismissed is not true and (pname.sex_id is null or pname.sex_id = i.gender_id) and :where
            </n2o:count-query>

        </n2o:sql>
    </execution>

    <fields>

        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>r.id</expression>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>
                concat(coalesce(NULLIF(pname.name,''), NULLIF(pp.name, '')) || ' ',
                i.surname || ' ', substring(i.name for 1) || '.', substring(i.patr_name for 1) || '.')
            </expression>
            <search>upper(:expression) like '%'||upper(:name)||'%'</search>
        </field>

        <field>
            <id>depId</id>
            <domain>integer</domain>
            <expression>pp.department_id</expression>
            <search>(case when
                (select count(1) from pim_employee_position_resource epr2
                join pim_employee_position ep2 on ep2.id = epr2.employee_position_id
                join pim_employee e2 on e2.id = ep2.employee_id
                join pim_position p on ep2.position_id = p.id
                where e.is_dismissed is not true and p.department_id = :depId
                ) > 0 then pp.department_id = :depId else pp.department_id = (select parent_id from pim_department where id = :depId ) end)
            </search>
        </field>

        <field>
            <id>orgId</id>
            <domain>integer</domain>
            <expression>e.organization_id</expression>
        </field>

        <field>
            <id>button</id>
            <domain>integer</domain>
            <search unavailable="true"/>
            <display unavailable="true"/>
        </field>

    </fields>

</query>