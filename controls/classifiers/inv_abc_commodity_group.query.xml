<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <object-id>inventory_classifier</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select from (
                    WITH RECURSIVE recursetree(id, parent_id, name, org_id) AS (
                SELECT
                cg.id,
                cg.parent_id,
                cg.name,
                cg.org_id
                FROM inventory.commodity_group cg LEFT JOIN sec_user_org s_u_o ON cg.org_id = s_u_o.org_id
                LEFT JOIN pim_organization p_o ON p_o.id = s_u_o.org_id
                WHERE
                :where
                UNION
                SELECT c_g.id, c_g.parent_id, c_g.name, c_g.org_id
                FROM inventory.commodity_group c_g
                JOIN recursetree rt ON rt.parent_id = c_g.id
                )
                SELECT id, name, org_id, parent_id FROM recursetree
                ORDER BY id) as cgx

            </n2o:items-query>
            <n2o:count-query>
                select count (cgx.*) from (WITH RECURSIVE recursetree(id, parent_id, name, org_id) AS (
                SELECT
                cg.id,
                cg.parent_id,
                cg.name,
                cg.org_id
                FROM inventory.commodity_group cg LEFT JOIN sec_user_org s_u_o ON cg.org_id = s_u_o.org_id
                LEFT JOIN pim_organization p_o ON p_o.id = s_u_o.org_id
                WHERE
                :where
                UNION
                SELECT c_g.id, c_g.parent_id, c_g.name, c_g.org_id
                FROM inventory.commodity_group c_g
                JOIN recursetree rt ON rt.parent_id = c_g.id
                )
                SELECT id, name, org_id, parent_id FROM recursetree) as cgx
            </n2o:count-query>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
        </field>
        <field>
            <id>name</id>
            <domain>string</domain>
            <search>upper(name) like '%'||upper(:name)||'%'</search>
        </field>
        <field>
            <id>parentId</id>
            <domain>integer</domain>
            <expression>cgx.parent_id</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>orgId</id>
            <domain>integer</domain>
            <expression>cgx.org_id</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>hasChildren</id>
            <display>coalesce((select true from inventory.commodity_group as cg1 where cg1.parent_id = cgx.id limit 1),
                false) as has_children
            </display>
        </field>
        <field>
            <id>iconId</id>
            <domain>string</domain>
            <display>coalesce((select cast('glyphicons glyphicons-folder-closed' as varchar) from inventory.commodity_group cg2 where cg2.parent_id = cgx.id limit 1),
                'glyphicons glyphicons-chevron-right') as icon_id
            </display>
        </field>
        <field>
            <id>canResolved</id>
            <display>coalesce((select false from inventory.commodity_group as cg1 where cg1.parent_id = cgx.id limit 1),
                true) as can_resolved</display>
        </field>
        <field>
            <id>user.id</id>
            <display value="#{user.id}" unavailable="true"/>
            <search value="#{user.id}">s_u_o.user_id = :user.id OR cg.org_id IS NULL</search>
        </field>
    </fields>
</query>