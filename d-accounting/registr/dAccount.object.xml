<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:n2o="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-invocation-1.0">

    <actions>

        <action id="addPatient">
            <invocation>
                <rest:rest method="POST">
                    ${n2o.backend.path}/d-accounting/d-account
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="regDate" mapping="['regDt']" domain="date"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="mo.id" mapping="['clinicId']" domain="integer" value="#{org.id}"/>
                <param name="vrachId" mapping="['regDoctorId']" domain="integer" value="#{emplPos.id}"/>
                <param name="cond.id" mapping="['regConditionId']" domain="integer"/>
                <param name="patState.id" mapping="['patientStateId']" domain="integer"/>
                <param name="hiv.id" mapping="['hivResultId']" domain="integer"/>
                <param name="hivDate" mapping="['hivRegDt']" domain="date"/>
                <param name="epidemConclusionNumber" mapping="['epidemConclusionNumber']" domain="string"/>
                <param name="group.id" mapping="['dGroupId']" domain="integer"/>
                <param name="amb.id" mapping="['ambulanceKindId']" domain="integer"/>
                <param name="main_diagnos.id" mapping="['mainDiagnosisId']" domain="integer"/>
                <param name="disease.id" mapping="['diseaseTypeId']" domain="integer"/>
                <param name="stage.id" mapping="['stageId']" domain="integer"/>
                <param name="register.id" mapping="['registerId']" domain="integer" value="#{register.id}"/>
                <param name="ac_stage.id" mapping="['accountStageId']" domain="integer"/>
                <param name="clinicDistrict.id" mapping="['clinicDistrictId']" domain="integer"/>
                <param name="is_toxic" mapping="['isToxic']" domain="boolean"/>
                <!-- todo need new version of n2o 3.0 <param name="main_diagnos.attr*.value_id" mapping="['attributeValues']" domain="integer[]"/>-->
                <param name="main_diagnos.attr" mapping="['attributes']" domain="object[]"/>
                <param name="clinicalForm.id" mapping="['clinicalFormId']" domain="integer"/>
                <param name="localization.id" mapping="['localizationId']" domain="integer"/>
                <param name="complication.id" mapping="['complicationId']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </out-parameters>
            <validations activate="whiteList">
                <validation ref-id="patientHasAccount"/>
            </validations>
        </action>

        <action id="update">
            <invocation>
                <rest:rest method="PUT" >
                    ${n2o.backend.path}/d-accounting/d-account/{id}
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="regDate" mapping="['regDt']" domain="date"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="mo.id" mapping="['clinicId']" domain="integer" value="#{org.id}"/>
                <param name="vrachId" mapping="['regDoctorId']" domain="integer" value="#{emplPos.id}"/>
                <param name="cond.id" mapping="['regConditionId']" domain="integer"/>
                <param name="patState.id" mapping="['patientStateId']" domain="integer"/>
                <param name="hiv.id" mapping="['hivResultId']" domain="integer"/>
                <param name="hivDate" mapping="['hivRegDt']" domain="date"/>
                <param name="epidemConclusionNumber" mapping="['epidemConclusionNumber']" domain="string"/>
                <param name="register.id" mapping="['registerId']" domain="integer"/>
                <param name="ac_stage.id" mapping="['accountStageId']" domain="integer"/>
                <param name="clinicDistrict.id" mapping="['clinicDistrictId']" domain="integer"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>

        <action id="saveAdditionalInfo">
            <invocation>
                <n2o:sql>
                    UPDATE d_accounting.account
                    SET death_reas_id = :death_reas_id, death_info = :death_info,
                    disability_id = :disability_id, is_war_inval = :is_war_inval,
                    is_veteran = :is_veteran,
                    is_learner = :is_learner,
                    education_id = :education_id, class_number = :class_number, marit_stat_id = :marit_stat_id,
                    livelihood_id = :livelihood_id, resident_num_id = :resident_num_id, domicile_id = :domicile_id
                    WHERE id = :id;

                    UPDATE public.pim_individual SET death_dt = :death_dt WHERE id = :patient_id;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="patient.id" mapping="['patient_id']" domain="integer"/>
                <param name="death_reas.id" mapping="['death_reas_id']" domain="integer"/>
                <param name="patient.death_dt" mapping="['death_dt']" domain="date"/>
                <param name="death_info" mapping="['death_info']" domain="string"/>
                <param name="disability.id" mapping="['disability_id']" domain="integer"/>
                <param name="is_war_inval" mapping="['is_war_inval']" domain="boolean"/>
                <param name="is_veteran" mapping="['is_veteran']" domain="boolean"/>
                <param name="is_learner" mapping="['is_learner']" domain="boolean"/>
                <param name="education.id" mapping="['education_id']" domain="integer"/>
                <param name="class_number" mapping="['class_number']" domain="integer"/>
                <param name="marit_stat.id" mapping="['marit_stat_id']" domain="integer"/>
                <param name="livelihood.id" mapping="['livelihood_id']" domain="integer"/>
                <param name="resident_num.id" mapping="['resident_num_id']" domain="integer"/>
                <param name="domicile.id" mapping="['domicile_id']" domain="integer"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>

        <action id="addInfo">
            <invocation>
                <n2o:sql>
                    INSERT INTO d_accounting.diagnosis_h (id, account_id, main_diag_id, main_diag_dt, atten_diag_id, atten_diag_dt)
                    VALUES ((SELECT nextval('d_accounting.diagnosis_h_id_seq')), :account_id, :main_diag_id, :main_diag_dt, :atten_diag_id, :atten_diag_dt);

                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="account_id" mapping="['account_id']" domain="integer"/>
                <param name="diagnosMain.id" mapping="['main_diag_id']" domain="integer"/>
                <param name="main_diag_dt" mapping="['main_diag_dt']" domain="date"/>
                <param name="diagnosAtten.id" mapping="['atten_diag_id']" domain="integer"/>
                <param name="atten_diag_dt" mapping="['atten_diag_dt']" domain="date"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>

        <action id="changeTrust">
            <invocation>
                <n2o:sql>
                    UPDATE d_accounting.account SET
                    trust_org_id = :trust_org_id,
                    trust_ind_id = :trust_ind_id
                    WHERE id = :account_id;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="account_id" mapping="['account_id']" domain="integer"/>
                <param name="trust_org.id" mapping="['trust_org_id']" domain="integer"/>
                <param name="trust_ind.id" mapping="['trust_ind_id']" domain="integer"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>

        <action id="removeFromRegister">
            <invocation>
                <n2o:sql>
                    UPDATE d_accounting.account SET
                    is_removed = true,
                    rmv_reason_id = :rmv_reason_id,
                    rmv_descr = :rmv_descr,
                    rmv_doctor_id = :rmv_doctor,
                    removed_dt = CURRENT_DATE
                    WHERE id = :id;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="rmv_reason.id" mapping="['rmv_reason_id']" domain="integer"/>
                <param name="rmv_descr" mapping="['rmv_descr']" domain="string"/>
                <param name="rmv_doctor" mapping="['rmv_doctor']" domain="integer" value="#{emplPos.id}"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="accountHasStep"/>
                <validation ref-id="accountHasTreatmentPlan"/>
            </validations>
        </action>

        <action id="takeOffPatient">
            <invocation>
                <n2o:sql>
                    UPDATE d_accounting.account SET
                    unreg_dt = :unregDate,
                    unreg_doctor_id = :unreg_doctor_id,
                    commission_id = :commission_id,
                    commission_issue_id = :commission_issue_id
                    WHERE id = :id;

                    UPDATE d_accounting.pat_d_group SET
                    to_dt = :unregDate,
                    stop_reas_id = :stop_reas_id
                    WHERE account_id = :id AND to_dt IS NULL AND stop_reas_id IS NULL;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="unregDate" mapping="['unregDate']" domain="date"/>
                <param name="reason.id" mapping="['stop_reas_id']" domain="integer"/>
                <param name="unregDoctor.id" mapping="[unreg_doctor_id]" domain="integer"/>
                <param name="commission.id" mapping="[commission_id]" domain="integer"/>
                <param name="issueDate.id" mapping="[commission_issue_id]" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="unregDateCheck"/>
            </validations>
        </action>

        <action id="updateTakeOffPatient">
            <invocation>
                <n2o:sql>
                    UPDATE d_accounting.account SET
                    unreg_dt = :unregDate,
                    unreg_doctor_id = :unreg_doctor_id,
                    commission_id = :commission_id,
                    commission_issue_id = :commission_issue_id
                    WHERE id = :id;

                    UPDATE d_accounting.pat_d_group SET
                    to_dt = :unregDate,
                    stop_reas_id = :stop_reas_id
                    WHERE id = :dgroupId;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="unregDate" mapping="['unregDate']" domain="date"/>
                <param name="reason.id" mapping="['stop_reas_id']" domain="integer"/>
                <param name="dgroup.id" mapping="['dgroupId']" domain="integer"/>
                <param name="unregDoctor.id" mapping="[unreg_doctor_id]" domain="integer"/>
                <param name="commission.id" mapping="[commission_id]" domain="integer"/>
                <param name="issueDate.id" mapping="[commission_issue_id]" domain="integer"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="unregDateCheck"/>
            </validations>
        </action>

    </actions>

    <validations>
        <constraint id="patientHasAccount" level="error">
            <message>Пациент уже стоит на учете.</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from d_accounting.account ac
                    join public.pim_indiv_code  ic on ic.code = ac.patient_uid
                    join public.pim_code_type typ on typ.id=ic.type_id
                    join public.pci_patient pat on pat.id=ic.indiv_id
                    where not ac.is_removed and typ.code='UID' and ac.clinic_id = :clinicId
                    and ac.register_id = :registr_id
                    and pat.id= :patient_id
                    and ac.unreg_dt is null
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="mo.id" mapping="['clinicId']"/>
                <param name="register.id" mapping="['registr_id']"/>
                <param name="patient.id" mapping="['patient_id']"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="accountHasStep" level="error" moment="before-edit-model">
            <message>Внимание! Невозможно удалить запись. У пациента есть оказанные услуги.</message>
            <invocation>
                <sql:sql>
                    select count(*) from d_accounting.account_case ac
                    join public.mc_case c on c.id=ac.case_id
                    join public.mc_step st on st.case_id=c.id
                    left join public.mc_case_type ct on ct.id=c.case_type_id
                    where ct.case_mode_id=1 and ac.account_id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="accountHasTreatmentPlan" level="error" moment="before-edit-model">
            <message>Внимание! Невозможно удалить запись. У пациента есть план лечения.</message>
            <invocation>
                <sql:sql>
                    select count(*) from d_accounting.treatment_plan tp
                    where tp.account_id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <condition id="regDateCheck" level="error">
            <message>Дата постановки на учёт не может быть больше текущей!</message>
            <expression><![CDATA[
            if(regDate == null){
                true;
             } else {
                (moment(regDate, 'DD.MM.YYYY HH:mm')<=moment(today(), 'DD.MM.YYYY HH:mm'));
            }]]></expression>
        </condition>
        <constraint id="unregDateCheck" level="error">
            <message>Дата снятия с учёта не может быть меньше даты начала действия Д-группы!</message>
            <invocation>
                <n2o:sql>
                    select :unregDate > (SELECT pgr.from_dt FROM d_accounting.pat_d_group pgr WHERE pgr.account_id = :id ORDER
                    BY pgr.from_dt DESC LIMIT 1)
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="unregDate" mapping="['unregDate']" domain="date"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>
    </validations>
</object>