<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0">
    <!--<id>patJob</id>-->
    <name>Место работы/Учебы/ДДУ</name>
    <actions>
        <action id="create" name="Создать">
        <invocation>
            <sql:sql>
                insert into public.pci_patient_job(
                patient_id,
                organization_type_id,
                okved_id,
                organization_id,
                department_id,
                study_group,
                profession_working_id,
                job_name,
                from_dt,
                to_dt,
                employee_id,
                is_main_job
                <!--,-->
                <!--is_empl_fired-->
                )
                values (
                :patient,
                :org_type,
                :okved,
                :org,
                :dep,
                :study_group,
                :profession_working,
                :job_name,
                :from_dt,
                :to_dt,
                :employee_id,
                :is_main_job
                <!--:is_empl_fired-->
                );
            </sql:sql>
        </invocation>
            <in-parameters>
                <param name="patient.id" mapping="['patient']" domain="integer"/>
                <param name="org_type.id" mapping="['org_type']" domain="integer"/>
                <param name="sphere.id" mapping="['okved']" domain="integer"/>
                <param name="org.id" mapping="['org']" domain="integer"/>
                <param name="dep.id" mapping="['dep']" domain="integer"/>
                <param name="study_group" mapping="['study_group']" domain="string"/>
                <param name="profession_working.id" mapping="['profession_working']" domain="integer"/>
                <param name="job_name" mapping="['job_name']" domain="string"/>
                <param name="from_dt" mapping="['from_dt']" domain="date"/>
                <param name="to_dt" mapping="['to_dt']" domain="date"/>
                <param name="employee.id" mapping="['employee_id']" domain="integer"/>
                <param name="is_main_job" mapping="['is_main_job']" domain="boolean"/>
                <!--<param name="is_empl_fired" mapping="['is_empl_fired']" domain="boolean"/>-->
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Место работы сохранено в системе.
            </success-text>
        </action>
        <action id="update" name="Изменить">
            <invocation>
                <sql:sql>
                    update public.pci_patient_job set
                    organization_type_id = :org_type
                    ,okved_id = :okved
                    ,organization_id = :org
                    ,department_id = :dep
                    ,study_group = :study_group
                    ,profession_working_id = :profession_working
                    ,job_name = :job_name
                    ,from_dt = :from_dt
                    ,to_dt = :to_dt
                    ,employee_id = :employee_id
                    ,is_main_job = :is_main_job
                    <!--,is_empl_fired = :is_empl_fired-->
                    where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <!--<param name="patient.id" mapping="['patient']" domain="integer"/>-->
                <param name="org_type.id" mapping="['org_type']" domain="integer"/>
                <param name="sphere.id" mapping="['okved']" domain="integer"/>
                <param name="org.id" mapping="['org']" domain="integer"/>
                <param name="dep.id" mapping="['dep']" domain="integer"/>
                <param name="study_group" mapping="['study_group']" domain="string"/>
                <param name="profession_working.id" mapping="['profession_working']" domain="integer"/>
                <param name="job_name" mapping="['job_name']" domain="string"/>
                <param name="from_dt" mapping="['from_dt']" domain="date"/>
                <param name="to_dt" mapping="['to_dt']" domain="date"/>
                <param name="employee.id" mapping="['employee_id']" domain="integer"/>
                <param name="is_main_job" mapping="['is_main_job']" domain="boolean"/>
                <!--<param name="is_empl_fired" mapping="['is_empl_fired']" domain="boolean"/>-->
            </in-parameters>
            <success-text>
                Изменение места работы сохранено в системе.
            </success-text>
        </action>

        <action id="delete" name="Удалить">
            <invocation>
                <sql:sql>
                    delete from public.pci_patient_job where id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="full_name" mapping="['full_name']" domain="string"/>
            </in-parameters>
            <confirmation-text>
                Вы уверены, что место работы/учебы/ДДУ "{full_name}" должно быть удалено?
            </confirmation-text>
            <success-text>
                Место работы/учебы/ДДУ "{full_name}" успешно удалено.
            </success-text>
        </action>
    </actions>
    <validations>
        <!--<condition id="checkUnregofDate" level="error">-->
            <!--<expression on="unreg_dt,reg_state">-->
                <!--if ((typeof unreg_dt != 'undefined') &amp;&amp; (unreg_dt != null))-->
                    <!--((typeof reg_state != 'undefined') &amp;&amp; (reg_state.id != null)&amp;&amp; (reg_state.e_code == '2'))-->
                    <!--;else true-->
            <!--</expression>-->
            <!--<message>-->
                <!--При указании даты открепления состояние регистрации должно быть "Откреплен"-->
            <!--</message>-->
        <!--</condition>-->

        <!--<condition id="birth_check_regdt" level="error">-->
            <!--<expression on="reg_dt,patient.birth_dt">-->
                <!--(moment(reg_dt.substring(0,10), 'DD.MM.YYYY')) >= (moment(patient.birth_dt.substring(0,10), 'DD.MM.YYYY'))-->
            <!--</expression>-->
            <!--<message>-->
                <!--Дата прикрепления не может быть меньше даты рождения {birth_dt}-->
            <!--</message>-->
        <!--</condition>-->

        <!--<condition id="regdt_check_death" level="error">-->
            <!--<expression on="reg_dt,death_date">-->
                <!--if ((typeof death_date != 'undefined') &amp;&amp; (death_date != null))-->
                <!--(moment(death_date.substring(0,10), 'DD.MM.YYYY')) > (moment(reg_dt.substring(0,10), 'DD.MM.YYYY'))-->
                <!--; else true-->
            <!--</expression>-->
            <!--<message>-->
                <!--Дата прикрепления не может быть больше даты смерти {death_date}-->
            <!--</message>-->
        <!--</condition>-->

        <!--<condition id="check_dt" level="error">-->
            <!--<expression on="unreg_dt,reg_dt">-->
                <!--if ((typeof unreg_dt != 'undefined') &amp;&amp; (unreg_dt != null))-->
                <!--(moment(unreg_dt.substring(0,10), 'DD.MM.YYYY')) > (moment(reg_dt.substring(0,10), 'DD.MM.YYYY'))-->
                <!--; else true-->
            <!--</expression>-->
            <!--<message>-->
                <!--Дата прикрепления не может быть больше даты открепления-->
            <!--</message>-->
        <!--</condition>-->

        <!--<condition id="death_check_unregdt" level="error">-->
            <!--<expression on="death_date,unreg_dt">-->
                <!--if ((typeof unreg_dt != 'undefined') &amp;&amp; (unreg_dt != null)&amp;&amp;(typeof death_date != 'undefined') &amp;&amp; (death_date != null))-->
                    <!--(moment(death_date.substring(0,10), 'DD.MM.YYYY')) >= (moment(unreg_dt.substring(0,10), 'DD.MM.YYYY'))-->
                    <!--;else true-->
            <!--</expression>-->
            <!--<message>-->
                <!--Дата открепления не может быть больше даты смерти {death_date}-->
            <!--</message>-->
        <!--</condition>-->

        <constraint id="checkUniqueJob" level="error">
            <!--todo NNO-542 Параметризация сообщений валидации на клиенте n2o.ver = 2.2-->
            <message>У пациента может быть только одно основное место работы/учебы.</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from pci_patient_job ppj
                    where ppj.patient_id = :pat
                    and (ppj.is_main_job = :is_main_job and :is_main_job = true)
                    and
                    (
                        (cast(:from_dt as date) >= ppj.from_dt and (ppj.to_dt >= cast(:from_dt as date) or ppj.to_dt is null))
                          or
                        (ppj.from_dt >= cast(:from_dt as date) and (cast(:to_dt as date) >= ppj.from_dt or cast(:to_dt as date) is null))
                    )
                    and (:id is null or ppj.id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="patient.id" mapping="['pat']" domain="integer"/>
                <param name="org.id" mapping="['org']" domain="integer"/>
                <param name="from_dt" mapping="['from_dt']" domain="date"/>
                <param name="to_dt" mapping="['to_dt']" domain="date"/>
                <param name="is_main_job" mapping="['is_main_job']" domain="boolean"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <condition id="checkDate" level="error">
            <message>Дата окончания должна быть позже даты начала.</message>
            <expression on="from_dt,to_dt"><![CDATA[(moment(to_dt, 'DD.MM.YYYY HH:mm')>=moment(from_dt, 'DD.MM.YYYY HH:mm')) || to_dt == null]]></expression>
        </condition>
    </validations>
</object>
