<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0">
    <name>policyOMS</name>

    <actions>
        <action id="create" form-submit-label="Сохранить" name="Сохранить">
            <invocation>
                <rest:rest method="POST" >
                    ${n2o.backend.path}/patients/{individualId}/documents
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="code" mapping="['code']" domain="string"/>
                <param name="patient_id" mapping="['individualId']"/>
                <param name="series.value" mapping="['series']" domain="string"/>
                <param name="number.value" mapping="['number']" domain="string"/>
                <param name="note" mapping="['note']"/>
                <param name="expireDate" mapping="['expireDate']"/>
                <param name="issueDate" mapping="['issueDate']"/>
                <param name="birthDate" mapping="['birthDate']"/>
                <param name="surname" mapping="['surname']"/>
                <param name="name" mapping="['name']"/>
                <param name="patrName" mapping="['patrName']"/>
                <param name="issuerText" mapping="['issuerText']"/>
                <param name="issuer.id" mapping="['issuerId']"/>
                <param name="docType.id" mapping="['typeId']"/>
                <param name="docType.name" mapping="['typeName']"/>
                <param name="docType.code" mapping="['typeCode']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <validations activate="whiteList">
                <validation ref-id="checkUniqueOMSSeriesAndNumber"/>
                <validation ref-id="checkUniqueOMSCode"/>
            </validations>
        </action>
        <action id="update" form-submit-label="Сохранить" name="Сохранить">
            <invocation>
                <rest:rest method="PUT">
                    ${n2o.backend.path}/patients/{individualId}/documents/{id}
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="code" mapping="['code']" domain="string"/>
                <param name="patient_id" mapping="['individualId']"/>
                <param name="series.value" mapping="['series']" domain="string"/>
                <param name="number.value" mapping="['number']" domain="string"/>
                <param name="note" mapping="['note']"/>
                <param name="expireDate" mapping="['expireDate']"/>
                <param name="issueDate" mapping="['issueDate']"/>
                <param name="birthDate" mapping="['birthDate']"/>
                <param name="surname" mapping="['surname']"/>
                <param name="name" mapping="['name']"/>
                <param name="patrName" mapping="['patrName']"/>
                <param name="issuerText" mapping="['issuerText']"/>
                <param name="issuer.id" mapping="['issuerId']"/>
                <param name="docType.id" mapping="['typeId']"/>
                <param name="docType.name" mapping="['typeName']"/>
                <param name="docType.code" mapping="['typeCode']"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']"/>
            </out-parameters>
            <validations activate="whiteList">
                <validation ref-id="checkUniqueOMSSeriesAndNumber"/>
                <validation ref-id="checkUniqueOMSCode"/>
            </validations>
        </action>
        <action id="delete" name="Удалить" form-submit-label="Удалить">
            <invocation>
                <rest:rest method="DELETE">
                    ${n2o.backend.path}/patients/{individualId}/documents/{id}
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']"/>
                <param name="patient_id" mapping="['individualId']"/>
                <param name="displayNumber" mapping="['displayNumber']" domain="string"/>
            </in-parameters>
            <confirmation-text>Вы уверены, что хотите удалить запись "{displayNumber}"?</confirmation-text>
            <success-text>Запись "{displayNumber}" удалена.</success-text>
        </action>
    </actions>

    <validations>
        <condition id="checkDate" level="error" moment="before-action">
            <message>Дата окончания должна быть позже даты начала.</message>
            <expression on="expireDate"><![CDATA[
                ((expireDate == null) ||
                (moment(expireDate, 'DD.MM.YYYY') >= moment(issueDate, 'DD.MM.YYYY'))
                )
                ]]>
            </expression>
        </condition>

        <constraint id="checkUniquePolicyOMS" level="error" moment="before-action">
            <message>Даты действия пересекаются с имеющимися записями.</message>
            <invocation>
                <sql:sql>
                    <![CDATA[
                        select count(*)
                        from pim_individual_doc doc
                        inner join pim_doc_type dt on dt.id = doc.type_id and dt.code in ('MHI_OLDER', 'MHI_TEMP', 'MHI_UNIFORM')
                        inner join pim_doc_type_category dtc on dtc.category_id = 2 and dtc.type_id = dt.id
                        where doc.indiv_id = :patient_id
                            and not ( doc.issue_dt > :expireDate and cast(:expireDate as date) is not null
                            and doc.issue_dt is not null
                            or doc.expire_dt < :issueDate and doc.expire_dt is not null)
                            and not (doc.expire_dt is null and doc.issue_dt < :issueDate and :id is null)
                            and (:id is null or doc.id != :id)
                    ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="patient_id" mapping="['patient_id']" domain="integer"/>
                <param name="issueDate" mapping="['issueDate']" domain="date"/>
                <param name="expireDate" mapping="['expireDate']" domain="date"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <constraint id="docMess" level="warning" moment="before-action">
            <message>Действующие записи будут закрыты датой {date}.</message>
            <invocation>
                <sql:sql>
                    <![CDATA[
                        select count(*), to_char(cast(cast(:issueDate as date) - cast('1 day' as interval) as date),'dd.mm.yyyy')
                        from pim_individual_doc doc
                        inner join pim_doc_type dt on dt.id = doc.type_id and dt.code in ('MHI_OLDER', 'MHI_TEMP', 'MHI_UNIFORM')
                        inner join pim_doc_type_category dtc on dtc.category_id = 2 and dtc.type_id = dt.id
                        where
                            doc.indiv_id = :patient_id
                            and :id is null
                            and doc.expire_dt is null
                            and doc.issue_dt < :issueDate
                    ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="patient_id" mapping="['patient_id']" domain="integer"/>
                <param name="issueDate" mapping="['issueDate']" domain="date"/>
                <param name="expireDate" mapping="['expireDate']" domain="date"/>
            </in-parameters>
            <out-parameters>
                <param name="date" mapping="[0][0][1]" domain="date"/>
            </out-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <condition id="checkEnpSum" level="error" moment="before-action">
            <message>Некорректный ЕНП. Контрольная сумма не совпадает.</message>
            <expression on="code">
                <![CDATA[
                var result = true;
                var digits = new Array(0);

                if(code != null){
                    var numLength = code.length;
                    for (var i = 0; i < numLength; i++){
                        var c = code.charAt(i);
                        var d = parseInt(c);

                        if (!isNaN(d)){
                            digits.length = digits.length + 1;
                            digits[digits.length - 1] = d;
                        }
                        else if (c != ' ' && c != '-')
                            result = false;
                    }
                    if (digits == undefined)
                        result = false;

                    if (digits.length != 16)
                        result = false;

                    var sum = 0;
                    var digitsSlice = digits.slice(0, 15);
                    for (var i = digitsSlice.length; i > 0; i--){
                        var m = i % 2 + 1;
                        var s = (digitsSlice[i - 1]) * m;
                        if (s >= 10)
                            s = s - 10 + 1;
                        sum = sum + s;
                    }

                    var controlNumber = digits[15];
                    result = ((10 - sum % 10) == controlNumber || sum % 10 == controlNumber);
                }
                result;
                ]]>
            </expression>
        </condition>

        <constraint id="checkUniqueOMSSeriesAndNumber" level="error">
            <message>Уже существует полис ОМС с таким номером и серией.</message>
            <invocation>
                <sql:sql>
                    <![CDATA[
                    select count(*)
                    from pim_individual_doc doc
                    where doc.indiv_id != (:individualId)::integer and doc.type_id = (:typeId)::integer
                    and upper(trim((case when doc.series is null then '' else doc.series end)||number)::text) =
                    upper(trim((case when :series is null then '' else :series end)||:number)::text)
                ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="patient_id" mapping="['individualId']"/>
                <param name="docType.id" mapping="['typeId']"/>
                <param name="series.value" mapping="['series']" domain="string"/>
                <param name="number.value" mapping="['number']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <constraint id="checkUniqueOMSCode" level="error">
            <message>Уже существует полис ОМС с таким кодом.</message>
            <invocation>
                <sql:sql>
                    <![CDATA[ select count(*)
                    from pim_individual_doc doc
                    inner join pim_doc_type dt on dt.id = doc.type_id and dt.code = 'MHI_UNIFORM'
                    left join pim_indiv_code ic on ic.id = doc.code_id
                    where doc.indiv_id != (:individualId)::integer and ic.code = :code
                ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="patient_id" mapping="['individualId']"/>
                <param name="code" mapping="['code']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

    </validations>

</object>
