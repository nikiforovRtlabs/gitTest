<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">

    <execution>
        <n2o:sql>
            <n2o:items-query>
                with c as
                (select rg.id as group_id, rgdef.name as name, rg.parent_id as parent_id, null as report_id,
                null as code, null as dimension_date_def_id from indicators.report_group rg
                join indicators.report_group_def rgdef on rgdef.id = rg.group_def_id
                union
                select (select max(id) from indicators.report_group) + row_number()over(order by name) as group_id,
                r.name as name, r.group_id as parent_id, r.id as report_id, r.code, r.dimension_date_def_id
                from indicators.report r where r.code not like '%_svod')

                select :select from c
                where :where
                order by c.group_id
            </n2o:items-query>

            <n2o:count-query>
                with c as
                (select rg.id as group_id, rgdef.name as name, rg.parent_id as parent_id, null as report_id,
                null as code from indicators.report_group rg
                join indicators.report_group_def rgdef on rgdef.id = rg.group_def_id
                union
                select (select max(id) from indicators.report_group) + row_number()over(order by name) as group_id,
                r.name as name, r.group_id as parent_id, r.id as report_id, r.code, r.dimension_date_def_id
                from indicators.report r where r.code not like '%_svod')

                select count(c) from c
                where :where
            </n2o:count-query>
        </n2o:sql>
    </execution>

    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>c.group_id</expression>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <expression>c.name</expression>
            <search>lower(c.name) like '%'||lower(:name)||'%'</search>
        </field>

        <field>
            <id>parentId</id>
            <domain>integer</domain>
            <expression>c.parent_id</expression>
        </field>

        <field>
            <id>hasChildren</id>
            <display>coalesce((select true from c as c1 where c.group_id = c1.parent_id and c.code is null limit 1),
                false) as has_children</display>
        </field>

        <field>
            <id>reportId</id>
            <domain>integer</domain>
            <expression>c.report_id</expression>
        </field>

        <field>
            <id>code</id>
            <domain>string</domain>
            <expression>c.code</expression>
        </field>

        <field>
            <id>canResolved</id>
            <display>coalesce((select false from c as c1 where c.code is null limit 1), true)
                as can_resolved</display>
        </field>

        <field>
            <id>dimDateDefId</id>
            <domain>integer</domain>
            <expression>c.dimension_date_def_id</expression>
        </field>

    </fields>
</query>