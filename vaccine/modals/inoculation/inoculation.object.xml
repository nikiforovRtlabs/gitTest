<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:rest="http://n2oapp.net/framework/config/schema/action-rest-1.0"
        xmlns:n2o="http://n2oapp.net/framework/config/schema/action-invocation-1.0">
    <name>Прививка</name>
    <actions>
        <action id="create" name="Создание прививки">
            <invocation>
                <rest:rest method="POST">
                    ${n2o.backend.path}/vaccine/inoculations/
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="clinic.id" mapping="['clinicId']" domain="integer"/>
                <param name="date" mapping="['date']" domain="date"/>
                <param name="dose.id" mapping="['doseId']" domain="integer"/>
                <param name="emplPosRes.posId" mapping="['employeeId']" domain="integer"/>
                <param name="emplPosRes.id" mapping="['emplPosResId']" domain="integer"/>
                <param name="inputType.id" mapping="['inputTypeId']" domain="integer"/>
                <param name="inspectionDateTime" mapping="['inspectionDateTime']" domain="date"/>
                <param name="inspectionNotes" mapping="['inspectionNotes']" domain="string"/>
                <param name="inoculationGlobalResult" mapping="['inoculationGlobalResult']" domain="string"/>
                <param name="inoculationLocalResult" mapping="['inoculationLocalResult']" domain="string"/>
                <param name="inoculationComplicationResult" mapping="['inoculationComplicationResult']" domain="string"/>
                <param name="isMantu" mapping="['isMantu']" domain="boolean"/>
                <param name="number.id" mapping="['numberId']" domain="integer"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="probaResultEmplPosRes.id" mapping="['probaResultEmplPosResId']" domain="integer"/>
                <param name="probaResultEmplPosRes.posId" mapping="['probaResultEmplPosId']" domain="integer"/>
                <param name="probaResultClinic.id" mapping="['probaResultClinicId']" domain="integer"/>
                <param name="probaInspectDate" mapping="['probaInspectDate']" domain="date"/>
                <param name="probaGiper" mapping="['probaGiper']" domain="integer"/>
                <param name="probaPapul" mapping="['probaPapul']" domain="integer"/>
                <param name="probaResult.id" mapping="['probaResultId']" domain="integer"/>
                <param name="series.id" mapping="['seriesId']" domain="integer"/>
                <param name="status.id" mapping="['statusId']" domain="integer"/>
                <param name="temperature" mapping="['temperature']" domain="string"/>
                <param name="vaccine.id" mapping="['vaccineId']" domain="integer"/>
                <param name="anotherMo" mapping="['anotherMo']" domain="boolean"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </out-parameters>
            <validations activate="whiteList">
                <validation ref-id="inoculation_uniq"/>
                <validation ref-id="has_uid"/>
            </validations>
            <confirmation-text>Создать еще?</confirmation-text>
        </action>
        <action id="update" name="Редактировать">
            <invocation>
                <rest:rest method="POST">
                    ${n2o.backend.path}/vaccine/inoculations/{id}
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="clinic.id" mapping="['clinicId']" domain="integer"/>
                <param name="date" mapping="['date']" domain="date"/>
                <param name="dose.id" mapping="['doseId']" domain="integer"/>
                <param name="emplPosRes.posId" mapping="['employeeId']" domain="integer"/>
                <param name="emplPosRes.id" mapping="['emplPosResId']" domain="integer"/>
                <param name="inspectionDateTime" mapping="['inspectionDateTime']" domain="date"/>
                <param name="inspectionNotes" mapping="['inspectionNotes']" domain="string"/>
                <param name="inoculationLocalResult" mapping="['inoculationLocalResult']" domain="string"/>
                <param name="inoculationGlobalResult" mapping="['inoculationGlobalResult']" domain="string"/>
                <param name="inoculationComplicationResult" mapping="['inoculationComplicationResult']" domain="string"/>
                <param name="inputType.id" mapping="['inputTypeId']" domain="integer"/>
                <param name="isMantu" mapping="['isMantu']" domain="boolean"/>
                <param name="number.id" mapping="['numberId']" domain="integer"/>
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="probaResultEmplPosRes.id" mapping="['probaResultEmplPosResId']" domain="integer"/>
                <param name="probaResultEmplPosRes.posId" mapping="['probaResultEmplPosId']" domain="integer"/>
                <param name="probaResultClinic.id" mapping="['probaResultClinicId']" domain="integer"/>
                <param name="probaInspectDate" mapping="['probaInspectDate']" domain="date"/>
                <param name="probaGiper" mapping="['probaGiper']" domain="integer"/>
                <param name="probaPapul" mapping="['probaPapul']" domain="integer"/>
                <param name="probaResult.id" mapping="['probaResultId']" domain="integer"/>
                <param name="series.id" mapping="['seriesId']" domain="integer"/>
                <param name="serviceId" mapping="['serviceId']" domain="integer"/>
                <param name="status.id" mapping="['statusId']" domain="integer"/>
                <param name="temperature" mapping="['temperature']" domain="string"/>
                <param name="vaccine.id" mapping="['vaccineId']" domain="integer"/>
                <param name="anotherMo" mapping="['anotherMo']" domain="boolean"/>
            </in-parameters>
            <validations activate="whiteList">
                <validation ref-id="inoculation_uniq"/>
                <validation ref-id="date_inspection"/>
                <validation ref-id="date_inspection_for_mantu"/>
            </validations>
            <confirmation-text>Создать еще?</confirmation-text>
        </action>
        <action id="delete" name="Удалить">
            <invocation>
                <rest:rest method="DELETE">
                    ${n2o.backend.path}/vaccine/inoculations/{id}
                </rest:rest>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
            </in-parameters>
        </action>
    </actions>
    <validations>
        <condition id="date_gt_bdate" level="error">
            <message>Дата вакцинации не может быть ранее даты рождения.</message>
            <expression on="date"><![CDATA[
                moment(date, 'DD.MM.YYYY HH:mm').valueOf() >= moment(birth_date, 'DD.MM.YYYY HH:mm').valueOf()
            ]]></expression>
        </condition>


        <constraint id="inoculation_uniq" level="warning">
            <message>Прививка против '{infection_text} - {number.label}' уже существует в карте прививок пациента.</message>
            <invocation>
                <n2o:sql>

                    SELECT
                        count(*)
                    FROM vac_inoculation v
                        JOIN vac_vaccine vv ON v.vaccine_id = vv.id
                        JOIN vac_disease vd ON vd.id = vv.disease_id
                    WHERE
                        v.deleted = FALSE
                    AND
                        v.patient_uid IN
                        ( select
                        pc.code
                        from pim_indiv_code pc
                        left join pim_code_type ct on ct.id = pc.type_id
                        WHERE pc.indiv_id = :patientId and ct.code = 'UID')
                        AND
                             v.number_id = :numberId
                        AND
                            vd.id IN
                                (   SELECT vdd.child
                                    FROM vac_disease2disease vdd
                                        WHERE vdd.self = (SELECT v2.disease_id
                                            FROM vac_vaccine v2
                                                WHERE v2.id = :vaccineId)
                                    UNION
                                        SELECT vdd2.self
                                        FROM vac_disease2disease vdd2
                                            WHERE vdd2.child = (SELECT v3.disease_id
                                                                FROM vac_vaccine v3
                                                                WHERE v3.id = :vaccineId)
                                    UNION
                                        SELECT vdd3.self
                                        FROM vac_disease2disease vdd3
                                            WHERE vdd3.child IN (
                                                    SELECT vdd4.child FROM vac_disease2disease vdd4
                                                        WHERE vdd4.self = (SELECT v4.disease_id
                                                            FROM vac_vaccine v4
                                                            WHERE v4.id = :vaccineId)
                                                )


                                    UNION
                                    select vd2.id
                                    from  vac_disease vd2
                                        where vd2.id = (SELECT v2.disease_id
                                                        FROM vac_vaccine v2
                                                            WHERE v2.id = :vaccineId)
                                                            AND position('+' in vd2.label) = 0

                    )
                    AND
                        (:id is null or v.id != :id)
                    AND
                        (:numberId != 14)
                    ;
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer" required="false" />
                <param name="patient.id" mapping="['patientId']" domain="integer"/>
                <param name="number.id" mapping="['numberId']" domain="integer"/>
                <param name="number.label" mapping="['numberLabel']" domain="string" required="false"/>
                <param name="infection_text" mapping="['infection_text']" domain="string" required="false"/>
                <param name="vaccine.id" mapping="['vaccineId']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <condition id="date_execute" level="error">
            <message>Дата выполнения прививки не может быть позже текущей даты.</message>
            <expression on="date,status">
                <![CDATA[
                    ((moment(date, 'DD.MM.YYYY').valueOf() <= moment().valueOf())&&(status.id == 3))
                    || status.id == 1 || status.id == 2
                ]]>
            </expression>
        </condition>

        <constraint id="has_uid" moment="before-action" level="error">
            <message>У пациента отсутствует уникальный идентификатор</message>
            <invocation>
                <n2o:sql>
                    SELECT (
                    CASE WHEN
                    :pid ISNULL OR
                    (SELECT pic.code FROM pim_indiv_code pic WHERE pic.indiv_id = :pid and pic.type_id = (select id from pim_code_type where code = 'UID') limit 1) NOTNULL
                    THEN 0
                    ELSE 1
                    END);
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="patient.id" mapping="[pid]" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="has_uid_for_filter" level="error">
            <message>У пациента отсутствует уникальный идентификатор</message>
            <invocation>
                <n2o:sql>
                    SELECT (
                    CASE WHEN
                    :pid ISNULL OR
                    (SELECT pic.code FROM pim_indiv_code pic WHERE pic.indiv_id = :pid and pic.type_id = (select id from pim_code_type where code = 'UID') limit 1) NOTNULL
                    THEN 0
                    ELSE 1
                    END);
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="individual.id" mapping="[pid]" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <constraint id="date_inspection" level="error">
            <message>Дата осмотра после вакцинации не может быть раньше даты выполнения прививки.</message>
            <invocation>
                <n2o:sql>
                    select cast(:inspectionDateTime as date) is null
                        or :isMantu is true
                        or cast(:inspectionDateTime as date) >= cast(:date as date)
                            and cast(:inspectionDateTime as date) is not null
                            and :inspectionDateTime != 'undefined'
                            and :isMantu is false
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="inspectionDateTime" mapping="['inspectionDateTime']"/>
                <param name="date" mapping="['date']"/>
                <param name="isMantu" mapping="['isMantu']"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>

        <constraint id="date_inspection_for_mantu" level="error">
            <message>Дата осмотра после проведения пробы не может быть раньше даты проведения пробы.</message>
            <invocation>
                <n2o:sql>
                    select cast(:inspectionDateTime as date) is null
                        or :isMantu is false
                        or cast(:inspectionDateTime as date) >= cast(:date as date)
                            and cast(:inspectionDateTime as date) is not null
                            and :inspectionDateTime != 'undefined'
                            and :isMantu is true
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="inspectionDateTime" mapping="['inspectionDateTime']"/>
                <param name="date" mapping="['date']"/>
                <param name="isMantu" mapping="['isMantu']"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>

        <constraint id="series_overdue" level="warning">
            <message>Выбранная вакцина просрочена</message>
            <invocation>
                <n2o:sql>
                    SELECT (
                    CASE WHEN
                    :series is null or
                    (SELECT vs.end_date FROM vac_series vs WHERE vs.id = :series and vs.end_date >= cast(now() as date)) NOTNULL
                    THEN 0
                    ELSE 1
                    END);
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="series.id" mapping="[series]" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <constraint id="dateIsDiffFromNow" level="warning">
            <message>Дата выполнения прививки не совпадает с текущей датой</message>
            <invocation>
                <n2o:sql>
                    select cast(:date as date) = cast(now() as date) and :status = 3
                    or :status = 1 or :status = 2 or :status = 4
                </n2o:sql>
            </invocation>
            <in-parameters>
                <param name="date" mapping="['date']"/>
                <param name="status.id" mapping="['status']"/>
            </in-parameters>
            <result expression="[0][0][0] == true"/>
        </constraint>

    </validations>
</object>
