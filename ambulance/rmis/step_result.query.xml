<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <!--<id>step_result</id>-->
    <name>Результат обращения</name>
    <object-id>step_result</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from
                (select
                sr.id as id
                , clinic.id as clinic_id
                , coalesce(clinic.short_name,clinic.full_name) as clinic_name
                , sr.code as code
                , sr.code||':'||sr.name as name
                , sr.name as name2
                , sr.is_closed as closed_id
                , sr.is_death as death_id
                , sr.is_refusal as refusal_id
                ,case when sr.is_refusal is true then 1 else 0 end as is_ref_id
                , sr.is_future as is_future
                , sr.is_future as future_id
                , sr.is_transfer_permitted as transfer_permitted_id
                , sr.is_planning as planning_id
                , sr.is_reason as reason_id
                , sr.e_code as ecode
                , sr.from_dt as fdate
                , sr.to_dt as tdate
                , case
                    when (now() > sr.from_dt) and (sr.to_dt > now())
                            then true
                    when (sr.from_dt is null and sr.to_dt > now())
                            then true
                    when(now() > sr.from_dt and  sr.to_dt is null)
                            then true
                    when(sr.from_dt is null and  sr.to_dt is null)
                            then true
                    else false
                  end as is_acting

                from mc_step_result sr
                left join pim_organization clinic on sr.clinic_id = clinic.id
                join mc_step_result_to_care_regimen srtc on sr.id = srtc.step_result_id
                join mc_care_regimen mcr on srtc.regimen_id = mcr.id and mcr.name like '%Скорая медицинская помощь%'
                where sr.clinic_id is null

                union

                select
                sr.id as id
                , clinic.id as clinic_id
                , coalesce(clinic.short_name,clinic.full_name) as clinic_name
                , sr.code as code
                , sr.code||':'||sr.name as name
                , sr.name as name2
                , sr.is_closed as closed_id
                , sr.is_death as death_id
                , sr.is_refusal as refusal_id
                ,case when sr.is_refusal is true then 1 else 0 end as is_ref_id
                , sr.is_future as is_future
                , sr.is_future as future_id
                , sr.is_transfer_permitted as transfer_permitted_id
                , sr.is_planning as planning_id
                , sr.is_reason as reason_id
                , sr.e_code as ecode
                , sr.from_dt as fdate
                , sr.to_dt as tdate
                , case
                    when (now() > sr.from_dt) and (sr.to_dt > now())
                        then true
                    when (sr.from_dt is null and sr.to_dt > now())
                        then true
                    when(now() > sr.from_dt and  sr.to_dt is null)
                        then true
                    when(sr.from_dt is null and  sr.to_dt is null)
                        then true
                    else false
                  end as is_acting

                from mc_step_result sr
                left join pim_organization clinic on sr.clinic_id = clinic.id
                join mc_step_result_to_care_regimen srtc on sr.id = srtc.step_result_id
                join mc_care_regimen mcr on srtc.regimen_id = mcr.id and mcr.name like '%Скорая медицинская помощь%'

                where sr.clinic_id = :clinic.id
                ) step_res

                where :where

                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(*)
                from
                (select
                sr.id as id
                , clinic.id as clinic_id
                , coalesce(clinic.short_name,clinic.full_name) as clinic_name
                , sr.code as code
                , sr.code||':'||sr.name as name
                , sr.name as name2
                , sr.is_closed as closed_id
                , sr.is_death as death_id
                , sr.is_refusal as refusal_id
                ,case when sr.is_refusal is true then 1 else 0 end as is_ref_id
                , sr.is_future as is_future
                , sr.is_future as future_id
                , sr.is_transfer_permitted as transfer_permitted_id
                , sr.is_planning as planning_id
                , sr.is_reason as reason_id
                , sr.e_code as ecode
                , sr.from_dt as fdate
                , sr.to_dt as tdate
                , case
                    when (now() > sr.from_dt) and (sr.to_dt > now())
                        then true
                    when (sr.from_dt is null and sr.to_dt > now())
                        then true
                    when(now() > sr.from_dt and  sr.to_dt is null)
                        then true
                    when(sr.from_dt is null and  sr.to_dt is null)
                        then true
                    else false
                  end as is_acting

                from mc_step_result sr
                left join pim_organization clinic on sr.clinic_id = clinic.id
                join mc_step_result_to_care_regimen srtc on sr.id = srtc.step_result_id
                join mc_care_regimen mcr on srtc.regimen_id = mcr.id and mcr.name like '%Скорая медицинская помощь%'
                where sr.clinic_id is null

                union

                select
                sr.id as id
                , clinic.id as clinic_id
                , coalesce(clinic.short_name,clinic.full_name) as clinic_name
                , sr.code as code
                , sr.code||':'||sr.name as name
                , sr.name as name2
                , sr.is_closed as closed_id
                , sr.is_death as death_id
                , sr.is_refusal as refusal_id
                ,case when sr.is_refusal is true then 1 else 0 end as is_ref_id
                , sr.is_future as is_future
                , sr.is_future as future_id
                , sr.is_transfer_permitted as transfer_permitted_id
                , sr.is_planning as planning_id
                , sr.is_reason as reason_id
                , sr.e_code as ecode
                , sr.from_dt as fdate
                , sr.to_dt as tdate
                , case
                    when (now() > sr.from_dt) and (sr.to_dt > now())
                        then true
                    when (sr.from_dt is null and sr.to_dt > now())
                        then true
                    when(now() > sr.from_dt and  sr.to_dt is null)
                        then true
                    when(sr.from_dt is null and  sr.to_dt is null)
                        then true
                    else false
                  end as is_acting

                from mc_step_result sr
                left join pim_organization clinic on sr.clinic_id = clinic.id
                join mc_step_result_to_care_regimen srtc on sr.id = srtc.step_result_id
                join mc_care_regimen mcr on srtc.regimen_id = mcr.id and mcr.name like '%Скорая медицинская помощь%'

                where sr.clinic_id = :clinic.id
                ) step_res
                where :where
            </n2o:count-query>
            <n2o:alias>sr</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>code</id>
            <domain>string</domain>
            <name>Код</name>
            <expression>code</expression>
            <display>distinct code</display>
            <search>trim(upper(:expression)) like trim(upper(:code||'%'))</search>
            <!--<sorting>code</sorting>-->
        </field>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <name>№№</name>
            <expression>id</expression>
        </field>
        <field>
            <id>clinic.id</id>
            <domain>integer</domain>
            <expression>clinic_id</expression>
            <search unavailable="true"/>
            <!--<search type="eq" filter-field="clinic.id" value="#{org.id?}">-->
               <!--1 = 1-->
            <!--</search>-->
        </field>
        <field>
            <id>clinic.name</id>
            <domain>string</domain>
            <name>Организация</name>
            <expression>clinic_name</expression>
            <search unavailable="true"/>
        </field>

        <field>
            <id>name</id>
            <domain>string</domain>
            <name>Наименование</name>
            <expression>name</expression>
            <search>upper(:expression) like upper('%'||:name||'%')</search>
            <!--<sorting>cast(code as integer)</sorting>-->
        </field>
        <field>
            <id>name2</id>
            <domain>string</domain>
            <name>Наименование</name>
            <expression>name2</expression>
            <search>upper(:expression) like upper('%'||:name2||'%')</search>
        </field>
        <field>
            <id>closed.id</id>
            <domain>integer</domain>
            <expression>(case (closed_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>closed.code</id>
            <domain>boolean</domain>
            <name>Статус</name>
            <expression>closed_id</expression>
        </field>
        <field>
            <id>death.id</id>
            <domain>integer</domain>
            <expression>(case (death_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>death.code</id>
            <domain>boolean</domain>
            <name>Смерть</name>
            <expression>death_id</expression>
        </field>
        <field>
            <id>refusal.id</id>
            <domain>integer</domain>
            <expression>(case (refusal_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>refusal.code</id>
            <domain>boolean</domain>
            <name>Отказ</name>
            <expression>refusal_id</expression>
        </field>
        <field>
            <id>is_refusal.id</id>
            <domain>integer</domain>
            <name>Отказ</name>
            <expression>is_ref_id</expression>
        </field>
        <field>
            <id>is_future</id>
            <domain>boolean</domain>
            <name>Может быть установлен будущей датой</name>
            <expression>is_future</expression>
        </field>
        <field>
            <id>future.id</id>
            <domain>integer</domain>
            <expression>(case (future_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>future.code</id>
            <domain>boolean</domain>
            <name>Может быть установлен будущей датой</name>
            <expression>future_id</expression>
        </field>
        <field>
            <id>transfer_permitted.id</id>
            <domain>integer</domain>
            <expression>(case (transfer_permitted_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>transfer_permitted.code</id>
            <domain>boolean</domain>
            <name>Разрешить перевод в другое ЛПУ</name>
            <expression>transfer_permitted_id</expression>
        </field>
        <field>
            <id>planning.id</id>
            <domain>integer</domain>
            <expression>(case (planning_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>planning.code</id>
            <domain>boolean</domain>
            <name>Разрешить планирование</name>
            <expression>planning_id</expression>
        </field>
        <field>
            <id>reason.id</id>
            <domain>integer</domain>
            <expression>(case (reason_id) when true then 1 when false then 2 else null end)</expression>
        </field>
        <field>
            <id>reason.code</id>
            <domain>boolean</domain>
            <name>Требует указания причины</name>
            <expression>reason_id</expression>
        </field>
        <field>
            <id>ecode</id>
            <domain>string</domain>
            <name>Дополнительный код</name>
            <expression>ecode</expression>
            <search>(trim(upper(:expression)) like trim(upper(:ecode||'%')))</search>
        </field>
        <field>
            <id>fdate</id>
            <domain>date</domain>
            <expression>fdate</expression>
            <search>
                (:expression is null or :fdate >= :expression)
            </search>
        </field>
        <field>
            <id>tdate</id>
            <domain>date</domain>
            <expression>tdate</expression>
            <search>
                (:expression is null or :expression >= :tdate)
            </search>
        </field>
        <field>
            <id>is_acting</id>
            <domain>boolean</domain>
            <expression>is_acting</expression>
        </field>
    </fields>
</query>