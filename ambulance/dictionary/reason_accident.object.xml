<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0">
    <!--<id>reason_accident</id>-->
    <name>Причина несчастного случая</name>
    <actions>
        <action id="create" name="Создать">
            <invocation>
                <sql:sql>
                    insert into amb.md_ambulance_reason_accident (id,code,name,note_id,e_code)
                        values(nextval('amb.md_ambulance_reason_accident_id_seq'),trim(upper(:code)),trim(:name),:note,trim(upper(:ecode)))
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="code" mapping="['code']" domain="string"/>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name="note.id" mapping="['note']" domain="integer"/>
                <param name="ecode" mapping="['ecode']" domain="string"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]"/>
            </out-parameters>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    update amb.md_ambulance_reason_accident set code = trim(upper(:code)), name = trim(:name), note_id = :note,e_code = trim(upper(:ecode)) where id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="code" mapping="['code']" domain="string"/>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name = "id" mapping = "['id']" domain="integer"/>
                <param name="note.id" mapping="['note']" domain="integer"/>
                <param name="ecode" mapping="['ecode']" domain="string"/>
            </in-parameters>
        </action>
        <action id="delete" name="Удалить">
            <invocation>
                <sql:sql>
                    delete from amb.md_ambulance_reason_accident where id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>
    </actions>
    <validations>
        <constraint id="accidentcodeUnique" level="error">
            <!--<message summary ="Код причины НС %code%' уже существует ->
                Укажиите иной код причины НС!
            </message>-->
            <message>Код причины НС '{code}' уже существует ->
                Укажиите иной код причины НС!
            </message>
            <invocation>
                <sql:sql>
                    select count (*) from amb.md_ambulance_reason_accident where trim(upper(code)) = trim(upper(:code)) and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name ="code" mapping = "['code']" domain="string"/>
                <param name = "id" mapping = "['id']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="accidentnameUnique" level="error">
            <!--<message summary ="Причина несчастного случая с наименованием '%name%' уже существует ->
                Назовите причину иначе!
            </message>-->
            <message>Причина несчастного случая с наименованием '{name}' уже существует ->
                Назовите причину иначе!
            </message>
            <invocation>
                <sql:sql>
                    select count (*) from amb.md_ambulance_reason_accident where trim(upper(name)) = trim(upper(:name)) and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name = "id" mapping = "['id']" domain="integer" required="false"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="accidentecodeUnique" level="error">
            <!--<message summary ="e_code причины НС %ecode%' уже существует ->
                Укажиите иной e_code причины НС!
            </message>-->
            <message>e_code причины НС '{ecode}' уже существует ->
                Укажиите иной e_code причины НС!
            </message>
            <invocation>
                <sql:sql>
                    select count (*) from amb.md_ambulance_reason_accident where trim(upper(e_code)) = trim(upper(:ecode)) and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name ="ecode" mapping = "['ecode']" domain="string"/>
                <param name = "id" mapping = "['id']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
    </validations>
</object>