<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>call</id>-->
    <name>Вызов</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    select amb.create_call (
                    :change
                    ,:kind
                    ,:type
                    ,:is_group
                    ,:is_psycho or :is_diagps
                    ,:is_alco
                    ,:sum
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr
                    ,:to_org
                    ,:to_dep
                    ,:toad
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat
                    ,:surname
                    ,:name
                    ,:patrname
                    ,:birthdt
                    ,:gender
                    ,:chronic
                    ,cast(:years as integer)
                    ,cast(:months as integer)
                    ,cast(:days as integer)
                    ,:phone
                    ,:caller
                    ,:empmed
                    ,:cernote
                    ,:priorId
                    ,0
                    ,1
                    ,:note
                    ,:reg
                    ,:station
                    ,:route
                    ,:substation
                    ,:brg
                    ,:emp
                    <!--,coalesce(:dparcal,:spcparcal) -->
                    ,:parcal
                    ,:need_exit_through
                    ,:user
                    ,:desk);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="change.id" mapping="['change']" domain="integer"/>
                <param name="number" mapping="['number']" domain="integer"/>
                <param name="call_kind.id" mapping="['kind']" domain="integer"/>
                <param name="call_type.id" mapping="['type']" domain="integer"/>
                <param name="is_group" mapping="['is_group']" domain="boolean"/>
                <param name="source.caller_reason.is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="source.is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="source.diagnosis.is_psycho" mapping="['is_diagps']" domain="boolean"/>
                <param name="sum_sufferer" mapping="['sum']" domain="integer"/>
                <param name="source.caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="source.diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="source.reason_note" mapping="['reanote']" domain="string"/>
                <param name="source.call_place.id" mapping="['place']" domain="integer"/>
                <param name="source.place_note" mapping="['plnote']" domain="string"/>
                <param name="source.org.id" mapping="['plorg']" domain="integer"/>
                <param name="source.department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="source.addr_data.id" mapping="['address']" domain="integer"/>
                <param name="source.house" mapping="['house']" domain="string"/>
                <param name="source.housing" mapping="['housing']" domain="string"/>
                <param name="source.apartment" mapping="['apartment']" domain="string"/>
                <param name="source.porch" mapping="['porch']" domain="string"/>
                <param name="source.floor" mapping="['floor']" domain="string"/>
                <param name="source.door_code" mapping="['door_code']" domain="string"/>
                <param name="source.addr_descr" mapping="['descr']" domain="string"/>
                <param name="source.to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="source.to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="source.toaddr_data.id" mapping="['toad']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="source.to_house" mapping="['to_house']" domain="string"/>
                <param name="source.to_housing" mapping="['to_housing']" domain="string"/>
                <param name="source.to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="source.to_porch" mapping="['to_porch']" domain="string"/>
                <param name="source.to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="source.individual.id" mapping="['pat']" domain="integer"/>
                <param name="source.individual.surname" mapping="['surname']" domain="string"/>
                <param name="source.individual.name" mapping="['name']" domain="string"/>
                <param name="source.individual.patrName" mapping="['patrname']" domain="string"/>
                <param name="source.individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="source.gender.id" mapping="['gender']" domain="integer"/>
                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="source.age_years" mapping="['years']" domain="integer"/>
                <param name="source.age_months" mapping="['months']" domain="integer"/>
                <param name="source.age_days" mapping="['days']" domain="integer"/>
                <param name="source.phone" mapping="['phone']" domain="string"/>
                <param name="source.caller.id" mapping="['caller']" domain="integer"/>
                <param name="source.employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="source.caller_note" mapping="['cernote']" domain="string"/>
                <param name="priority.id" mapping="['priorId']" domain="integer"/>
                <param name="priorNum" mapping="['prior']" domain="integer"/>
                <param name="control" mapping="['control']" domain="integer" value="1"/>
                <param name="comment" mapping="['note']" domain="string"/>
                <param name="employee.id" mapping="['reg']" domain="integer" value="#{emplPos.id}"/>
                <param name="station.id" mapping="['station']" value="#{org.id}"/>
                <param name="route.id" mapping="['route']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>
                <param name="brg.id" mapping="['brg']" domain="integer"/>
                <param name="emp.id" mapping="['emp']" domain="integer"/>
                <param name="parent_call.id" mapping="['parcal']" domain="integer"/>
                <!--<param name="spcparent_call.id" mapping="['spcparcal']" domain="integer"/>-->
                <param name="need_exit_through" mapping="['need_exit_through']" domain="integer"/>
                <param name="user" mapping="['user']" domain="integer" value="#{user.id}"/>
                <param name="desk.id" mapping="['desk']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Вызов сохранен в системе
            </success-text>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    select amb.update_call(
                    :id
                    ,:is_group
                    ,:is_psycho
                    ,:sum
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr
                    ,:to_org
                    ,:to_dep
                    ,:toad
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat
                    ,:surname
                    ,:name
                    ,:patrname
                    ,:birthdt
                    ,:gender
                    ,:chronic
                    ,:years
                    ,:months
                    ,:days
                    ,:phone
                    ,:caller
                    ,:empmed
                    ,:cernote
                    ,:priorId
                    ,:prior
                    ,:control
                    ,:note
                    ,:reg
                    ,:brg
                    ,:emp
                    ,:parcal
                    ,:desk);
                    select amb.auto_add_call_note(:id, :reason, :diag, :is_psycho, :is_alco, :reg, :plorg, :pldep, :address, :house);
                    select amb.delete_ambulance_call_answer(:id, :reason, :callerReasonId);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="change.id" mapping="['change']" domain="integer" value="#{change.id?}"/>
                <param name="number" mapping="['number']" domain="integer"/>
                <param name="call_kind.id" mapping="['kind']" domain="integer"/>
                <param name="call_type.id" mapping="['type']" domain="integer"/>
                <param name="is_group" mapping="['is_group']" domain="boolean"/>
                <param name="is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="sum_sufferer" mapping="['sum']" domain="integer"/>
                <param name="caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="reason_note" mapping="['reanote']" domain="string"/>
                <param name="call_place.id" mapping="['place']" domain="integer"/>
                <param name="place_note" mapping="['plnote']" domain="string"/>
                <param name="org.id" mapping="['plorg']" domain="integer"/>
                <param name="department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="addr_data.id" mapping="['address']" domain="integer"/>
                <param name="house" mapping="['house']" domain="string"/>
                <param name="housing" mapping="['housing']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="porch" mapping="['porch']" domain="string"/>
                <param name="floor" mapping="['floor']" domain="string"/>
                <param name="door_code" mapping="['door_code']" domain="string"/>
                <param name="addr_descr" mapping="['descr']" domain="string"/>
                <param name="to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="toaddr_data.id" mapping="['toad']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="to_house" mapping="['to_house']" domain="string"/>
                <param name="to_housing" mapping="['to_housing']" domain="string"/>
                <param name="to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="to_porch" mapping="['to_porch']" domain="string"/>
                <param name="to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="individual.id" mapping="['pat']" domain="integer"/>
                <param name="individual.surname" mapping="['surname']" domain="string"/>
                <param name="individual.name" mapping="['name']" domain="string"/>
                <param name="individual.patrName" mapping="['patrname']" domain="string"/>
                <param name="individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="gender.id" mapping="['gender']" domain="integer"/>
                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="age_years" mapping="['years']" domain="integer"/>
                <param name="age_months" mapping="['months']" domain="integer"/>
                <param name="age_days" mapping="['days']" domain="integer"/>
                <param name="phone" mapping="['phone']" domain="string"/>
                <param name="caller.id" mapping="['caller']" domain="integer"/>
                <param name="employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="caller_note" mapping="['cernote']" domain="string"/>
                <param name="priority.id" mapping="['priorId']" domain="integer"/>
                <param name="priorNum" mapping="['prior']" domain="integer"/>
                <param name="control" mapping="['control']" domain="integer" value="1"/>
                <param name="comment" mapping="['note']" domain="string"/>
                <param name="employee.id" mapping="['reg']" domain="integer" value="#{emplPos.id}"/>
                <param name="station.id" mapping="['station']" value="#{org.id}"/>
                <param name="route.id" mapping="['route']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>
                <param name="brg.id" mapping="['brg']" domain="integer"/>
                <param name="emp.id" mapping="['emp']" domain="integer"/>
                <param name="parent_call.id" mapping="['parcal']" domain="integer"/>
                <param domain="integer" mapping="['reason_acc']" name="reason_accident.id"/>
                <param name="callerReasonId" mapping="['callerReasonId']" domain="integer"/>
                <param name="desk.id" mapping="['desk']" domain="integer"/>
            </in-parameters>
            <validations activate="blackList">
                <validation ref-id="nullChange"/>
            </validations>

        </action>
        <!--<action id="createNote" name="Создать">-->
            <!--<invocation>-->
                <!--<sp:stored-procedure name="amb.add_amb_call_cityservice"/>-->
            <!--</invocation>-->
            <!--<in-parameters>-->
                <!--<param name="call_note.call_id" mapping="[0]"/>-->
                <!--<param name ="call_note.type" mapping = "[1]"/>-->
                <!--<param name="note_reason.id" mapping="[2]"/>-->
                <!--<param name="call_note.descr" mapping="[3]"/>-->
                <!--<param name="employee.id" mapping="[4]"/>-->
                <!--<param name="city_service.id" mapping="[6]"/>-->
                <!--<param name="message" mapping="[5]"/>-->
                <!--<param name="accepted" mapping="[7]"/>-->
            <!--</in-parameters>-->
            <!--<out-parameters>-->
                <!--<param name="id" mapping="[0][0]"/>-->
            <!--</out-parameters>-->
        <!--</action>-->
        <!--<action id="changeGroup">-->
            <!--<invocation>-->
                <!--<sql:sql>-->
                    <!--update amb.md_ambulance_call set is_group_sufferer = :group where id = :id;-->
                <!--</sql:sql>-->
            <!--</invocation>-->
            <!--<in-parameters>-->
                <!--<param name="id" mapping="['id']"/>-->
                <!--<param name="group" mapping="['group']"/>-->
            <!--</in-parameters>-->
        <!--</action>-->
    </actions>
    <validations>
        <constraint id="isNumber" level="error">
            <message>Нумератор вызовов в текущей смене отсутствует!</message>
            <invocation>
                <sql:sql>
                    select count(id) from amb.md_ambulance_numbers where
                    numb_id = (select id from amb.md_ambulance_numb_setting where clinic_id = :station)
                    and change_id = :change and dep_id = :substation
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="change.id" mapping="['change']" domain="integer"/>
                <param name="station.id" mapping="['station']"/>
                <param name="substation.id" mapping="['substation']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] != 0"/>
        </constraint>
        <condition id="checkAdSource" level="error">
            <expression>((typeof source.addr_data != 'undefined') &amp;&amp; (source.addr_data != null) &amp;&amp; (source.addr_data.id != null)) ||((typeof source.addr_descr != 'undefined') &amp;&amp; (source.addr_descr != null)) </expression>
            <message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>
        </condition>

        <condition id="checkAddr" level="error">
            <expression>((typeof addr_data != 'undefined') &amp;&amp; (addr_data != null) &amp;&amp; (addr_data.id != null)) ||((typeof addr_descr != 'undefined') &amp;&amp; (addr_descr != null)) </expression>
            <message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>
        </condition>

        <condition id="checkAmb" level="error">
            <expression>(call_kind.id == 7) &amp;&amp; ((typeof brg != 'undefined')&amp;&amp;(brg.id != null) ||(typeof emp != 'undefined') &amp;&amp; (emp.id != null))</expression>
            <message>Одно из полей 'Бригада'/'Сотрудник' обязательно должно быть заполнено для амбулаторного вызова</message>
        </condition>
        <constraint id="insins" level="warning">
            <message>Внимание! Вызов на особо опасный объект!</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.pim_org_dangerous_area da
                    where (da.org_id = :org and :dep is null and da.dep_id is null)
                    or (da.org_id is null and :org is null and da.dep_id = :dep)
                    or (da.org_id = :org and da.dep_id = :dep and :org is not null and :dep is not null)

                    <!--or (da.address_id = :address and :org is null and :dep is null)-->
                    or (da.address_id = :address and (amb.check_address_in_district(:address, da.address_id, :house, da.building_pattent)))
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="source.org.id" mapping="['org']" domain="integer"/>
                <param name="source.department.id" mapping="['dep']" domain="integer"/>
                <param name="source.addr_data.id" mapping="['address']" domain="integer"/>
                <param name="source.house" mapping="['house']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="exists_call_answer" level="warning">
            <message>Cозданный ранее подбор повода будет удален!</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.md_ambulance_call_answer aca
                    where aca.call_id = :id and :caller != :callerReasonId;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="callerReasonId" mapping="['callerReasonId']" domain="integer"/>
                <param name="caller_reason.id" mapping="['caller']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="danger_upd" level="warning">
            <message>Внимание! Вызов на особо опасный объект!</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.pim_org_dangerous_area da
                    where (da.org_id = :org and :dep is null and da.dep_id is null)
                    or (da.org_id is null and :org is null and da.dep_id = :dep)
                    or (da.org_id = :org and da.dep_id = :dep and :org is not null and :dep is not null)

                    <!--or (da.address_id = :address and :org is null and :dep is null)-->
                    or (da.address_id = :address and (amb.check_address_in_district(:address, da.address_id, :house, da.building_pattent)))
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="org.id" mapping="['org']" domain="integer"/>
                <param name="department.id" mapping="['dep']" domain="integer"/>
                <param name="addr_data.id" mapping="['address']" domain="integer"/>
                <param name="house" mapping="['house']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <!-- валидация отметки Алкогольное опьянение -->
        <condition id="call_reason_is_alco" level="warning">
        <message>Внимание! Будет проставлена отметка "Алкогольное опьянение"</message>
        <expression  on="source.is_alco">
            (!source.is_alco)
        </expression>
        </condition>
        <condition id="upd_is_alco_set" level="warning">
            <message>Внимание! Будет проставлена отметка "Алкогольное опьянение"</message>
            <expression>
                (!is_alco)
            </expression>
        </condition>
        <condition id="upd_is_alco_rem" level="warning">
            <message>Внимание! Будет снята отметка "Алкогольное опьянение"</message>
            <expression on="is_alco">
                <![CDATA[
                    if (is_alco_field){
                        is_alco;
                    } else {true;}
                ]]>
            </expression>
        </condition>

        <!-- Валидация отметки Псих -->
        <condition id="call_reason_is_psycho" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression>
                (!source.caller_reason.is_psycho)
            </expression>
        </condition>
        <condition id="diag_is_psycho" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression>
                (!source.diagnosis.is_psycho)
            </expression>
        </condition>
        <condition id="upd_is_psycho_set" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression on="is_psycho,has_psycho,caller_reason,diagnosis">
                (!is_psycho)
            </expression>
        </condition>

        <condition id="upd_is_psycho_rem" level="warning">
            <message>Внимание! Будет снята отметка ПСИХ</message>
            <expression on="is_psycho,has_psycho,caller_reason,diagnosis">
                <![CDATA[
                if (is_psycho_field){
                    is_psycho;
                } else {true;}
            ]]>
            </expression>
        </condition>

        <condition id="nullChange" level="error">
            <message> </message>
            <expression on="change">
                change == null
            </expression>
        </condition>

        <!--<constraint id="NumberUnique" level="error">-->
            <!--<message>Карта вызова с номером '{number}' на дату '{date}' уже заведена</message>-->
            <!--<invocation>-->
                <!--<sql:sql>-->
                    <!--select count(*)-->
                    <!--from amb.md_ambulance_call cal-->
                    <!--join amb.md_ambulance_change change on change.id = cal.call_dt-->
                    <!--where cal.call_number = :num-->
                    <!--and change.from_data = :data-->
                    <!--and cal.station_id = :station-->
                    <!--and cal.substation_id = :substation-->
                    <!--and (:id::int is null or id != :id)-->
                <!--</sql:sql>-->
            <!--</invocation>-->
            <!--<in-parameters>-->
                <!--<param name="id" mapping="['id']" domain="integer"/>-->
                <!--<param name="number" mapping="['num']" domain="integer"/>-->
                <!--<param name="data" mapping="['data']" domain="date"/>-->
                <!--<param name="station.id" mapping="['station']" value="#{org.id}" domain="integer"/>-->
                <!--<param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>-->
            <!--</in-parameters>-->
            <!--<result expression="[0][0][0] == 0"/>-->
        <!--</constraint>-->
    </validations>
</object>