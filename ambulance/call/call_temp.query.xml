<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <name>Вызов</name>
    <object-id>ambulance_call_answer</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query> select :select
                from amb.md_ambulance_call cal
                join amb.md_ambulance_change mac on mac.id = cal.call_dt

                left join amb.md_ambulance_caller_reason cr on cr.id = cal.caller_reason_id
                left join md_diagnosis dia on dia.id = cal.reason_diag
                join amb.md_ambulance_call_place pl on pl.id = cal.call_place_id
                left join pim_organization plorg on plorg.id = cal.place_org_id
                left join pim_department pldep on pldep.id = cal.place_department_id
                left join address_element_data aed on aed.id = cal.address_id

                join pim_individual pip on pip.id = cal.patient_id
                left join pim_gender pg on pg.id = pip.gender_id

                left join amb.md_ambulance_caller ac on ac.id = cal.caller_id
                left join pim_organization toplorg on toplorg.id = cal.to_org_id
                left join pim_department topldep on topldep.id = cal.to_department_id
                left join address_element_data toaed on toaed.id = cal.to_address_id

                left join amb.md_ambulance_priority ap on cal.priority_id = ap.id
                join pim_employee_position pep on cal.registrator_id = pep.id
                join pim_employee pe on pep.employee_id = pe.id
                join pim_individual pi on pe.individual_id = pi.id
                join pim_position ppos on pep.position_id = ppos.id

                <!--крайнее состояние-->
                left join amb.md_ambcall_state_history mash on mash.id = (select id from amb.md_ambcall_state_history where call_id = cal.id order by date_time DESC, id desc limit 1)
                left join amb.md_ambulance_call_state macs on mash.state_id = macs.id

                <!--повторный-->
                left join amb.md_ambulance_call_note macn on cal.id = macn.call_id and macn.note_active is true and macn.note_type is true and macn.note_id = 9
                left join amb.md_ambulance_call_double macd on macd.call_note_id = macn.id
                left join amb.md_ambulance_call parcal on parcal.id = macd.call_id
                left join amb.md_ambulance_change parmac on parcal.call_dt = parmac.id
                <!--спц-->
                left join amb.md_ambulance_call_on_base cob on cob.id = cal.id
                left join amb.md_ambulance_call spccal on spccal.id = cob.call_on_base_id
                left join amb.md_ambulance_change spcmac on spcmac.id = spccal.call_dt

                left join amb.md_ambulance_call_result cres on cres.id = cal.id

                left join pci_patient_reg ppr on ppr.patient_id = pip.id
                    and ppr.type_id = (select id from md_reg_type where e_code = '1')
                    and ppr.state_id = (select id from md_reg_state where e_code = '1')
                    and now() >= ppr.reg_dt and ppr.unreg_dt >= now()
                left join pim_organization attachmentpo on attachmentpo.id = ppr.clinic_id
                left join md_clinic mdc ON mdc.id = cal.station_id

                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(*)
                from amb.md_ambulance_call cal
                join amb.md_ambulance_change mac on mac.id = cal.call_dt
                left join amb.md_ambulance_caller_reason cr on cr.id = cal.caller_reason_id
                left join md_diagnosis dia on dia.id = cal.reason_diag
                join amb.md_ambulance_call_place pl on pl.id = cal.call_place_id
                left join pim_organization plorg on plorg.id = cal.place_org_id
                left join pim_department pldep on pldep.id = cal.place_department_id
                left join address_element_data aed on aed.id = cal.address_id
                join pim_individual pip on pip.id = cal.patient_id
                left join pim_gender pg on pg.id = pip.gender_id
                left join amb.md_ambulance_priority ap on cal.priority_id = ap.id
                join pim_employee_position pep on cal.registrator_id = pep.id
                join pim_employee pe on pep.employee_id = pe.id
                join pim_individual pi on pe.individual_id = pi.id
                join pim_position ppos on pep.position_id = ppos.id

                <!--крайнее состояние-->
                left join amb.md_ambcall_state_history mash on mash.id = (select id from amb.md_ambcall_state_history where call_id = cal.id order by date_time DESC, id desc limit 1)
                left join amb.md_ambulance_call_state macs on mash.state_id = macs.id

                left join amb.md_ambulance_call_note macn on cal.id = macn.call_id and macn.note_active is true and macn.note_type is true and macn.note_id = 9
                left join amb.md_ambulance_call_double macd on macd.call_note_id = macn.id
                left join amb.md_ambulance_call parcal on parcal.id = macd.call_id
                left join amb.md_ambulance_change parmac on parcal.call_dt = parmac.id

                left join amb.md_ambulance_call_on_base cob on cob.id = cal.id
                left join amb.md_ambulance_call spccal on spccal.id = cob.call_on_base_id
                left join amb.md_ambulance_change spcmac on spcmac.id = spccal.call_dt

                left join amb.md_ambulance_call_result cres on cres.id = cal.id

                left join pci_patient_reg ppr on ppr.patient_id = pip.id
                and ppr.type_id = (select id from md_reg_type where e_code = '1')
                and ppr.state_id = (select id from md_reg_state where e_code = '1')
                and now() >= ppr.reg_dt and ppr.unreg_dt >= now()
                left join pim_organization attachmentpo on attachmentpo.id = ppr.clinic_id
                left join md_clinic mdc ON mdc.id = cal.station_id

                where :where
            </n2o:count-query>
            <n2o:alias>cal</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <name>Идентификатор</name>
            <expression>cal.id</expression>
            <search>cal.id = :id</search>
        </field>
        <field>
            <id>number</id>
            <domain>integer</domain>
            <name>Номер</name>
            <expression>cal.call_number</expression>
        </field>

        <field>
            <id>num_change</id>
            <domain>string</domain>
            <name>вызов</name>
            <expression>cast(cal.call_number as varchar(7))||' ('||to_char(mac.from_data,'dd.mm.yyyy')||')'</expression>
            <search>:expression like '%'||:num_change||'%'</search>
        </field>

        <field>
            <id>mark</id>
            <domain>integer</domain>
            <name>Признак</name>
            <expression>cal.call_mark</expression>
        </field>
        <field>
            <id>change.id</id>
            <domain>integer</domain>
            <expression>mac.id</expression>
        </field>
        <field>
            <id>change.fdata</id>
            <domain>date</domain>
            <name>Смена</name>
            <expression>mac.from_data</expression>
        </field>
        <field>
            <id>change.data</id>
            <domain>date</domain>
            <name>Смена</name>
            <expression>to_char(mac.from_data,'dd.mm.yyyy')</expression>
            <search>:expression = to_char(cast(:change.data as date),'DD.MM.YYYY') </search>
        </field>
        <field>
            <id>call_kind.id</id>
            <domain>integer</domain>
            <expression>cal.call_kind_id</expression>
        </field>
        <field>
            <id>call_type.id</id>
            <domain>integer</domain>
            <expression>cal.call_type_id</expression>
        </field>
        <field>
            <id>data</id>
            <domain>date</domain>
            <expression>cast(cal.from_time as date)</expression>
            <search>cast(cal.from_time as date) = :data</search>
        </field>
        <field>
            <id>from_time</id>
            <domain>time</domain>
            <name>Время приема</name>
            <expression>to_char(cal.from_time,'dd.mm.yyyy hh24:mi:ss')</expression>
        </field>
        <field>
            <id>ftime</id>
            <domain>string</domain>
            <name>Принят</name>
            <expression>to_char(cal.from_time,'hh24:mi')</expression>
        </field>
        <field>
            <id>from_dt</id>
            <domain>string</domain>
            <name>Принят</name>
            <expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>
        </field>
        <field>
            <id>ffrom_dt</id>
            <domain>date</domain>
            <name>Принят с</name>
            <expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>
            <search><![CDATA[
                cast(cal.from_time as date) >= :ffrom_dt
                ]]>
            </search>
        </field>
        <field>
            <id>tfrom_dt</id>
            <domain>date</domain>
            <name>Принят по</name>
            <expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>
            <search><![CDATA[
                cast(cal.from_time as date) <= :tfrom_dt
                ]]>
            </search>
        </field>
        <field>
            <id>to_time</id>
            <domain>time</domain>
            <name>Время окончания вызова</name>
            <expression>to_char(cal.to_time,'dd.mm.yyyy hh24:mi')</expression>
        </field>
        <field>
            <id>time</id>
            <domain>time</domain>
            <name>Длительность</name>
            <expression>case when cal.to_time is null then cast((now() - mash.date_time) as time) else null end</expression>
        </field>
        <field>
            <id>calltime</id>
            <domain>time</domain>
            <name>Время обслуживания</name>
            <expression>case when cal.to_time is not null then cast((cal.to_time - cal.from_time) as time) else null end</expression>
        </field>
        <field>
            <id>caller_reason.id</id>
            <domain>integer</domain>
            <expression>cr.id</expression>
        </field>
        <field>
            <id>caller_reason.name</id>
            <domain>string</domain>
            <name>Повод</name>
            <expression>cr.name</expression>
        </field>
        <field>
            <id>diagnosis.id</id>
            <domain>integer</domain>
            <expression>dia.id</expression>
        </field>
        <field>
            <id>diagnosis.name</id>
            <domain>string</domain>
            <name>Диагноз</name>
            <expression>dia.code ||' '||dia.name</expression>
        </field>
        <field>
            <id>reason_note</id>
            <domain>string</domain>
            <name>Дополнительный повод</name>
            <expression>cal.reason_note</expression>
        </field>
        <field>
            <id>reas_diag</id>
            <domain>string</domain>
            <name>Повод/Диагноз</name>
            <expression>concat(cr.name,dia.name)</expression>
        </field>
        <field>
            <id>is_group</id>
            <domain>boolean</domain>
            <name>К группе пострадавших</name>
            <expression>cal.is_group_sufferer</expression>
        </field>
        <field>
            <id>sum_sufferer</id>
            <domain>integer</domain>
            <name>Количество пострадавших</name>
            <expression>cal.sum_sufferer</expression>
        </field>
        <field>
            <id>call_place.id</id>
            <domain>integer</domain>
            <expression>pl.id</expression>
        </field>
        <field>
            <id>call_place.name</id>
            <domain>string</domain>
            <name>Место вызова</name>
            <expression>pl.name</expression>
        </field>
        <field>
            <id>call_place.search</id>
            <domain>boolean</domain>
            <name>Поиск по организациям</name>
            <expression>pl.is_search</expression>
        </field>
        <field>
            <id>place_note</id>
            <domain>string</domain>
            <name>Место вызова: примечания</name>
            <expression>cal.call_place_note</expression>
        </field>
        <field>
            <id>org.id</id>
            <domain>integer</domain>
            <expression>plorg.id</expression>
        </field>
        <field>
            <id>org.name</id>
            <domain>string</domain>
            <name>Организация места вызова</name>
            <expression>coalesce(plorg.short_name,plorg.full_name)</expression>
        </field>
        <field>
            <id>department.id</id>
            <domain>integer</domain>
            <expression>pldep.id</expression>
        </field>
        <field>
            <id>department.name</id>
            <domain>string</domain>
            <name>Подразделение места вызова</name>
            <expression>pldep.name</expression>
        </field>


        <field>
            <id>adressId</id>
            <domain>integer</domain>
            <expression>cal.address_id</expression>
        </field>
        <field>
            <id>address</id>
            <domain>string</domain>
            <name>Адрес вызова</name>
            <expression>concat (adr__get_element_as_text(cal.address_id, '(4,s,0)(6,s,1)(7,s,1)(8,s,1)'),adr__get_element_as_text(cal.address_id, '(2,s,0)'))</expression>
        </field>
        <field>
            <id>addr_data.id</id>
            <domain>integer</domain>
            <expression>aed.id</expression>
        </field>
        <field>
            <id>addr_data.search_name</id>
            <domain>string</domain>
            <name>Улица</name>
            <expression>aed.search_name</expression>
            <search unavailable="true"/>
            <search>upper(:expression) like upper('%'||:addr_data.search_name||'%')</search>
        </field>

        <field>
            <id>house</id>
            <domain>string</domain>
            <name>Дом</name>
            <expression>cal.house</expression>
        </field>
        <field>
            <id>housing</id>
            <domain>string</domain>
            <name>Корпус</name>
            <expression>cal.housing</expression>
        </field>
        <field>
            <id>apartment</id>
            <domain>string</domain>
            <name>Квартира</name>
            <expression>cal.apartment</expression>
        </field>
        <field>
            <id>porch</id>
            <domain>string</domain>
            <name>Подъезд</name>
            <expression>cal.porch</expression>
        </field>
        <field>
            <id>floor</id>
            <domain>string</domain>
            <name>Этаж</name>
            <expression>cal.floor</expression>
        </field>
        <field>
            <id>door_code</id>
            <domain>string</domain>
            <name>Код подъезда</name>
            <expression>cal.door_code</expression>
        </field>
        <field>
            <id>addr_descr</id>
            <domain>string</domain>
            <name>Адрес коментарии</name>
            <expression>cal.description</expression>
        </field>

        <field>
            <id>to_org.id</id>
            <domain>integer</domain>
            <expression>toplorg.id</expression>
        </field>
        <field>
            <id>to_org.name</id>
            <domain>string</domain>
            <name>Организация адреса доставки</name>
            <expression>coalesce(toplorg.short_name,toplorg.full_name)</expression>
        </field>
        <field>
            <id>to_department.id</id>
            <domain>integer</domain>
            <expression>topldep.id</expression>
        </field>
        <field>
            <id>to_department.name</id>
            <domain>string</domain>
            <name>Подразделение адреса доставки</name>
            <expression>topldep.name</expression>
        </field>


        <field>
            <id>toaddr_data.id</id>
            <domain>integer</domain>
            <expression>toaed.id</expression>
        </field>
        <field>
            <id>toaddr_data.search_name</id>
            <domain>string</domain>
            <name>Улица</name>
            <expression>toaed.search_name</expression>
            <search>upper(:expression) like upper('%'||:addr_data.search_name||'%')</search>
        </field>

        <field>
            <id>to_address</id>
            <domain>string</domain>
            <name>Адрес доставки</name>
            <expression>adr__get_element_as_text(cal.to_address_id,'(1,s,0)(2,s,0)(3,s,0)(4,s,0)(5,s,0)(6,s,0)(7,s,0)(8,s,0)(9,s,0)')</expression>
        </field>
        <field>
            <id>to_house</id>
            <domain>string</domain>
            <name>Дом</name>
        </field>
        <field>
            <id>to_housing</id>
            <domain>string</domain>
            <name>Корпус</name>
        </field>
        <field>
            <id>to_apartment</id>
            <domain>string</domain>
            <name>Квартира</name>
        </field>
        <field>
            <id>to_porch</id>
            <domain>string\</domain>
            <name>Подъезд</name>
        </field>

        <field>
            <id>to_addr_descr</id>
            <domain>string</domain>
            <name>Адрес коментарии</name>
            <expression>cal.to_description</expression>
        </field>
        <field>
            <id>indId</id>
            <domain>integer</domain>
            <expression>pip.id</expression>
        </field>
        <field>
            <id>individual.id</id>
            <domain>integer</domain>
            <expression>pip.id</expression>
        </field>
        <field>
            <id>individual.indiv</id>
            <domain>string</domain>
            <name>Пациент</name>
            <expression>pip.surname||' '||pip.name||' '||pip.patr_name</expression>
        </field>
        <field>
            <id>individual.surname</id>
            <domain>string</domain>
            <name>Фамилия</name>
            <expression>pip.surname</expression>
        </field>
        <field>
            <id>individual.name</id>
            <domain>string</domain>
            <name>Имя</name>
            <expression>pip.name</expression>
            <search>upper(pip.name) like upper('%'||:individual.name||'%')</search>
        </field>
        <field>
            <id>individual.patrName</id>
            <domain>string</domain>
            <name>Отчество</name>
            <expression>pip.patr_name</expression>
        </field>
        <field>
            <id>individual.age</id>
            <domain>string</domain>
            <name>Возраст</name>
            <expression>case when get_age(cast (pip.birth_dt as date),cast(now() as date)) = -1 then '' else CAST(get_age(cast (pip.birth_dt as date),cast(now() as date)) as varchar(3)) end</expression>
        </field>
        <field>
            <id>individual.birthDate</id>
            <domain>date</domain>
            <name>ДР</name>
            <expression>pip.birth_dt</expression>
        </field>
        <field>
            <id>individual.can_modif</id>
            <domain>boolean</domain>
            <expression>
                case when ((select note from pci_patient where id = pip.id) like 'пациент скорой%')
                and ((select part_case_id from pci_patient_part_case where patient_id = pip.id order by from_dt desc limit 1) = (select id from pci_part_case_internal where code = '8'))
                then true
                else false
                end
            </expression>
        </field>

        <field>
            <id>patFIO</id>
            <domain>string</domain>
            <name>Пациент</name>
            <expression>pip.surname||' '||pip.name||' '||pip.patr_name||case when pip.birth_dt is not null then ' '||to_char(pip.birth_dt,'dd.mm.yyyy') else '' end</expression>
        </field>
        <field>
            <id>gender.id</id>
            <domain>integer</domain>
            <expression>pg.id</expression>
        </field>
        <field>
            <id>gender.name</id>
            <domain>string</domain>
            <name>Пол</name>
            <expression>lower(left(initcap(pg.name),1))</expression>
        </field>

        <field>
            <id>chronic</id>
            <domain>boolean</domain>
            <name>Хронический</name>
            <expression>cal.is_chronic</expression>
        </field>
        <field>
            <id>age_years</id>
            <domain>integer</domain>
            <name>Возраст: лет</name>
            <expression>cal.age_years</expression>
        </field>
        <field>
            <id>age_months</id>
            <domain>integer</domain>
            <name>Возраст: мес</name>
            <expression>cal.age_months</expression>
        </field>
        <field>
            <id>age_days</id>
            <domain>integer</domain>
            <name>Возраст: дн</name>
            <expression>cal.age_days</expression>
        </field>

        <field>
            <id>age_y</id>
            <domain>integer</domain>
            <name>Возраст: лет</name>
            <expression>
                <![CDATA[
                case when (amb.get_age_full(pip.birth_dt,cast(now() as date))<>'0 day')
                            and (cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)) like '%year%')
                    then
                        cast(split_part(cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)), ' ', 1) as integer)
                end
                ]]>
            </expression>
        </field>
        <field>
            <id>age_m</id>
            <domain>integer</domain>
            <name>Возраст: мес</name>
            <expression>
                <![CDATA[
                case when (amb.get_age_full(pip.birth_dt,cast(now() as date))<>'0 day')
                            and (cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)) like '%month%')
                    then
                        cast(split_part(cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)), ' ', 1) as integer)
                end
                ]]>
            </expression>
        </field>
        <field>
            <id>age_d</id>
            <domain>integer</domain>
            <name>Возраст: дн</name>
            <expression>
                <![CDATA[
                case when (amb.get_age_full(pip.birth_dt,cast(now() as date))<>'0 day')
                            and (cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)) like '%day%')
                    then
                        cast(split_part(cast(amb.get_age_full(pip.birth_dt,cast(now() as date)) as varchar(9)), ' ', 1) as integer)
                end
                ]]>
            </expression>
        </field>

        <field>
            <id>phone</id>
            <domain>string</domain>
            <name>Телефон</name>
            <expression>cal.phone_caller</expression>
        </field>
        <field>
            <id>caller.id</id>
            <domain>integer</domain>
            <expression>ac.id</expression>
        </field>
        <field>
            <id>caller.name</id>
            <domain>string</domain>
            <name>Вызывающий</name>
            <expression>ac.name</expression>
        </field>
        <field>
            <id>employee_med.id</id>
            <domain>integer</domain>
            <expression>cal.employee_id</expression>
        </field>
        <field>
            <id>caller_note</id>
            <domain>string</domain>
            <expression>cal.caller_note</expression>
        </field>
        <field>
            <id>priority.id</id>
            <domain>integer</domain>
            <expression>ap.id</expression>
        </field>
        <field>
            <id>priorNum</id>
            <domain>integer</domain>
            <expression>COALESCE(cal.priority,ap.number)</expression>
        </field>
        <field>
            <id>control</id>
            <domain>integer</domain>
            <name>Контроль</name>
            <expression>cal.control</expression>
        </field>
        <field>
            <id>comment</id>
            <domain>string</domain>
            <name>Примечание</name>
            <expression>cal.note</expression>
        </field>
        <field>
            <id>pim_employee_position</id>
            <domain>integer</domain>
            <expression>pep.id</expression>
        </field>
        <field>
            <id>pep</id>
            <domain>integer</domain>
            <expression>pep.employee_id</expression>
        </field>
        <field>
            <id>employee.id</id>
            <domain>string</domain>
            <name>Принял</name>
            <expression>pep.id</expression>
        </field>
        <field>
            <id>employee.nameP</id>
            <domain>string</domain>
            <name>Принял</name>
            <expression>
                <![CDATA[
                pi.surname||' '||left(initcap(pi.name),1)||'. '||left(initcap(pi.patr_name),1)||'.'||'('||case when pep.code is not null and pep.code <> '' then pep.code else cast(pep.id as varchar(10)) end||')'
                ]]>
            </expression>
        </field>
        <field>
            <id>station.id</id>
            <domain>integer</domain>
            <expression>cal.station_id</expression>
            <search unavailable="true"/>
            <sorting unavailable="true"/>
        </field>

        <field>
            <id>is_offline</id>
            <domain>boolean</domain>
            <name>Признак работы в режиме оффлайн</name>
            <expression>mdc.is_offline</expression>
        </field>
        <field>
            <id>substation.id</id>
            <domain>integer</domain>
            <expression>cal.substation_id</expression>
            <search unavailable="true"/>
            <sorting unavailable="true"/>
        </field>

        <field>
            <id>brg.id</id>
            <domain>integer</domain>
            <expression>cal.brg_id</expression>
        </field>

        <!--сотрудник амб-->
        <field>
            <id>emp.id</id>
            <domain>integer</domain>
            <expression>cal.emp_id</expression>
        </field>
        
        <!--поля для расшифровки инфы по вызову-->
        <field>
            <id>descr</id>
            <domain>string</domain>
            <name>Доп.</name>
            <expression>cal.description||','||cal.note</expression>
        </field>
        <field>
            <id>state_history.id</id>
            <domain>integer</domain>
            <name>Крайнее состояние</name>
            <expression>mash.id</expression>
        </field>
        <field>
            <id>state_history.datetime</id>
            <domain>string</domain>
            <name>Время назначения состояния</name>
            <expression>to_char(mash.date_time,'dd.mm.yyyy hh24:mi:ss')</expression>
        </field>
        <field>
            <id>call_state.id</id>
            <domain>integer</domain>
            <expression>macs.id</expression>
        </field>
        <field>
            <id>call_state.name</id>
            <domain>string</domain>
            <name>Состояние</name>
            <expression>macs.name</expression>
        </field>
        <field>
            <id>notes</id>
            <domain>string</domain>
            <name>Отметки</name>
            <expression>amb.search_call_note(cal.id)</expression>
        </field>
        <field>
            <id>note.id</id>
            <domain>integer</domain>
            <name>Отметка</name>
            <expression>macn.id</expression>
            <search>macn.id = :note.id</search>
        </field>
        <field>
            <id>has_hosp</id>
            <domain>boolean</domain>
            <expression>
                case when (select id from amb.md_ambulance_call_note where call_id = cal.id  and note_id = 21 and note_active is true and note_type is true) is not null then true else false end
            </expression>
            <search unavailable="true"/>
            <sorting unavailable="true"/>
        </field>

        <field>
            <id>has_double</id>
            <domain>boolean</domain>
            <expression>
                case when exists(select id from amb.md_ambulance_call_note where call_id = cal.id  and note_id in (8,9) and note_active is true and note_type is true)
                    then true
                    else false
                end
            </expression>
            <search unavailable="true"/>
            <sorting unavailable="true"/>
        </field>

        <field>
            <id>has_potential_double</id>
            <domain>boolean</domain>
            <expression>
                exists(
                    select 1 from amb.md_ambulance_call call
                    left join amb.md_ambulance_call_note n on call.id = n.call_id and n.note_id in (8,9) and n.note_active and n.note_type
                    left join amb.md_ambulance_call_double d on d.call_note_id = n.id
                    where
                        macd.call_id = call.id or
                        (call.address_id = aed.id or call.patient_id = pip.id) and
                        call.from_time between
                            (cast(cal.from_time as timestamp) - CAST((select elapsed_time from amb.md_ambulance_notes_setting where clinic_id = (select station_id from amb.md_ambulance_call where id = cal.id) limit 1) as interval)) and
                            cast(cal.from_time as timestamp) and
                        call.id != cal.id
                )
            </expression>
            <search unavailable="true"/>
            <sorting unavailable="true"/>
        </field>

        <field>
            <id>parent_call.id</id>
            <domain>integer</domain>
            <name>Исходный вызов</name>
            <expression>coalesce(parcal.id,spccal.id)</expression>
        </field>
        <field>
            <id>parent_call.num_change</id>
            <domain>string</domain>
            <name>Исходный вызов</name>
            <expression>cast(coalesce(parcal.call_number,spccal.call_number) as varchar(7))||'('||to_char(coalesce(parmac.from_data,spcmac.from_data),'dd.mm.yyyy')||')'</expression>
        </field>
        <field>
            <id>date</id>
            <domain>date</domain>
            <name>Смена</name>
            <expression>coalesce(parmac.from_data,spcmac.from_data)</expression>
        </field>
        <field>
            <id>parbrg.id</id>
            <domain>integer</domain>
            <name>Бригада</name>
            <expression>spccal.brg_id</expression>
        </field>

        <field>
            <id>is_psycho</id>
            <domain>boolean</domain>
            <expression>
                case when (select count(*) from amb.md_ambulance_call_note where call_id =cal.id and note_type = true and note_active = true and note_id in (15)) > 0
                then true else false end
            </expression>
        </field>

        <!--Поле для валидации отметки-->
        <field>
            <id>is_psycho_field</id>
            <domain>boolean</domain>
            <expression>
                case when (select count(*) from amb.md_ambulance_call_note where call_id =cal.id and note_type = true and note_active = true and note_id in (15)) > 0
                then true else false end
            </expression>
        </field>

        <field>
            <id>is_alco</id>
            <domain>boolean</domain>
            <expression>
                case when (select count(*) from amb.md_ambulance_call_note where call_id = cal.id and note_type = true and note_active = true and note_id = 22) > 0
                then true else false end
            </expression>
        </field>

        <!--Поле для валидации отметки-->
        <field>
            <id>is_alco_field</id>
            <domain>boolean</domain>
            <expression>
                case when (select count(*) from amb.md_ambulance_call_note where call_id = cal.id and note_type = true and note_active = true and note_id = 22) > 0
                then true else false end
            </expression>
        </field>

        <field>
            <id>need_exit_through</id>
            <domain>integer</domain>
            <name>Больной нуждается в активном выезде через .. часов</name>
            <expression>cres.need_exit_through</expression>
        </field>

        <field>
            <id>attachment.id</id>
            <domain>integer</domain>
            <expression>attachmentpo.id</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>attachment.name</id>
            <domain>string</domain>
            <expression>coalesce(attachmentpo.short_name,attachmentpo.full_name)</expression>
            <search unavailable="true"/>
        </field>

    </fields>
</query>