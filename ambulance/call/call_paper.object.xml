<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>call_paper</id>-->
    <name>Вызов по бумажной технологии</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    select amb.create_call_paper (
                    :num
                    ,amb.insert_into_md_ambulance_change(:data,:station,:substation)
                    ,:kind
                    ,:type
                    ,:is_group
                    ,:is_psycho or :is_diagps
                    ,:is_alco
                    ,:sum
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr
                    ,:to_org
                    ,:to_dep
                    ,:toad
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat
                    ,:surname
                    ,:name
                    ,:patrname
                    ,:birthdt
                    ,:gender
                    ,:chronic
                    ,cast(:years as integer)
                    ,cast(:months as integer)
                    ,cast(:days as integer)
                    ,:phone
                    ,:caller
                    ,:empmed
                    ,:cernote
                    ,:priorId
                    ,0
                    ,1
                    ,:note
                    ,:reg
                    ,:station
                    ,:route
                    ,:substation
                    ,:brg
                    ,:emp
                    <!--,coalesce(:dparcal,:spcparcal) -->
                    ,:parcal
                    ,:need_exit_through
                    <!--Диспетчерезация-->
                    ,:transreg
                    ,case when (:receipt = '__:__' or :receipt = '' or :receipt is null) then null else cast(:receipt as time) end
                    ,case when (:transmit = '__:__' or :transmit = '' or :transmit is null) then null else cast(:transmit as time) end
                    ,:trans
                    ,case when (:exitt = '__:__' or :exitt = '' or :exitt is null) then null else cast(:exitt as time) end
                    ,case when (:comingt = '__:__' or :comingt = '' or :comingt is null) then null else cast(:comingt as time) end
                    ,case when (:endtime = '__:__' or :endtime = '' or :endtime is null) then null else cast(:endtime as time) end
                    ,:user);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="number.number" mapping="['num']" domain="integer"/>
                <param name="data" mapping="['data']" domain="date"/>
                <param name="call_kind.id" mapping="['kind']" domain="integer"/>
                <param name="call_type.id" mapping="['type']" domain="integer"/>
                <param name="source.is_group" mapping="['is_group']" domain="boolean"/>
                <param name="source.caller_reason.is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="source.diagnosis.is_psycho" mapping="['is_diagps']" domain="boolean"/>
                <param name="source.is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="sum_sufferer" mapping="['sum']" domain="integer"/>
                <param name="source.caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="source.diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="source.reason_note" mapping="['reanote']" domain="string"/>
                <param name="source.call_place.id" mapping="['place']" domain="integer"/>
                <param name="source.place_note" mapping="['plnote']" domain="string"/>
                <param name="source.org.id" mapping="['plorg']" domain="integer"/>
                <param name="source.department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="source.addr_data.id" mapping="['address']" domain="integer"/>
                <param name="source.house" mapping="['house']" domain="string"/>
                <param name="source.housing" mapping="['housing']" domain="string"/>
                <param name="source.apartment" mapping="['apartment']" domain="string"/>
                <param name="source.porch" mapping="['porch']" domain="string"/>
                <param name="source.floor" mapping="['floor']" domain="string"/>
                <param name="source.door_code" mapping="['door_code']" domain="string"/>
                <param name="source.addr_descr" mapping="['descr']" domain="string"/>
                <param name="source.to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="source.to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="source.toaddr_data.id" mapping="['toad']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="source.to_house" mapping="['to_house']" domain="string"/>
                <param name="source.to_housing" mapping="['to_housing']" domain="string"/>
                <param name="source.to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="source.to_porch" mapping="['to_porch']" domain="string"/>
                <param name="source.to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="source.individual.id" mapping="['pat']" domain="integer"/>
                <param name="source.individual.surname" mapping="['surname']" domain="string"/>
                <param name="source.individual.name" mapping="['name']" domain="string"/>
                <param name="source.individual.patrName" mapping="['patrname']" domain="string"/>
                <param name="source.individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="source.gender.id" mapping="['gender']" domain="integer"/>
                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="source.age_years" mapping="['years']" domain="integer"/>
                <param name="source.age_months" mapping="['months']" domain="integer"/>
                <param name="source.age_days" mapping="['days']" domain="integer"/>
                <param name="source.phone" mapping="['phone']" domain="string"/>
                <param name="source.caller.id" mapping="['caller']" domain="integer"/>
                <param name="source.employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="source.caller_note" mapping="['cernote']" domain="string"/>
                <param name="priority.id" mapping="['priorId']" domain="integer"/>
                <param name="priorNum" mapping="['prior']" domain="integer"/>
                <param name="control" mapping="['control']" domain="integer" value="1"/>
                <param name="source.note" mapping="['note']" domain="string"/>
                <param name="employee.id" mapping="['reg']" domain="integer" value="#{emplPos.id}"/>
                <param name="station.id" mapping="['station']" value="#{org.id}"/>
                <param name="route.id" mapping="['route']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>
                <param name="brg.id" mapping="['brg']" domain="integer"/>
                <param name="emp.id" mapping="['emp']" domain="integer"/>
                <param name="parent_call.id" mapping="['parcal']" domain="integer"/>
                <!--<param name="spcparent_call.id" mapping="['spcparcal']" domain="integer"/>-->
                <param name="need_exit_through" mapping="['need_exit_through']" domain="integer"/>

                <param name="route_reg.id" mapping="['transreg']" domain="integer"/>
                <param name="receipt_time" mapping="['receipt']" domain="string"/>
                <param name="transmit_time" mapping="['transmit']" domain="string"/>
                <param name="transmit.id" mapping="['trans']" domain="integer"/>

                <param name="exit_time" mapping="['exitt']" domain="string"/>
                <param name="coming_time" mapping="['comingt']" domain="string"/>

                <param name="end_time" mapping="['endtime']" domain="string"/>
                <param name="user" mapping="['user']" domain="integer" value="#{user.id}"/>

            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Вызов сохранен в системе
            </success-text>
        </action>

    </actions>
    <validations>
        <!--установка отметок-->
        <!-- валидация отметки Алкогольное опьянение -->
        <condition id="call_reason_is_alco" level="warning">
            <message>Внимание! Будет проставлена отметка "Алкогольное опьянение"</message>
            <expression  on="source.is_alco">
                (!source.is_alco)
            </expression>
        </condition>

        <!-- Валидация отметки Псих -->
        <condition id="call_reason_is_psycho" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression>
                (!source.caller_reason.is_psycho)
            </expression>
        </condition>
        <condition id="diag_is_psycho" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression>
                (!source.diagnosis.is_psycho)
            </expression>
        </condition>

        <condition id="checkAge" level="error">
            <expression>((typeof individual.birthday != 'undefined') &amp;&amp; (individual.birthday != null))
                ||((typeof age_years != 'undefined') &amp;&amp; (age_years != null))
                ||((typeof age_months != 'undefined') &amp;&amp; (age_months != null))
                ||((typeof age_days != 'undefined') &amp;&amp; (age_days != null))
            </expression>
            <message>Одно из полей 'Дата рождения'/'Возраст' обязательно должно быть заполнено</message>
        </condition>

        <condition id="AfterDatacheck" level="error">
            <expression on="data">
                <![CDATA[
                    moment(data, 'DD.MM.YYYY').valueOf() <= moment().valueOf()
                ]]>
            </expression>
            <message>Дата больше текущей</message>
        </condition>

        <constraint id="BeforDatacheck" level="warning">
            <invocation>
                <sql:sql>
                <![CDATA[
                    select case when (cast(now() as date) = date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date) - cast('1 month' as interval))
                                or cast(now() as date) > date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date)))
                            then false
                            else true
                    end;
                    ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="data" mapping="['data']" domain="date"/>
            </in-parameters>
            <result expression="[0][0][0]"/>
            <message>Проверьте корректность даты</message>
        </constraint>

        <constraint id="PatUnique" level="warning">
            <invocation>
                <sql:sql>
                    select count(distinct indiv_id)
                    from pim_individual_doc
                    where series = :series
                    and number = :number
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="indDoc.series" mapping="['series']" domain="string"/>
                <param name="indDoc.number" mapping="['number']" domain="string"/>
            </in-parameters>
            <result expression="[0][0][0] >= 2"/>
            <message>Найдено несколько пациентов с одинаковыми документами. Объедините записи в картотеке пациентов.</message>
        </constraint>

        <constraint id="patUniqueCallPaper" level="warning">
            <invocation>
                <sql:sql>
                    select count(distinct indiv_id)
                    from pim_individual_doc
                    where upper(translate(concat(series, number), ' ', '')) = upper(translate(:number, ' ', ''))
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="indDoc" mapping="['number']" domain="string"/>
            </in-parameters>
            <result expression="2 >= [0][0][0]"/>
            <message>Найдено несколько пациентов с одинаковыми документами. Объедините записи в картотеке пациентов.</message>
        </constraint>

      <!--  <constraint id="NumberUnique" level="error">
            <message>Карта вызова с номером '{number}' на дату '{data}' уже заведена</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.md_ambulance_call cal
                    join amb.md_ambulance_change change on change.id = cal.call_dt
                    where cal.call_number = :num
                    and change.from_data = :data
                    and cal.station_id = :station
                    and cal.substation_id = :substation
                    and (:id::int is null or cal.id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="number" mapping="['num']" domain="integer"/>
                <param name="data" mapping="['data']" domain="date"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>-->

        <!--<constraint id="inArrNumber" level="error">
            <message>Номер '{number}' на дату '{data}' не попадает в диапазон номеров для БУМ</message>
            <invocation>
                <sql:sql>
                    <![CDATA[
                    select count(*)
                    from amb.md_ambulance_bum_numbers bum
                    join amb.md_ambulance_numbers num on num.id = bum.numb_id
                    where bum.change_id = amb.insert_into_md_ambulance_change (cast(:data as date),:station,:dep)
                    and num.dep_id = :dep
                    and (:num >= bum.numbers[1] and :num <= bum.numbers[2])
                    ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                &lt;!&ndash;<param name="id" mapping="['id']" domain="integer"/>&ndash;&gt;
                <param name="number" mapping="['num']" domain="integer"/>
                <param name="data" mapping="['data']" domain="date"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
                <param name="substation.id" mapping="['dep']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] != 0" />
        </constraint>-->

        <condition id="checkAdSource" level="error">
            <expression>((typeof source.addr_data != 'undefined') &amp;&amp; (source.addr_data != null) &amp;&amp; (source.addr_data.id != null)) ||((typeof source.addr_descr != 'undefined') &amp;&amp; (source.addr_descr != null)) </expression>
            <message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>
        </condition>

        <!--валидации на поля ввода времени-->
        <condition id="checkCallPaperTime" level="error">
            <message>Проверьте корретность вводимого времени</message>
            <expression>
                <!--todo >= 3.1-->
                <![CDATA[
                var j = 0;
                var m = [];
                var n = [];
                var res = true;
                var ismeer = false;
                if ((typeof receipt_time != 'undefined')&&(receipt_time != null) && (receipt_time >= '00:00')&&(change_ftime > receipt_time)) {
                        m[0] = (moment(data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                        ismeer = ismeer||true;                                                                                               }
                    else if ((typeof receipt_time != 'undefined')&&(receipt_time != null))
                        m[0] = (moment(data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof transmit_time != 'undefined')&&(transmit_time != null)&&(transmit_time != '__:__')&&((transmit_time >= '00:00' )&&( change_ftime >= transmit_time)||(ismeer == true))){
                        m[1] = (moment(data.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                        ismeer = ismeer||true;                                                                                               }
                    else if ((typeof transmit_time != 'undefined')&&(transmit_time != null)&&(transmit_time != '__:__'))
                        m[1] = (moment(data.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__')&&((exit_time >= '00:00' )&&( change_ftime >= exit_time)||(ismeer == true))){
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                        ismeer = ismeer||true;                                                                                               }
                    else if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__'))
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__')&&((coming_time >= '00:00' )&&( change_ftime >= coming_time)||(ismeer == true))){
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                        ismeer = ismeer||true;                                                                                               }
                    else if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__'))
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof end_time != 'undefined')&&(end_time != null)&&(end_time != '__:__')&&((end_time >= '00:00' )&&( change_ftime >= end_time)||(ismeer == true)))
                        m[4] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                    else if ((typeof end_time != 'undefined')&&(end_time != null)&&(end_time != '__:__'))
                        m[4] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm'));

                for (var i=0; i<=4; i++ ){
                    if ((typeof m[i] != 'undefined') && (m[i] != null)) {
                             (n[j] = m[i]);
                             j++;
                        }
                        }
                if (n.length > 1) {
                    for (var i=1; i<=j-1; i++ ){
                        if ((n[i] <= moment()) && (n[i-1] <= n[i]))
                            {res = res && true;}
                            else {res = res && false}
                        }
                                  }
                    else res = true
                ]]>
            </expression>
        </condition>
        <condition id="nullChange" level="error">
            <message> </message>
            <expression on="change">
                change == null
            </expression>
        </condition>
    </validations>
</object>