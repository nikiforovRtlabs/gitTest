<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-2.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <!--<id>call_double_search</id>-->
    <name>Список вызовов</name>
    <object-id>call_double</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query> select :select
                from amb.md_ambulance_call cal
                join amb.md_ambulance_notes_setting mans on cal.station_id = mans.clinic_id
                left join amb.md_ambulance_call_note cn on cal.id = cn.call_id and cn.note_id in (8,9) and cn.note_active is true and cn.note_type is true
                left join amb.md_ambulance_note man on man.id = cn.note_id
                left join amb.md_ambulance_call_double macd on macd.call_note_id = cn.id
                <!--left join md_ambulance_call duble on (duble.address_id = cal.address_id and duble.from_time between (cal.from_time-mans.elapsed_time) and cal.from_time and duble.id not in (cal.id)) or (macd.call_id = duble.id)-->
                left join amb.md_ambulance_call duble on
                    (duble.address_id = cal.address_id
                            and duble.from_time between (cal.from_time-mans.elapsed_time) and cal.from_time
                            and duble.id not in (cal.id))
                    or (duble.patient_id = cal.patient_id
                            and duble.from_time between (cal.from_time-mans.elapsed_time)  and cal.from_time
                            and duble.id not in (cal.id))
                    or (macd.call_id = duble.id)
                    or (duble.call_place_id = cal.call_place_id and duble.description = cal.description
                            and duble.from_time between (cal.from_time-mans.elapsed_time)  and cal.from_time
                            and duble.id not in (cal.id))
                left join amb.md_ambulance_change mac on duble.call_dt = mac.id
                left join amb.md_ambulance_caller_reason cr ON duble.caller_reason_id = cr.id
                left join md_diagnosis dia on duble.reason_diag = dia.id
                left join amb.md_ambulance_call_place pl on duble.call_place_id = pl.id
                left join pim_organization plorg on duble.place_org_id = plorg.id
                left join pim_department pldep on duble.place_department_id = pldep.id
                left join address_element_data aed on duble.address_id = aed.id
                left join pci_patient pcp on duble.patient_id = pcp.id
                left join pim_individual pip on pcp.id = pip.id
                left join md_clinic mc on duble.station_id = mc.id
                left join pim_organization po on mc.id = po.id
                left join amb.md_ambulance_route rou on duble.route_id = rou.id
                left join pim_department pd on duble.substation_id = pd.id

                left join pim_employee_position pep on cn.registrator_id = pep.id
                left join pim_employee pe on pep.employee_id = pe.id
                left join pim_individual pi on pe.individual_id = pi.id
                left join pim_position ppos on pep.position_id = ppos.id

                where :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>select count(*)
                from amb.md_ambulance_call cal
                join amb.md_ambulance_notes_setting mans on cal.station_id = mans.clinic_id
                left join amb.md_ambulance_call_note cn on cal.id = cn.call_id and cn.note_id in (8,9) and cn.note_active is true and cn.note_type is true
                left join amb.md_ambulance_note man on man.id = cn.note_id
                left join amb.md_ambulance_call_double macd on macd.call_note_id = cn.id
                <!--left join md_ambulance_call duble on (duble.address_id = cal.address_id and duble.from_time between (cal.from_time-mans.elapsed_time) and cal.from_time and duble.id not in (cal.id)) or (macd.call_id = duble.id)-->
                left join amb.md_ambulance_call duble on
                    (duble.address_id = cal.address_id
                        and duble.from_time between (cal.from_time-mans.elapsed_time) and cal.from_time
                        and duble.id not in (cal.id))
                    or (duble.patient_id = cal.patient_id
                        and duble.from_time between (cal.from_time-mans.elapsed_time)  and cal.from_time
                        and duble.id not in (cal.id))
                    or (macd.call_id = duble.id)
                    or (duble.call_place_id = cal.call_place_id and duble.description = cal.description
                        and duble.from_time between (cal.from_time-mans.elapsed_time)  and cal.from_time
                        and duble.id not in (cal.id))
                left join amb.md_ambulance_change mac on duble.call_dt = mac.id
                left join amb.md_ambulance_caller_reason cr ON duble.caller_reason_id = cr.id
                left join md_diagnosis dia on duble.reason_diag = dia.id
                left join amb.md_ambulance_call_place pl on duble.call_place_id = pl.id
                left join pim_organization plorg on duble.place_org_id = plorg.id
                left join pim_department pldep on duble.place_department_id = pldep.id
                left join address_element_data aed on duble.address_id = aed.id
                left join pci_patient pcp on duble.patient_id = pcp.id
                left join pim_individual pip on pcp.id = pip.id
                left join md_clinic mc on duble.station_id = mc.id
                left join pim_organization po on mc.id = po.id
                left join amb.md_ambulance_route rou on duble.route_id = rou.id
                left join pim_department pd on duble.substation_id = pd.id

                left join pim_employee_position pep on cn.registrator_id = pep.id
                left join pim_employee pe on pep.employee_id = pe.id
                left join pim_individual pi on pe.individual_id = pi.id
                left join pim_position ppos on pep.position_id = ppos.id

                where :where
            </n2o:count-query>
            <n2o:alias>cal</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>call_id</id>
            <domain>integer</domain>
            <name>Исходный вызов</name>
            <expression>cal.id</expression>
            <!--<search unavailable="true"/>-->
        </field>
        <field>
            <id>mark</id>
            <domain>integer</domain>
            <expression>cal.call_mark</expression>
        </field>
        <field>
            <id>id</id>
            <domain>integer</domain>
            <expression>duble.id</expression>
        </field>
        <field>
            <id>number</id>
            <domain>integer</domain>
            <name>Номер</name>
            <expression>duble.call_number</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>change.id</id>
            <domain>integer</domain>
            <expression>mac.id</expression>
        </field>
        <field>
            <id>change.date</id>
            <domain>date</domain>
            <name>Смена</name>
            <expression>mac.from_data</expression>
            <search unavailable="true"/>
        </field>

        <field>
            <id>el_time</id>
            <domain>time</domain>
            <expression>to_char(mans.elapsed_time,'hh24')</expression>
            <!--<expression>select to_char(mans.elapsed_time,'hh24') from </expression>-->
        </field>
        <!--<field>-->
            <!--<id>from_time</id>-->
            <!--<domain>datetime</domain>-->
            <!--<name>Время приема вызова</name>-->
            <!--<expression>cal.from_time</expression>-->
            <!--&lt;!&ndash;<search>cal.from_time between (cast(:from_time as timestamp) - CAST(ns.elapsed_time as interval)) and (cast(:from_time as timestamp) + cast(ns.elapsed_time as interval))</search>&ndash;&gt;-->
        <!--</field>-->
        <field>
            <id>from_time</id>
            <domain>time</domain>
            <name>Время приема</name>
            <expression>duble.from_time</expression>
            <!--<search>-->
                <!--<![CDATA[-->
                <!--(duble.from_time >= cal.from_time - mans.elapsed_time) and (duble.from_time < cal.from_time)-->
                <!--]]>-->
            <!--</search>-->
        </field>
        <field>
            <id>ftime</id>
            <domain>time</domain>
            <name>Время приема вызова</name>
            <expression>to_char(duble.from_time,'dd.mm.yyyy hh24:mi:ss')</expression>
            <!--<search>cal.from_time between (cast(:from_time as timestamp) - CAST(ns.elapsed_time as interval)) and (cast(:from_time as timestamp) + cast(ns.elapsed_time as interval))</search>-->
        </field>
        <!--<field>-->
            <!--<id>ftime</id>-->
            <!--<domain>string</domain>-->
            <!--<name>Принят</name>-->
            <!--<expression>to_char(cal.from_time,'hh24:mi')</expression>-->
        <!--</field>-->
        <!--<field>-->
            <!--<id>from_dt</id>-->
            <!--<domain>string</domain>-->
            <!--<name>Принят</name>-->
            <!--<expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>-->
        <!--</field>-->
        <!--<field>-->
            <!--<id>ffrom_dt</id>-->
            <!--<domain>date</domain>-->
            <!--<name>Принят с</name>-->
            <!--<expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>-->
            <!--<search><![CDATA[-->
                <!--cast(cal.from_time as date) >= :ffrom_dt-->
                <!--]]>-->
            <!--</search>-->
        <!--</field>-->
        <!--<field>-->
            <!--<id>tfrom_dt</id>-->
            <!--<domain>date</domain>-->
            <!--<name>Принят по</name>-->
            <!--<expression>to_char(cal.from_time,'dd.mm.yyyy')</expression>-->
            <!--<search><![CDATA[-->
                <!--cast(cal.from_time as date) <= :tfrom_dt-->
                <!--]]>-->
            <!--</search>-->
        <!--</field>-->
        <field>
            <id>to_time</id>
            <domain>time</domain>
            <name>Время окончания вызова</name>
            <expression>to_char(duble.to_time,'dd.mm.yyyy hh24:mi')</expression>
        </field>
        <field>
            <id>caller_reason.id</id>
            <domain>integer</domain>
            <expression>cr.id</expression>
        </field>
        <field>
            <id>caller_reason.name</id>
            <domain>string</domain>
            <name>Повод</name>
            <expression>cr.name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>diagnosis.id</id>
            <domain>integer</domain>
            <expression>dia.id</expression>
        </field>
        <field>
            <id>diagnosis.name</id>
            <domain>string</domain>
            <name>Диагноз</name>
            <expression>dia.name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>reason_note</id>
            <domain>string</domain>
            <name>Дополнительный повод</name>
            <expression>duble.reason_note</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>reas_diag</id>
            <domain>string</domain>
            <name>Повод/Диагноз</name>
            <expression>concat(cr.name,'/',dia.name)</expression>
            <search unavailable="true"/>
        </field>

        <field>
            <id>call_place.id</id>
            <domain>integer</domain>
            <expression>pl.id</expression>
        </field>
        <field>
            <id>call_place.name</id>
            <domain>string</domain>
            <name>Место вызова</name>
            <expression>pl.name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>place_note</id>
            <domain>string</domain>
            <name>Место вызова: примечания</name>
            <expression>duble.call_place_note</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>org.id</id>
            <domain>integer</domain>
            <expression>plorg.id</expression>
        </field>
        <field>
            <id>org.full_name</id>
            <domain>string</domain>
            <name>Организация места вызова</name>
            <expression>plorg.full_name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>department.id</id>
            <domain>integer</domain>
            <expression>pldep.id</expression>
        </field>
        <field>
            <id>department.name</id>
            <domain>string</domain>
            <name>Подразделение места вызова</name>
            <expression>pldep.name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>adressId</id>
            <domain>integer</domain>
            <expression>duble.address_id</expression>
            <!--<search>cal.address_id = :adressId</search>-->
        </field>
        <field>
            <id>address</id>
            <domain>string</domain>
            <name>Адрес вызова</name>
            <expression>
                concat (adr__get_element_as_text(duble.address_id, '(6,s,1)(7,s,1)(8,s,1)'),', ',adr__get_element_as_text(cal.address_id, '(4,s,0)'))
            </expression>
            <!--<search>upper(:expression) like upper('%'||:address||'%')</search>-->
            <search unavailable="true"/>
        </field>
        <field>
            <id>addr_data.id</id>
            <domain>integer</domain>
            <expression>aed.id</expression>
        </field>
        <field>
            <id>addr_data.search_name</id>
            <domain>string</domain>
            <name>Улица</name>
            <expression>aed.search_name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>addr_data.name</id>
            <domain>string</domain>
            <name>Улица</name>
            <expression>adr__get_element_as_text(aed.id, '(4,s,0)(6,s,1)(7,s,1)(8,s,1)')</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>addr_descr</id>
            <domain>string</domain>
            <name>Адрес коментарии</name>
            <expression>duble.description</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.id</id>
            <domain>integer</domain>
            <expression>pip.id</expression>
        </field>
        <field>
            <id>individual.indiv</id>
            <domain>string</domain>
            <name>Пациент</name>
            <expression>pip.surname||' '||pip.name||' '||pip.patr_name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.surname</id>
            <domain>string</domain>
            <name>Фамилия</name>
            <expression>pip.surname</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.name</id>
            <domain>string</domain>
            <name>Имя</name>
            <expression>pip.name</expression>
            <!--<search>upper(pip.name) like upper('%'||:individual.name||'%')</search>-->
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.patrName</id>
            <domain>string</domain>
            <name>Отчество</name>
            <expression>pip.patr_name</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.age</id>
            <domain>integer</domain>
            <name>Возраст</name>
            <!--<expression>get_age(cast (pip.birth_dt as date),cast(now() as date))</expression>-->
            <expression>case when get_age(cast (pip.birth_dt as date),cast(now() as date)) = -1 then '' else CAST(get_age(cast (pip.birth_dt as date),cast(now() as date)) as varchar(3)) end</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>individual.birth_dt</id>
            <domain>date</domain>
            <name>ДР</name>
            <expression>pip.birth_dt</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>patFIO</id>
            <domain>string</domain>
            <name>Пациент</name>
            <expression>pip.surname||' '||pip.name||' '||pip.patr_name||case when pip.birth_dt is not null then ' '||to_char(pip.birth_dt,'dd.mm.yyyy') else '' end</expression>
            <search unavailable="true"/>
        </field>

        <field>
            <id>station.orgId</id>
            <domain>integer</domain>
            <expression>po.id</expression>
        </field>
        <field>
            <id>station.name</id>
            <domain>string</domain>
            <name>Станция</name>
            <expression>coalesce(po.short_name,po.full_name)</expression>
            <search unavailable="true"/>
        </field>
        <field>
            <id>substation.id</id>
            <domain>integer</domain>
            <expression>pd.id</expression>
        </field>
        <field>
            <id>substation.name</id>
            <domain>string</domain>
            <name>Подстанция</name>
            <expression>pd.name</expression>
            <search unavailable="true"/>
        </field>

        <!--<field>-->
            <!--<id>notes</id>-->
            <!--<domain>string</domain>-->
            <!--<name>Отметки</name>-->
            <!--<expression>amb.search_call_note(cal.id)</expression>-->
        <!--</field>-->
        <!--<field>-->
            <!--<id>note.id</id>-->
            <!--<domain>integer</domain>-->
            <!--<name>Отметка</name>-->
            <!--<expression>macn.id</expression>-->
            <!--<search>macn.id = :note.id</search>-->
        <!--</field>-->

        <field>
            <id>employee.id</id>
            <domain>string</domain>
            <name>Принял</name>
            <expression>pep.id</expression>
        </field>
        <field>
            <id>employee.namePos</id>
            <domain>string</domain>
            <name>Регистратор</name>
            <expression>pi.surname||' '||left(initcap(pi.name),1)||'. '||left(initcap(pi.patr_name),1)||'.'||'('||ppos.name||')'</expression>
            <search unavailable="true"/>
        </field>

        <field>
            <id>note.id</id>
            <domain>integer</domain>
            <expression>man.id</expression>
        </field>

        <field>
            <id>note_active</id>
            <domain>boolean</domain>
            <expression>cn.note_active</expression>
        </field>
        <field>
            <id>note_type</id>
            <domain>boolean</domain>
            <expression>cn.note_type</expression>
        </field>


        <field>
            <id>has_note</id>
            <domain>boolean</domain>
            <expression>case when macd.call_id is null then false else true end</expression>
        </field>
        <!--<field>-->
            <!--<id>has_duble</id>-->
            <!--<domain>integer</domain>-->
            <!--<expression>select count(*) from amb.md_ambulance_call cal-->
                <!--left join amb.md_ambulance_notes_setting mans on cal.station_id = mans.clinic_id-->
                <!--left join amb.md_ambulance_call duble on duble.id not in (cal.id) and-->
                <!--duble.address_id = cal.address_id-->
                <!--and duble.from_time between (cal.from_time-mans.elapsed_time) and cal.from_time-->
            <!--where cal.id = </expression>-->
        <!--</field>-->
    </fields>
</query>