<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-3.0"
       xmlns:n2o="http://n2oapp.net/framework/config/schema/n2o-query-executions-1.0">
    <!--<id>addr_def_level_setting</id>-->
    <name>Настройка значения адреса (умолчание)</name>
    <object-id>addr_def_level_setting</object-id>
    <execution>
        <n2o:sql>
            <n2o:items-query>
                select :select
                from public.cmn_setting_value csv
                join public.cmn_scope csc on csc.id = csv.scope_id
                join public.cmn_scope_type cst on cst.id = csc.type_id
                join public.cmn_setting cs on cs.id = csv.setting_id
                left join public.md_clinic mc on mc.scope_id = csv.scope_id
                left join public.pim_department pd on pd.scope_id = csv.scope_id
                left join public.pim_organization po on po.id = coalesce(mc.id,pd.org_id)
                left join public.address_element_data aed on aed.id = case when csv.value ~ '^[0-9]+$' then cast(csv.value as integer) else null end
                <!--cast(csv.value as integer)-->
                where cs.id = 'cz.atria.lsd.ns.addresses.AddressSettings.defaultValue' and
                :where
                order by :order
            </n2o:items-query>
            <n2o:count-query>
                select count(*)
                from public.cmn_setting_value csv
                join public.cmn_scope csc on csc.id = csv.scope_id
                join public.cmn_scope_type cst on cst.id = csc.type_id
                join public.cmn_setting cs on cs.id = csv.setting_id
                left join public.md_clinic mc on mc.scope_id = csv.scope_id
                left join public.pim_department pd on pd.scope_id = csv.scope_id
                left join public.pim_organization po on po.id = coalesce(mc.id,pd.org_id)
                left join public.address_element_data aed on aed.id = case when csv.value ~ '^[0-9]+$' then cast(csv.value as integer) else null end
                <!--cast(csv.value as integer)-->
                where cs.id = 'cz.atria.lsd.ns.addresses.AddressSettings.defaultValue' and
                :where
            </n2o:count-query>
            <n2o:alias>csv</n2o:alias>
        </n2o:sql>
    </execution>
    <fields>
        <field>
            <id>id</id>
            <domain>string</domain>
            <display/>
            <name>Идентификатор</name>
            <expression>cast(csv.scope_id as varchar)||csv.setting_id</expression>
            <filters>
                <filter type="eq" filter-field="id">
                    :expression = :id
                    <!--csv.scope_id = coalesce(:substation.scopeId,:station.scopeId,:scopeId)-->
                </filter>
            </filters>
        </field>
        <!--<field>-->
            <!--<id>intID</id>-->
            <!--<domain>integer</domain>-->
            <!--<display/>-->
            <!--<expression>csv.scope_id</expression>-->
            <!--<filters>-->
                <!--<filter type="eq" filter-field="intId">-->
                    <!--csv.scope_id = coalesce(:substation.scopeId,:station.scopeId,:scopeId)-->
                <!--</filter>-->
            <!--</filters>-->
        <!--</field>-->
        <field>
            <id>setting.id</id>
            <domain>integer</domain>
            <display/>
            <expression>csv.setting_id</expression>
        </field>

        <field>
            <id>scope.id</id>
            <domain>integer</domain>
            <display/>
            <expression>cst.id</expression>
            <!--<filters>-->
                <!--<filter type="eq" filter-field="scope.id">-->
                    <!--:expression = :scope.id-->
                <!--</filter>-->
            <!--</filters>-->
        </field>
        <field>
            <id>scope.name</id>
            <domain>string</domain>
            <display/>
            <expression>cst.name</expression>
            <!--<filters>-->
                <!--<filter type="eq" filter-field="scope.name">-->
                    <!--:expression = :scope.name-->
                <!--</filter>-->
            <!--</filters>-->
        </field>
        <field>
            <id>scope.code</id>
            <domain>string</domain>
            <display/>
            <expression>cst.code</expression>
            <!--<filters>-->
                <!--<filter type="eq" filter-field="scope.code">-->
                    <!--:expression = :scope.code-->
                <!--</filter>-->
            <!--</filters>-->
        </field>
        <field>
            <id>value</id>
            <domain>integer</domain>
            <name>Значение</name>
            <display/>
            <expression>
                case when csv.value ~ '^[0-9]+$'
                    then cast(csv.value as integer)
                    else null
                end
            </expression>
        </field>

        <field>
            <id>scopeId</id>
            <domain>integer</domain>
            <display/>
            <expression>
                (select 1)
                <!--csv.scope_id-->
            </expression>
            <!--<filters>-->
                <!--<filter type="eq" filter-field="scopeId">-->
                    <!--:expression = :scopeId-->
                    <!--coalesce(:substation.scopeId,:station.scopeId,:scopeId)-->
                <!--</filter>-->
            <!--</filters>-->
        </field>

        <field>
            <id>station.id</id>
            <domain>integer</domain>
            <name>Станция</name>
            <display/>
            <expression>po.id</expression>
            <filters>
                <filter type="eq" filter-field="station.id">
                    :expression = :station.id
                </filter>
            </filters>
        </field>
        <field>
            <id>station.name</id>
            <domain>String</domain>
            <name>Станция</name>
            <display/>
            <expression>coalesce(po.short_name,po.full_name)</expression>
        </field>
        <field>
            <id>station.scopeId</id>
            <domain>integer</domain>
            <name>Станция</name>
            <display/>
            <expression>mc.scope_id</expression>
        </field>
        <!--<field>-->
            <!--<id>route.id</id>-->
            <!--<domain>integer</domain>-->
            <!--<expression>ar.id</expression>-->
        <!--</field>-->
        <!--<field>-->
            <!--<id>route.name</id>-->
            <!--<domain>string</domain>-->
            <!--<expression>ar.name</expression>-->
            <!--<name>Направление</name>-->
        <!--</field>-->
        <field>
            <id>substation.id</id>
            <domain>integer</domain>
            <display/>
            <expression>pd.id</expression>
            <filters>
                <filter type="eq" filter-field="substation.id">
                    :expression = :substation.id
                </filter>
            </filters>
        </field>
        <field>
            <id>substation.name</id>
            <domain>string</domain>
            <name>Подстанция</name>
            <display/>
            <expression>pd.name</expression>
        </field>
        <field>
            <id>substation.scopeId</id>
            <domain>integer</domain>
            <name>Станция</name>
            <display/>
            <expression>pd.scope_id</expression>
        </field>
        <field>
            <id>address.id</id>
            <domain>integer</domain>
            <name>Адрес</name>
            <display/>
            <expression>aed.id</expression>
        </field>
        <field>
            <id>address.search_name</id>
            <domain>string</domain>
            <name>Адрес</name>
            <display/>
            <expression>
                <!--adr__get_element_as_text(aed.id, '(1,s,0)(2,s,1)(4,s,0)(5,s,0)')-->
                aed.search_name
            </expression>
        </field>
    </fields>
</query>