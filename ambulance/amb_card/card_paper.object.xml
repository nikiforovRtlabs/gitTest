<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>card_paper</id>-->
    <name>Карта вызова по бумажной технологии</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    select amb.create_card_paper (
                    :num
                    ,amb.insert_into_md_ambulance_change (:data,:station,:substation)
                    ,:kind
                    ,:type
                    ,:is_group
                    ,:is_psycho
                    ,:is_alco
                    ,:sum
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr
                    ,:to_org
                    ,:to_dep
                    ,:toad
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat
                    ,upper(:surname)
                    ,upper(:name)
                    ,upper(:patrname)
                    ,:birthdt
                    ,:gender
                    ,:chronic
                    ,cast(:years as integer)
                    <!--,case when (:years = '___' or :years is null) then null else cast(:years as integer) end-->
                    ,cast(:months as integer)
                    <!--,case when (:months = '__' or :months is null) then null else cast(:months as integer) end-->
                    ,cast(:days as integer)
                    <!--,case when (:days = '__' or :days is null) then null else cast(:days as integer) end-->
                    ,:phone
                    ,:caller
                    ,:empmed
                    ,:cernote
                    ,:priorId
                    ,0
                    ,1
                    ,:note
                    ,:reg
                    ,:station
                    ,:route
                    ,:substation
                    ,:brg
                    ,:emp
                    ,:parcal

                    <!--Диспетчерезация-->
                    ,:transreg
                    ,case when (:receipt = '__:__' or :receipt = '' or :receipt is null) then null else cast(:receipt as time) end
                    ,case when (:transmit = '__:__' or :transmit = '' or :transmit is null) then null else cast(:transmit as time) end
                    ,:trans
                    ,case when (:endtime = '__:__' or :endtime = '' or :endtime is null) then null else cast(:endtime as time) end
                    ,:resDoc
                    ,:res1
                    ,:res2

                    ,:cardreg

                    ,case when (:exitt = '__:__' or :exitt = '' or :exitt is null) then null else cast(:exitt as time) end
                    ,case when (:comingt = '__:__' or :comingt = '' or :comingt is null) then null else cast(:comingt as time) end
                    ,case when (:transportationt = '__:__' or :transportationt = '' or :transportationt is null) then null else cast(:transportationt as time) end
                    ,case when (:toclinict = '__:__' or :toclinict = '' or :toclinict is null) then null else cast(:toclinict as time) end
                    ,case when (:tosubstationt = '__:__' or :tosubstationt = '' or :tosubstationt is null) then null else cast(:tosubstationt as time) end
                    ,case when (:deatht = '__:__' or :deatht = '' or :deatht is null) then null else cast(:deatht as time) end

                    ,:out_delay_reason
                    ,:callreas
                    ,:reasaccid
                    ,:condition_ns
                    ,:citizenship
                    ,cast(:nsdata as date) + case when (:nstime = '__:__' or :nstime = '' or :nstime is null) then null else cast(:nstime as time) end
                    ,case when (:milage = '__._' or :millage is null) then null else cast(:milage as numeric(5,1)) end
                    ,:need_exit_through
                    ,:activ_visit_clinic
                    ,:other_recomm

                    ,:time_gone
                    ,:transp_type
                    ,:casenote
                    ,:deathres
                    ,:death_diag

                    ,:master_diag
                    ,:step_result
                    ,:death_date
                    ,:deathemployee
                    ,coalesce(cast(:stoutcome_date as date),cast(:outcome_date as date),cast(:end_date as date))
                    <!--,coalesce(case when (:stoutcome_time = '__:__' or :stoutcome_time = '' or :stoutcome_time is null) then null else cast(:stoutcome_time as time) end,case when (:time_toclinic = '__:__' or :time_toclinic = '' or :time_toclinic is null) then null else cast(:time_toclinic as time) end,case when (:end_time = '__:__' or :end_time = '' or :end_time is null) then null else cast(:end_time as time) end)-->
                    ,coalesce(case when (:stoutcomet = '__:__' or :stoutcomet is null) then null else cast(:stoutcomet as time) end,case when (:ttoclinic = '__:__' or :ttoclinic is null) then null else cast(:ttoclinic as time) end,case when (:endtime = '__:__' or :endtime is null) then null else cast(:endtime as time) end)
                    ,:care_result

                    ,:accomp_diag
                    ,:mdiadisease_type
                    ,:accompdiadisease_type
                    ,:take_birth
                    ,:user
                    ,:master_injuryReason
                    ,:accomp_injuryReason
                    );
                </sql:sql>
            </invocation>
            <in-parameters>
                <!--КТ-->
                <param name="number" mapping="['num']" domain="integer"/>
                <param name="data" mapping="['data']" domain="date"/>
                <param name="call_kind.id" mapping="['kind']" domain="integer"/>
                <param name="call_type.id" mapping="['type']" domain="integer"/>
                <param name="is_group" mapping="['is_group']" domain="boolean"/>
                <param name="is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="sum_sufferer" mapping="['sum']" domain="integer"/>
                <param name="caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="reason_note" mapping="['reanote']" domain="string"/>
                <param name="call_place.id" mapping="['place']" domain="integer"/>
                <param name="place_note" mapping="['plnote']" domain="string"/>
                <param name="org.id" mapping="['plorg']" domain="integer"/>
                <param name="department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="addr_data.id" mapping="['address']" domain="integer"/>
                <param name="house" mapping="['house']" domain="string"/>
                <param name="housing" mapping="['housing']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="porch" mapping="['porch']" domain="string"/>
                <param name="floor" mapping="['floor']" domain="string"/>
                <param name="door_code" mapping="['door_code']" domain="string"/>
                <param name="addr_descr" mapping="['descr']" domain="string"/>
                <param name="to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="toaddr_data.id" mapping="['toad']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="to_house" mapping="['to_house']" domain="string"/>
                <param name="to_housing" mapping="['to_housing']" domain="string"/>
                <param name="to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="to_porch" mapping="['to_porch']" domain="string"/>
                <param name="to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="individual.id" mapping="['pat']" domain="integer"/>
                <param name="individual.surname" mapping="['surname']" domain="string"/>
                <param name="individual.name" mapping="['name']" domain="string"/>
                <param name="individual.patrName" mapping="['patrname']" domain="string"/>
                <param name="individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="gender.id" mapping="['gender']" domain="integer"/>
                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="age_years" mapping="['years']" domain="integer"/>
                <param name="age_months" mapping="['months']" domain="integer"/>
                <param name="age_days" mapping="['days']" domain="integer"/>
                <param name="phone" mapping="['phone']" domain="string"/>
                <param name="caller.id" mapping="['caller']" domain="integer"/>
                <param name="employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="caller_note" mapping="['cernote']" domain="string"/>
                <param name="priority.id" mapping="['priorId']" domain="integer"/>
                <param name="priorNum" mapping="['prior']" domain="integer"/>
                <param name="control" mapping="['control']" domain="integer" value="1"/>
                <param name="note" mapping="['note']" domain="string"/>
                <param name="employee.id" mapping="['reg']" domain="integer"/>
                <param name="station.orgId" mapping="['station']" value="#{org.id}"/>
                <param name="route.id" mapping="['route']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>
                <param name="brg.id" mapping="['brg']" domain="integer"/>
                <param name="emp.id" mapping="['emp']" domain="integer"/>
                <param name="parent_call.id" mapping="['parcal']" domain="integer"/>

                <!--Диспетчерезация-->
                <param name="route_reg.id" mapping="['transreg']" domain="integer"/>
                <param name="receipt_time" mapping="['receipt']" domain="string"/>
                <param name="transmit_time" mapping="['transmit']" domain="string"/>
                <param name="transmit.id" mapping="['trans']" domain="integer"/>

                <param name="end_time" mapping="['totime']" domain="string"/>
                <param name="resDoc.id" mapping="['resDoc']" domain="integer"/>
                <param name="res1.id" mapping="['res1']" domain="integer"/>
                <param name="res2.id" mapping="['res2']" domain="integer"/>

                <!--КВ-->
                <param name="registrator.id" mapping="['cardreg']" domain="integer" value="#{emplPos.id}"/>

                <param name="exit_time" mapping="['exitt']" domain="string"/>
                <param name="coming_time" mapping="['comingt']" domain="string"/>
                <param name="transportation_time" mapping="['transportationt']" domain="string"/>
                <param name="toclinic_time" mapping="['toclinict']" domain="string"/>
                <param name="time_toclinic" mapping="['ttoclinic']" domain="string"/>
                <param name="tosubstation_time" mapping="['tosubstationt']" domain="string"/>
                <param name="death_time" mapping="['deatht']" domain="string"/>
                
                <param name="out_delay_reason.id" mapping="['out_delay_reason']" domain="integer"/>
                <param name="call_reason.id" mapping="['callreas']" domain="integer"/>
                <param name="reason_accident.id" mapping="['reasaccid']" domain="integer"/>
                <param name="condition_ns" mapping="['condition_ns']" domain="string"/>
                <param name="citizenship_type.id" mapping="['citizenship']" domain="integer"/>
                <param name="nsdata" mapping="['nsdata']" domain="date"/>
                <param name="nstime" mapping="['nstime']" domain="string"/>
                <param name="milage" mapping="['milage']" domain="string"/>
                <param name="need_exit_through" mapping="['need_exit_through']" domain="integer"/>
                <param name="activ_visit_clinic.id" mapping="['activ_visit_clinic']" domain="integer"/>
                <param name="other_recommendations" mapping="['other_recomm']" domain="string"/>
                <param name="time_gone.id" mapping="['time_gone']" domain="integer"/>
                <param name="transp_type.id" mapping="['transp_type']" domain="integer"/>
                <param name="casenote" mapping="['casenote']" domain="string"/>
                <param name="deathres" mapping="['deathres']" domain="string"/>
                <param name="death_diag.id" mapping="['death_diag']" domain="integer"/>
                <param name="master_diag.id" mapping="['master_diag']" domain="integer"/>
                <param name="step_result.id" mapping="['step_result']" domain="integer"/>
                <param name="death_date" mapping="['death_date']" domain="date"/>
                <!--<param name="death_time" mapping="['death_time']" domain="string"/>-->
                <param name="deathemployee.id" mapping="['deathemployee']" domain="integer"/>
                <param name="stoutcome_date" mapping="['spcoutcome_date']" domain="date"/>
                <param name="outcome_date" mapping="['outcome_date']" domain="date"/>
                <param name="end_date" mapping="['end_date']" domain="date"/>
                <param name="stoutcome_time" mapping="['stoutcomet']" domain="string"/>
                <param name="end_time" mapping="['endtime']" domain="string"/>
                <param name="care_result.id" mapping="['care_result']" domain="integer"/>
                <param name="accomp_diag.id" mapping="['accomp_diag']" domain="integer"/>
                <param name="mdiadisease_type.id" mapping="['mdiadisease_type']" domain="integer"/>
                <param name="accompdiadisease_type.id" mapping="['accompdiadisease_type']" domain="integer"/>
                <param name="take_birth.id" mapping="['take_birth']" domain="integer"/>
                <param name="user" mapping="['user']" domain="integer" value="#{user.id}"/>

                <param name="master_injuryReason.id" mapping="['master_injuryReason']" domain="integer"/>
                <param name="accomp_injuryReason.id" mapping="['accomp_injuryReason']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Вызов сохранен в системе
            </success-text>
        </action>

    </actions>
    <validations>
        <!--установка отметок-->
        <!-- валидация отметки Алкогольное опьянение -->
        <condition id="upd_is_alco_set" level="warning">
            <message>Внимание! Будет проставлена отметка "Алкогольное опьянение"</message>
            <expression>
                (!is_alco)
            </expression>
        </condition>

        <!-- Валидация отметки Псих -->
        <condition id="upd_is_psycho_set" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression on="is_psycho, caller_reason, diagnosis">
                (!is_psycho)
            </expression>
        </condition>

        <!-- Проверка на наличие открытой смены -->
        <condition id="checkNullChange" level="error">
            <expression on="change">change != null</expression>
            <message> </message>
        </condition>

        <condition id="checkAddr" level="error">
            <expression>((typeof addr_data != 'undefined') &amp;&amp; (addr_data != null) &amp;&amp; (addr_data.id != null)) ||((typeof addr_descr != 'undefined') &amp;&amp; (addr_descr != null)) </expression>
            <message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>
        </condition>

        <condition id="checkAge" level="error">
            <expression>((typeof individual.birthday != 'undefined') &amp;&amp; (individual.birthday != null))
                ||((typeof age_years != 'undefined') &amp;&amp; (age_years != null))
                ||((typeof age_months != 'undefined') &amp;&amp; (age_months != null))
                ||((typeof age_days != 'undefined') &amp;&amp; (age_days != null))
            </expression>
            <message>Одно из полей 'Дата рождения'/'Возраст' обязательно должно быть заполнено</message>
        </condition>

        <condition id="AfterDatacheck" level="error">
            <expression on="data">
                <![CDATA[
                    moment(data, 'DD.MM.YYYY').valueOf() <= moment().valueOf()
                ]]>
            </expression>
            <message>Дата больше текущей</message>
        </condition>
        <!--moment(data, 'DD.MM.YYYY') > moment().format('DD.MM.YYYY')-->
        <!--<![CDATA[-->
        <!--moment(data).format('DD.MM.YYYY') <= moment().format('DD.MM.YYYY')-->
        <!--]]>-->

        <constraint id="BeforDatacheck" level="warning">
            <invocation>
                <sql:sql>
                <![CDATA[
                    select case when (cast(now() as date) = date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date) - cast('1 month' as interval))
                                or cast(now() as date) > date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date)))
                            then false
                            else true
                    end;
                    ]]>
                </sql:sql>
                <!--<sql:sql>-->
                    <!--<![CDATA[-->
                    <!--select case when (cast(now() as date) = date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date) - cast('1 month' as interval))-->
                                <!--or cast(now() as date) > date_trunc('month', cast(now() as date)) and :data < date_trunc('month', cast(now() as date)))-->
                            <!--then false-->
                         <!--when-->
                         <!--(cast(now() as date) = date_trunc('month', cast(now() as date)) and :data >= date_trunc('month', cast(now() as date) - cast('1 month' as interval)))-->
                                <!--or cast(now() as date) > date_trunc('month', cast(now() as date)) and :data >= date_trunc('month', cast(now() as date))-->
                                <!--and :data <= cast(now() as date)-->
                            <!--then true-->
                    <!--end;-->
                    <!--]]>-->
                <!--</sql:sql>-->
            </invocation>
            <in-parameters>
                <param name="data" mapping="['data']" domain="date"/>
            </in-parameters>
            <result expression="[0][0][0]"/>
            <message>Проверьте корректность даты</message>
        </constraint>

        <constraint id="PatUnique" level="warning">
            <invocation>
                <sql:sql>
                    select count(distinct indiv_id)
                    from pim_individual_doc
                    where coalesce(series,'') = coalesce(:series,'')
                    and number = :number
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="indDoc.series" mapping="['series']" domain="string"/>
                <param name="indDoc.number" mapping="['number']" domain="string"/>
                <!--<param name="individual.id" mapping="['indiv']" domain="integer"/>-->
            </in-parameters>
            <!--<out-parameters>-->
                <!--<param name="test" mapping="[0][0][0] == 1" domain="integer"/>-->
            <!--</out-parameters>-->
            <!--<result expression="1 == 2"/>-->
            <result expression="[0][0][0] &lt; 2"/>
            <message>Найдено несколько пациентов с одинаковыми документами. Объедините записи в картотеке пациентов.</message>
        </constraint>

        <condition id="NumberCheck" level="error">
            <expression on="number">
                <![CDATA[
                   !isNaN(parseFloat(number)) && isFinite(number)
                ]]>
            </expression>
            <message>Номер может состоять только из чисел</message>
        </condition>

        <constraint id="NumberUnique" level="error">
            <message>Карта вызова с номером '{number}' на дату '{data}' уже заведена</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.md_ambulance_call cal
                    join amb.md_ambulance_change change on change.id = cal.call_dt
                    where cal.call_number = :num
                    and change.from_data = :data
                    and cal.station_id = :station
                    and cal.substation_id = :substation
                    <!--and (:id is null or id != :id)-->
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['id']" domain="integer"/>
                <param name="number" mapping="['num']" domain="integer"/>
                <param name="data" mapping="['data']" domain="date"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
                <param name="substation.id" mapping="['substation']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <!--todo >=3.1-->
        <!--<condition id="time" level="error">-->
            <!--<message>Время передачи бригады должно быть больше времени приема</message>-->
            <!--<expression>-->
                <!--<![CDATA[-->
                <!--(moment(transmit_time,'HH:mm').diff(moment(receipt_time,'HH:mm'))/1000/60 >= 0) -->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_receipt_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="receipt_time">-->
                <!--<![CDATA[-->
                <!--if ((typeof receipt_time != 'undefined')&&(receipt_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(receipt_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_transmit_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="transmit_time">-->
                <!--<![CDATA[-->
                <!--if ((typeof transmit_time != 'undefined')&&(transmit_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(transmit_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_exit_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="exit_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof exit_time != 'undefined')&&(exit_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(exit_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_coming_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="coming_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof coming_time != 'undefined')&&(coming_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(coming_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_transportation_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="transportation_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof transportation_time != 'undefined')&&(transportation_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(transportation_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_toclinic_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="toclinic_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof toclinic_time != 'undefined')&&(toclinic_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(toclinic_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_time_toclinic" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="time_toclinic">-->
                <!--<![CDATA[-->
                    <!--if ((typeof time_toclinic != 'undefined')&&(time_toclinic != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(time_toclinic);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_end_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="end_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof end_time != 'undefined')&&(end_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(end_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_tosubstation_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression on="tosubstation_time">-->
                <!--<![CDATA[-->
                    <!--if ((typeof tosubstation_time != 'undefined')&&(tosubstation_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])');-->
                     <!--reg.test(tosubstation_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <!--<condition id="validate_death_time" level="error">-->
            <!--<message>Неверный формат!</message>-->
            <!--<expression>-->
                <!--<![CDATA[-->
                     <!--if ((typeof receipt_time != 'undefined')&&(receipt_time != null))-->
                    <!--{var reg = new RegExp('([0-1][0-9]|2[0-3]):([0-5][0-9])'); reg.test(death_time);-->
                    <!--} else true;-->
                <!--]]>-->
            <!--</expression>-->
        <!--</condition>-->
        <condition id="checkResources" level="error">
            <expression>((typeof resDoc != 'undefined') &amp;&amp; (resDoc != null)) ||((typeof res1 != 'undefined') &amp;&amp; (res1 != null))||((typeof res2 != 'undefined') &amp;&amp; (res2 != null)) </expression>
            <message>Укажите сотрудников в бригаде!</message>
        </condition>
        <condition id="checkPaperCardTime" level="error">
            <message>Проверьте корретность вводимого времени</message>
            <expression>
                <!--todo >= 3.1-->
                <![CDATA[
                var j = 0;
                var m = [];
                var n = [];
                var res = true;
                var ismeer = false;
                if ((typeof receipt_time != 'undefined')&&(receipt_time != null) && ((receipt_time >= '00:00')&&(change_ftime > receipt_time))){
                        m[0] = (moment(data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof receipt_time != 'undefined')&&(receipt_time != null))
                        m[0] = (moment(data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof transmit_time != 'undefined')&&(transmit_time != null)&&((transmit_time >= '00:00' )&&( change_ftime >= transmit_time)||(ismeer == true))) {
                        m[1] = (moment(data.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof transmit_time != 'undefined')&&(transmit_time != null))
                        m[1] = (moment(data.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__')&&((exit_time >= '00:00' )&&( change_ftime >= exit_time)||(ismeer == true))){
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__'))
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__')&&((coming_time >= '00:00' )&&( change_ftime >= coming_time)||(ismeer == true))){
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__'))
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof death_time != 'undefined')&&(death_time != null)&&(death_time != '__:__')&&((death_time >= '00:00' )&&( change_ftime >= death_time)||(ismeer == true))){
                        m[4] = (moment(data.substring(0,10) +' '+ death_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof death_time != 'undefined')&&(death_time != null)&&(death_time != '__:__'))
                        m[4] = (moment(data.substring(0,10) +' '+ death_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof transportation_time != 'undefined')&&(transportation_time != null)&&(transportation_time != '__:__')&&((transportation_time >= '00:00' )&&( change_ftime >= transportation_time)||(ismeer == true))){
                        m[5] = (moment(data.substring(0,10) +' '+ transportation_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof transportation_time != 'undefined')&&(transportation_time != null)&&(transportation_time != '__:__'))
                        m[5] = (moment(data.substring(0,10) +' '+ transportation_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof toclinic_time != 'undefined')&&(toclinic_time != null)&&(toclinic_time != '__:__')&&((toclinic_time >= '00:00' )&&( change_ftime >= toclinic_time)||(ismeer == true))){
                        m[6] = (moment(data.substring(0,10) +' '+ toclinic_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof toclinic_time != 'undefined')&&(toclinic_time != null)&&(toclinic_time != '__:__'))
                        m[6] = (moment(data.substring(0,10) +' '+ toclinic_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof time_toclinic != 'undefined')&&(time_toclinic != null)&&(time_toclinic != '__:__')&&((time_toclinic >= '00:00' )&&( change_ftime >= time_toclinic)||(ismeer == true))){
                        m[7] = (moment(data.substring(0,10) +' '+ time_toclinic, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof time_toclinic != 'undefined')&&(time_toclinic != null)&&(time_toclinic != '__:__'))
                        m[7] = (moment(data.substring(0,10) +' '+ time_toclinic, 'DD.MM.YYYY HH:mm'));

                if ((typeof end_time != 'undefined')&&(end_time != null)&&((end_time >= '00:00' )&&( change_ftime >= end_time)||(ismeer == true))){
                        m[8] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof end_time != 'undefined')&&(end_time != null))
                        m[8] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof tosubstation_time != 'undefined')&&(tosubstation_time != null)&&(tosubstation_time != '__:__')&&((tosubstation_time >= '00:00' )&&( change_ftime >= tosubstation_time)||(ismeer == true)))
                        m[9] = (moment(data.substring(0,10) +' '+ tosubstation_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                    else if ((typeof tosubstation_time != 'undefined')&&(tosubstation_time != null)&&(tosubstation_time != '__:__'))
                        m[9] = (moment(data.substring(0,10) +' '+ tosubstation_time, 'DD.MM.YYYY HH:mm'));

                for (var i=0; i<=9; i++ ){
                    if ((typeof m[i] != 'undefined') && (m[i] != null)) {
                             (n[j] = m[i]);
                             j++;
                        }
                        }

                for (var i=1; i<=j-1; i++ ){
                    if ((n[i] <= moment()) && (n[i-1] <= n[i]))
                        {res = res && true;}
                        else {res = res && false}
                    }
                ]]>
            </expression>
        </condition>


    </validations>
</object>