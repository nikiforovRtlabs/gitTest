<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0"
        xmlns:sp="http://n2oapp.net/framework/config/schema/action-stored-procedure-1.0">
    <!--<id>amb_card</id>-->
    <name>Карта вызова</name>
    <actions>
        <action id="create">
            <invocation>
                <sql:sql>
                    select amb.create_call_card (
                    :cal
                    ,:is_psycho
                    ,:is_alco
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr

                    ,:to_org
                    ,:to_dep
                    ,:toaddress
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat

                    ,:surname
                    ,:name
                    ,:patrName
                    ,cast(:birthdt as date)
                    ,:gender
                    ,cast(:years as integer)
                    ,cast(:months as integer)
                    ,cast(:days as integer)

                    ,:chronic
                    ,:phone
                    ,:caller
                    ,:cernote
                    ,:empmed
                    ,:note

                    ,:reg

                    ,case when (:exit_time = '__:__' or :exit_time is null) then null else cast(:exit_time as time) end
                    ,case when (:coming_time = '__:__' or :coming_time is null) then null else cast(:coming_time as time) end
                    ,case when (:transportation_time = '__:__' or :transportation_time is null) then null else cast(:transportation_time as time) end
                    ,case when (:toclinic_time = '__:__' or :toclinic_time is null) then null else cast(:toclinic_time as time) end
                    ,case when (:tosubstation_time = '__:__' or :tosubstation_time is null) then null else cast(:tosubstation_time as time) end
                    ,case when (:death_time = '__:__' or :death_time is null) then null else cast(:death_time as time) end
                    <!--,cast(:exit_time as time)-->
                    <!--,cast(:coming_time as time)-->
                    <!--,cast(:transportation_time as time)-->
                    <!--,cast(:toclinic_time as time)-->
                    <!--,cast(:tosubstation_time as time)-->
                    <!--,cast(:death_time as time)-->
                    
                    ,:out_delay_reason
                    ,:callreas
                    ,:reasaccid
                    ,:condition_ns
                    ,:citizenship
                    <!--,cast(:nsdata + cast(:nstime as time) as timestamp without time zone)-->
                    ,cast(:nsdata as date) + cast(:nstime as time)
                    ,case when (:milage = '__._' or :milage is null) then null else cast(:milage as numeric(5,1)) end
                    ,:need_exit_through
                    ,:activ_visit_clinic
                    ,:other_recomm

                    ,:toclemp
                    ,:receive_emp
                    ,:receive_brg

                    ,:time_gone
                    ,:transp_type
                    ,:casenote
                    ,:deathres
                    ,:death_diag

                    ,:master_diag
                    ,:step_result
                    ,:death_date
                    ,:deathemployee
                    <!--переписать на case-->
                    <!--или вообще оставить только одно значение stoutcome-->
                    <!--,coalesce(cast(:stoutcome_date as date),cast(:outcome_date as date),cast(:end_date as date))-->
                    <!--,coalesce(cast(:stoutcome_time as time),cast(:time_toclinic as time),cast(:end_time as time))-->
                    ,cast(:stoutcome_date as date)
                    ,case when (:stoutcome_time = '__:__' or :stoutcome_time is null) then null else cast(:stoutcome_time as time) end
                    <!--,cast(:stoutcome_time as time)-->
                    ,:care_result

                    ,:accomp_diag
                    ,:mdiadisease_type
                    ,:accompdiadisease_type
                    ,:take_birth
                    ,:diagnosis_is_not_confirmed
                    ,:master_injuryReason
                    ,:accomp_injuryReason
                    );
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['cal']" domain="integer"/>
                <param name="caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="reason_note" mapping="['reanote']" domain="string"/>
                <param name="call_place.id" mapping="['place']" domain="integer"/>
                <param name="place_note" mapping="['plnote']" domain="string"/>
                <param name="org.id" mapping="['plorg']" domain="integer"/>
                <param name="department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="addr_data.id" mapping="['address']" domain="integer"/>
                <param name="house" mapping="['house']" domain="string"/>
                <param name="housing" mapping="['housing']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="porch" mapping="['porch']" domain="string"/>
                <param name="floor" mapping="['floor']" domain="string"/>
                <param name="door_code" mapping="['door_code']" domain="string"/>
                <param name="addr_descr" mapping="['descr']" domain="string"/>
                <param name="to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="toaddr_data.id" mapping="['to_addr']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="to_house" mapping="['to_house']" domain="string"/>
                <param name="to_housing" mapping="['to_housing']" domain="string"/>
                <param name="to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="to_porch" mapping="['to_porch']" domain="string"/>
                <param name="to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="individual.id" mapping="['pat']" domain="integer"/>
                <param name="individual.surname" mapping="['surname']" domain="string"/>
                <param name="individual.name" mapping="['name']" domain="string"/>
                <param name="individual.patrName" mapping="['patrName']" domain="string"/>
                <param name="individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="age_years" mapping="['years']" domain="integer"/>
                <param name="age_months" mapping="['months']" domain="integer"/>
                <param name="age_days" mapping="['days']" domain="integer"/>
                <param name="gender.id" mapping="['gender']" domain="integer"/>

                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="phone" mapping="['phone']" domain="string"/>
                <param name="caller.id" mapping="['caller']" domain="integer"/>
                <param name="caller_note" mapping="['cernote']" domain="string"/>
                <param name="employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="note" mapping="['note']" domain="string"/>

                <param name="registrator.id" mapping="['reg']" domain="integer" value="#{emplPos.id}"/>

                <param name="exit_time" mapping="['exit_time']" domain="string"/>
                <param name="coming_time" mapping="['coming_time']" domain="string"/>
                <param name="transportation_time" mapping="['transportation_time']" domain="string"/>
                <param name="toclinic_time" mapping="['toclinic_time']" domain="string"/>
                <param name="time_toclinic" mapping="['time_toclinic']" domain="string"/>
                <param name="tosubstation_time" mapping="['tosubstation_time']" domain="string"/>
                <param name="death_time" mapping="['death_time']" domain="string"/>
                
                <param name="out_delay_reason.id" mapping="['out_delay_reason']" domain="integer"/>
                <param name="call_reason.id" mapping="['callreas']" domain="integer"/>
                <param name="reason_accident.id" mapping="['reasaccid']" domain="integer"/>
                <param name="condition_ns" mapping="['condition_ns']" domain="string"/>
                <param name="citizenship_type.id" mapping="['citizenship']" domain="integer"/>
                <param name="nsdata" mapping="['nsdata']" domain="date"/>
                <param name="nstime" mapping="['nstime']" domain="string"/>
                <param name="milage" mapping="['milage']" domain="string"/>
                <param name="need_exit_through" mapping="['need_exit_through']" domain="integer"/>
                <param name="activ_visit_clinic.id" mapping="['activ_visit_clinic']" domain="integer"/>
                <param name="other_recommendations" mapping="['other_recomm']" domain="string"/>

                <param name="toclemployee.id" mapping="['toclemp']" domain="integer"/>
                <param name="receive_emp" mapping="['receive_emp']" domain="string"/>
                <param name="receive_brg" mapping="['receive_brg']" domain="integer"/>

                <param name="time_gone.id" mapping="['time_gone']" domain="integer"/>
                <param name="transp_type.id" mapping="['transp_type']" domain="integer"/>
                <param name="casenote" mapping="['casenote']" domain="string"/>
                <param name="deathres" mapping="['deathres']" domain="string"/>
                <param name="death_diag.id" mapping="['death_diag']" domain="integer"/>
                <param name="master_diag.id" mapping="['master_diag']" domain="integer"/>
                <param name="step_result.id" mapping="['step_result']" domain="integer"/>
                <param name="death_date" mapping="['death_date']" domain="date"/>
                <param name="death_time" mapping="['death_time']" domain="string"/>
                <param name="deathemployee.id" mapping="['deathemployee']" domain="integer"/>
                <param name="stoutcome_date" mapping="['stoutcome_date']" domain="date"/>
                <param name="outcome_date" mapping="['outcome_date']" domain="date"/>
                <param name="end_date" mapping="['end_date']" domain="date"/>
                <param name="stoutcome_time" mapping="['stoutcome_time']" domain="string"/>
                <param name="end_time" mapping="['end_time']" domain="string"/>
                <param name="care_result.id" mapping="['care_result']" domain="integer"/>
                <param name="accomp_diag.id" mapping="['accomp_diag']" domain="integer"/>
                <param name="master_injuryReason.id" mapping="['master_injuryReason']" domain="integer"/>
                <param name="accomp_injuryReason.id" mapping="['accomp_injuryReason']" domain="integer"/>
                <param name="mdiadisease_type.id" mapping="['mdiadisease_type']" domain="integer"/>
                <param name="accompdiadisease_type.id" mapping="['accompdiadisease_type']" domain="integer"/>
                <param name="is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="take_birth.id" mapping="['take_birth']" domain="integer"/>
                <param name="diagnosis_is_not_confirmed" mapping="['diagnosis_is_not_confirmed']" domain="boolean"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Карта вызова сохранена в системе
            </success-text>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    select amb.update_call_card (
                    :cal
                    ,:is_psycho
                    ,:reason
                    ,:diag
                    ,:reanote
                    ,:place
                    ,:plnote
                    ,:plorg
                    ,:pldep
                    ,:address
                    ,:house
                    ,:housing
                    ,:apartment
                    ,:porch
                    ,:floor
                    ,:door_code
                    ,:descr

                    ,:to_org
                    ,:to_dep
                    ,:to_addr
                    ,:to_house
                    ,:to_housing
                    ,:to_apartment
                    ,:to_porch
                    ,:to_descr
                    ,:pat

                    ,:surname
                    ,:name
                    ,:patrName
                    ,cast(:birthdt as date)
                    ,:gender
                    ,cast(:years as integer)
                    ,cast(:months as integer)
                    ,cast(:days as integer)

                    ,:chronic
                    ,:phone
                    ,:caller
                    ,:cernote
                    ,:empmed
                    ,:note

                    ,:reg

                    ,case when (:exit_time = '__:__' or :exit_time is null) then null else cast(:exit_time as time) end
                    ,case when (:coming_time = '__:__' or :coming_time is null) then null else cast(:coming_time as time) end
                    ,case when (:transportation_time = '__:__' or :transportation_time is null) then null else cast(:transportation_time as time) end
                    ,case when (:toclinic_time = '__:__' or :toclinic_time is null) then null else cast(:toclinic_time as time) end
                    ,case when (:tosubstation_time = '__:__' or :tosubstation_time is null) then null else cast(:tosubstation_time as time) end
                    ,case when (:death_time = '__:__' or :death_time is null) then null else cast(:death_time as time) end
                    <!--,cast(:exit_time as time)-->
                    <!--,cast(:coming_time as time)-->
                    <!--,cast(:transportation_time as time)-->
                    <!--,cast(:toclinic_time as time)-->
                    <!--,cast(:tosubstation_time as time)-->
                    <!--,cast(:death_time as time)-->

                    ,:out_delay_reason
                    ,:callreas
                    ,:reasaccid
                    ,:condition_ns
                    ,:citizenship
                    <!--,cast(:nsdata + cast(:nstime as time) as timestamp without time zone)-->
                    ,cast(:nsdata as date) + cast(:nstime as time)
                    <!--,cast(:milage as numeric(5,1))-->
                    ,case when (:milage = '__._' or :milage is null) then null else cast(:milage as numeric(5,1)) end
                    ,:need_exit_through
                    ,:activ_visit_clinic
                    ,:other_recomm

                    ,:toclemp
                    ,:receive_emp
                    ,:receive_brg

                    ,:time_gone
                    ,:transp_type
                    ,:casenote
                    ,:deathres
                    ,:death_diag

                    ,:master_diag
                    ,:step_result
                    ,:death_date
                    ,:deathemployee
                    ,coalesce(cast(:stoutcome_date as date),cast(:outcome_date as date),cast(:end_date as date))
                    ,coalesce(cast(:stoutcome_time as time),cast(:time_toclinic as time),cast(:end_time as time))
                    ,:care_result

                    ,:accomp_diag
                    ,:mdiadisease_type
                    ,:accompdiadisease_type
                    ,:take_birth
                    ,:diagnosis_is_not_confirmed
                    ,:master_injuryReason
                    ,:accomp_injuryReason);
                    select amb.auto_add_call_note_amb_card(:cal, :reason, :diag, :reg, :plorg, :pldep, :master_diag, :is_psycho, :is_alco);
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="id" mapping="['cal']" domain="integer"/>
                <param name="caller_reason.id" mapping="['reason']" domain="integer"/>
                <param name="diagnosis.id" mapping="['diag']" domain="integer"/>
                <param name="reason_note" mapping="['reanote']" domain="string"/>
                <param name="call_place.id" mapping="['place']" domain="integer"/>
                <param name="place_note" mapping="['plnote']" domain="string"/>
                <param name="org.id" mapping="['plorg']" domain="integer"/>
                <param name="department.id" mapping="['pldep']" domain="integer"/>
                <!--<param name="myAddress.id" mapping="['address']" domain="integer"/>-->
                <param name="addr_data.id" mapping="['address']" domain="integer"/>
                <param name="house" mapping="['house']" domain="string"/>
                <param name="housing" mapping="['housing']" domain="string"/>
                <param name="apartment" mapping="['apartment']" domain="string"/>
                <param name="porch" mapping="['porch']" domain="string"/>
                <param name="floor" mapping="['floor']" domain="string"/>
                <param name="door_code" mapping="['door_code']" domain="string"/>
                <param name="addr_descr" mapping="['descr']" domain="string"/>
                <param name="to_org.id" mapping="['to_org']" domain="integer"/>
                <param name="to_department.id" mapping="['to_dep']" domain="integer"/>
                <param name="toaddr_data.id" mapping="['to_addr']" domain="integer"/>
                <!--<param name="tomyAddress.id" mapping="['toaddress']" domain="integer"/>-->
                <param name="to_house" mapping="['to_house']" domain="string"/>
                <param name="to_housing" mapping="['to_housing']" domain="string"/>
                <param name="to_apartment" mapping="['to_apartment']" domain="string"/>
                <param name="to_porch" mapping="['to_porch']" domain="string"/>
                <param name="to_addr_descr" mapping="['to_descr']" domain="string"/>
                <param name="individual.id" mapping="['pat']" domain="integer"/>
                <param name="individual.surname" mapping="['surname']" domain="string"/>
                <param name="individual.name" mapping="['name']" domain="string"/>
                <param name="individual.patrName" mapping="['patrName']" domain="string"/>
                <param name="individual.birthDate" mapping="['birthdt']" domain="date"/>
                <param name="age_years" mapping="['years']" domain="integer"/>
                <param name="age_months" mapping="['months']" domain="integer"/>
                <param name="age_days" mapping="['days']" domain="integer"/>
                <param name="gender.id" mapping="['gender']" domain="integer"/>

                <param name="chronic" mapping="['chronic']" domain="boolean"/>
                <param name="phone" mapping="['phone']" domain="string"/>
                <param name="caller.id" mapping="['caller']" domain="integer"/>
                <param name="caller_note" mapping="['cernote']" domain="string"/>
                <param name="employee_med.id" mapping="['empmed']" domain="integer"/>
                <param name="note" mapping="['note']" domain="string"/>

                <param name="registrator.id" mapping="['reg']" domain="integer" value="#{emplPos.id}"/>

                <param name="exit_time" mapping="['exit_time']" domain="string"/>
                <param name="coming_time" mapping="['coming_time']" domain="string"/>
                <param name="transportation_time" mapping="['transportation_time']" domain="string"/>
                <param name="toclinic_time" mapping="['toclinic_time']" domain="string"/>
                <param name="time_toclinic" mapping="['time_toclinic']" domain="string"/>
                <param name="tosubstation_time" mapping="['tosubstation_time']" domain="string"/>
                <param name="death_time" mapping="['death_time']" domain="string"/>

                <param name="out_delay_reason.id" mapping="['out_delay_reason']" domain="integer"/>
                <param name="call_reason.id" mapping="['callreas']" domain="integer"/>
                <param name="reason_accident.id" mapping="['reasaccid']" domain="integer"/>
                <param name="condition_ns" mapping="['condition_ns']" domain="string"/>
                <param name="citizenship_type.id" mapping="['citizenship']" domain="integer"/>
                <param name="nsdata" mapping="['nsdata']" domain="date"/>
                <param name="nstime" mapping="['nstime']" domain="string"/>
                <param name="milage" mapping="['milage']" domain="string"/>
                <param name="need_exit_through" mapping="['need_exit_through']" domain="integer"/>
                <param name="activ_visit_clinic.id" mapping="['activ_visit_clinic']" domain="integer"/>
                <param name="other_recommendations" mapping="['other_recomm']" domain="string"/>

                <param name="toclemployee.id" mapping="['toclemp']" domain="integer"/>
                <param name="receive_emp" mapping="['receive_emp']" domain="string"/>
                <param name="receive_brg" mapping="['receive_brg']" domain="integer"/>

                <param name="time_gone.id" mapping="['time_gone']" domain="integer"/>
                <param name="transp_type.id" mapping="['transp_type']" domain="integer"/>
                <param name="casenote" mapping="['casenote']" domain="string"/>
                <param name="deathres" mapping="['deathres']" domain="string"/>
                <param name="death_diag.id" mapping="['death_diag']" domain="integer"/>
                <param name="master_diag.id" mapping="['master_diag']" domain="integer"/>
                <param name="step_result.id" mapping="['step_result']" domain="integer"/>
                <param name="death_date" mapping="['death_date']" domain="date"/>
                <param name="death_time" mapping="['death_time']" domain="string"/>
                <param name="deathemployee.id" mapping="['deathemployee']" domain="integer"/>
                <param name="stoutcome_date" mapping="['stoutcome_date']" domain="date"/>
                <param name="outcome_date" mapping="['outcome_date']" domain="date"/>
                <param name="end_date" mapping="['end_date']" domain="date"/>
                <param name="stoutcome_time" mapping="['stoutcome_time']" domain="string"/>
                <param name="end_time" mapping="['end_time']" domain="string"/>
                <param name="care_result.id" mapping="['care_result']" domain="integer"/>
                <param name="accomp_diag.id" mapping="['accomp_diag']" domain="integer"/>
                <param name="mdiadisease_type.id" mapping="['mdiadisease_type']" domain="integer"/>
                <param name="accompdiadisease_type.id" mapping="['accompdiadisease_type']" domain="integer"/>
                <param name="is_psycho" mapping="['is_psycho']" domain="boolean"/>
                <param name="is_alco" mapping="['is_alco']" domain="boolean"/>
                <param name="station.id" mapping="['station']" value="#{org.id}"/>
                <param name="substation.id" mapping="['substation']" domain="integer" value="#{dep.id}"/>
                <param name="take_birth.id" mapping="['take_birth']" domain="integer"/>
                <param name="diagnosis_is_not_confirmed" mapping="['diagnosis_is_not_confirmed']" domain="boolean"/>

                <param name="master_injuryReason.id" mapping="['master_injuryReason']" domain="integer"/>
                <param name="accomp_injuryReason.id" mapping="['accomp_injuryReason']" domain="integer"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
            <success-text>
                Изменения в Карте вызова сохранены в системе
            </success-text>
        </action>
    </actions>
    <validations>
        <condition id="Addrcheck" level="error">
            <expression on="addr_data,addr_descr">((typeof addr_data != 'undefined') &amp;&amp; (addr_data != null) &amp;&amp; (addr_data.id != null)) ||((typeof addr_descr != 'undefined') &amp;&amp; (addr_descr != null)) </expression>
            <!--<expression>((typeof addr_data != 'undefined') &amp;&amp; (addr_data != null) &amp;&amp; (addr_data.id != null)) ||((typeof addr_descr != 'undefined') &amp;&amp; (addr_descr != null)) </expression>-->
            <message>Одно из полей 'Адрес вызова'/'Дополнительные ориентиры' обязательно должно быть заполнено</message>
        </condition>

        <condition id="checkAge" level="error">
            <expression>((typeof individual.birthday != 'undefined') &amp;&amp; (individual.birthday != null))
                ||((typeof age_years != 'undefined') &amp;&amp; (age_years != null))
                ||((typeof age_months != 'undefined') &amp;&amp; (age_months != null))
                ||((typeof age_days != 'undefined') &amp;&amp; (age_days != null))
            </expression>
            <message>Одно из полей 'Дата рождения'/'Возраст' обязательно должно быть заполнено</message>
        </condition>

        <constraint id="PatUnique" level="warning">
            <invocation>
                <sql:sql>
                    <![CDATA[
                        select count(distinct indiv_id)
                        from pim_individual_doc
                        where coalesce(series,'') = coalesce(:series,'')
                        and number = :number
                        and coalesce(issue_dt,'-infinity')::date <= coalesce(expire_dt,'infinity')::date
                        and daterange(coalesce(issue_dt,'-infinity'),coalesce(expire_dt,'infinity')) @> current_date
                    ]]>
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="indDoc.series" mapping="['series']" domain="string"/>
                <param name="indDoc.number" mapping="['number']" domain="string"/>
                <param name="individual.id" mapping="['indiv']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] &lt; 2"/>
            <message>Найдено несколько пациентов с одинаковыми документами. Объедините записи в картотеке пациентов.</message>
        </constraint>
        <constraint id="danger" level="warning">
            <message>Внимание! Вызов на особо опасный объект!</message>
            <invocation>
                <sql:sql>
                    select count(*)
                    from amb.pim_org_dangerous_area da
                    where (da.org_id = :org and :dep is null and da.dep_id is null)
                    or (da.org_id is null and :org is null and da.dep_id = :dep)
                    or (da.org_id = :org and da.dep_id = :dep)
                    <!--or (da.address_id = :address and :org is null and :dep is null)-->
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="org.id" mapping="['org']" domain="integer"/>
                <param name="department.id" mapping="['dep']" domain="integer"/>
                <param name="address.id" mapping="['address']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>

        <!--валидации на поля ввода времени-->
        <condition id="checkTime" level="error">
            <message>Проверьте корретность вводимого времени</message>
            <expression>
                <!--todo >= 3.1-->
                <![CDATA[
                var j = 0;
                var m = [];
                var n = [];
                var res = true;
                var ismeer = false;
                var is_more = false;
                var data = '';
                if (moment(change_data.substring(0,10), 'DD.MM.YYYY') > moment(transmit_date.substring(0,10), 'DD.MM.YYYY')){
                        data = change_data}
                   else{
                        data = transmit_date;
                        };
                if ((typeof receipt_time != 'undefined')&&(receipt_time != null) && ((receipt_time >= '00:00')&&(change_ftime > receipt_time))){
                        m[0] = (moment(change_data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof receipt_time != 'undefined')&&(receipt_time != null))
                        m[0] = (moment(change_data.substring(0,10) +' '+ receipt_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof transmit_time != 'undefined')&&(transmit_time != null)&&((transmit_time >= '00:00' )&&( change_ftime >= transmit_time)||(ismeer == true))) {
                        m[1] = (moment(transmit_date.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm'));
                         ismeer = ismeer||true;
                         is_more = true;}
                    else if ((typeof transmit_time != 'undefined')&&(transmit_time != null))
                        m[1] = (moment(transmit_date.substring(0,10) +' '+ transmit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__')&&((exit_time >= '00:00' )&&( change_ftime >= exit_time)||(ismeer == true))&&(is_more == false)){
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof exit_time != 'undefined')&&(exit_time != null)&&(exit_time != '__:__'))
                        m[2] = (moment(data.substring(0,10) +' '+ exit_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__')&&((coming_time >= '00:00' )&&( change_ftime >= coming_time)||(ismeer == true))&&(is_more == false)){
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof coming_time != 'undefined')&&(coming_time != null)&&(coming_time != '__:__'))
                        m[3] = (moment(data.substring(0,10) +' '+ coming_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof death_time != 'undefined')&&(death_time != null)&&(death_time != '__:__')&&((death_time >= '00:00' )&&( change_ftime >= death_time)||(ismeer == true))&&(is_more == false)){
                        m[4] = (moment(data.substring(0,10) +' '+ death_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof death_time != 'undefined')&&(death_time != null)&&(death_time != '__:__'))
                        m[4] = (moment(data.substring(0,10) +' '+ death_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof transportation_time != 'undefined')&&(transportation_time != null)&&(transportation_time != '__:__')&&((transportation_time >= '00:00' )&&( change_ftime >= transportation_time)||(ismeer == true))&&(is_more == false)){
                        m[5] = (moment(data.substring(0,10) +' '+ transportation_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof transportation_time != 'undefined')&&(transportation_time != null)&&(transportation_time != '__:__'))
                        m[5] = (moment(data.substring(0,10) +' '+ transportation_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof toclinic_time != 'undefined')&&(toclinic_time != null)&&(toclinic_time != '__:__')&&((toclinic_time >= '00:00' )&&( change_ftime >= toclinic_time)||(ismeer == true))&&(is_more == false)){
                        m[6] = (moment(data.substring(0,10) +' '+ toclinic_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof toclinic_time != 'undefined')&&(toclinic_time != null)&&(toclinic_time != '__:__'))
                        m[6] = (moment(data.substring(0,10) +' '+ toclinic_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof time_toclinic != 'undefined')&&(time_toclinic != null)&&(time_toclinic != '__:__')&&((time_toclinic >= '00:00' )&&( change_ftime >= time_toclinic)||(ismeer == true))&&(is_more == false)){
                        m[7] = (moment(data.substring(0,10) +' '+ time_toclinic, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof time_toclinic != 'undefined')&&(time_toclinic != null)&&(time_toclinic != '__:__'))
                        m[7] = (moment(data.substring(0,10) +' '+ time_toclinic, 'DD.MM.YYYY HH:mm'));

                if ((typeof end_time != 'undefined')&&(end_time != null)&&((end_time >= '00:00' )&&( change_ftime >= end_time)||(ismeer == true))&&(is_more == false)){
                        m[8] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                         ismeer = ismeer||true;}
                    else if ((typeof end_time != 'undefined')&&(end_time != null))
                        m[8] = (moment(data.substring(0,10) +' '+ end_time, 'DD.MM.YYYY HH:mm'));

                if ((typeof tosubstation_time != 'undefined')&&(tosubstation_time != null)&&(tosubstation_time != '__:__')&&((tosubstation_time >= '00:00' )&&( change_ftime >= tosubstation_time)||(ismeer == true))&&(is_more == false))
                        m[9] = (moment(data.substring(0,10) +' '+ tosubstation_time, 'DD.MM.YYYY HH:mm')).add(1,'days');
                    else if ((typeof tosubstation_time != 'undefined')&&(tosubstation_time != null)&&(tosubstation_time != '__:__'))
                        m[9] = (moment(data.substring(0,10) +' '+ tosubstation_time, 'DD.MM.YYYY HH:mm'));

                for (var i=0; i<=9; i++ ){
                    if ((typeof m[i] != 'undefined') && (m[i] != null)) {
                             (n[j] = m[i]);
                             j++;
                        }
                        }

                for (var i=1; i<=j-1; i++ ){
                    if ((n[i] <= moment()) && (n[i-1] <= n[i]))
                        {res = res && true;}
                        else {res = res && false}
                    }
                ]]>
            </expression>
        </condition>

        <!-- валидация отметки Алкогольное опьянение -->
        <condition id="upd_is_alco_set" level="warning">
            <message>Внимание! Будет проставлена отметка "Алкогольное опьянение"</message>
            <expression>
                (!is_alco)
            </expression>
        </condition>
        <condition id="upd_is_alco_rem" level="warning">
            <message>Внимание! Будет снята отметка "Алкогольное опьянение"</message>
            <expression on="is_alco">
                <![CDATA[
                    if (is_alco_field){
                        is_alco;
                    } else {true;}
                ]]>
            </expression>
        </condition>

        <!-- Валидация отметки Псих -->
        <condition id="upd_is_psycho_set" level="warning">
            <message>Внимание! Будет проставлена отметка ПСИХ</message>
            <expression on="is_psycho,has_psycho,caller_reason,diagnosis">
                (!is_psycho)
            </expression>
        </condition>

        <condition id="upd_is_psycho_rem" level="warning">
            <message>Внимание! Будет снята отметка ПСИХ</message>
            <expression on="is_psycho,has_psycho,caller_reason,diagnosis">
                <![CDATA[
                if (is_psycho_field){
                    is_psycho;
                } else {true;}
            ]]>
            </expression>
        </condition>

    </validations>
</object>