<?xml version='1.0' encoding='UTF-8'?>
<object xmlns="http://n2oapp.net/framework/config/schema/object-1.0"
        xmlns:sql="http://n2oapp.net/framework/config/schema/action-sql-1.0">
    <!--<id>route</id>-->
    <name>Направление</name>
    <actions>
        <action id="create" name="Добавить">
            <invocation>
                <sql:sql>
                    insert into amb.md_ambulance_route (id,code,name,org_id,from_time,to_time)
                    values(nextval('amb.md_ambulance_route_id_seq'),trim(upper(:code)),trim(:name),:station,:from_time,:to_time)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name="code" mapping="['code']" domain="string"/>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
                <param name="from_time" mapping="['from_time']" domain="date"/>
                <param name="to_time" mapping="['to_time']" domain="date"/>
            </in-parameters>
            <out-parameters>
                <param name="id" mapping="[0][0]" domain="integer"/>
            </out-parameters>
        </action>
        <action id="update">
            <invocation>
                <sql:sql>
                    update amb.md_ambulance_route set code = trim(upper(:code)),name = trim(:name),org_id = :station,from_time = :from_time,to_time = :to_time where id = :id
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
                <param name="code" mapping="['code']" domain="string"/>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
                <param name="from_time" mapping="['from_time']" domain="date"/>
                <param name="to_time" mapping="['to_time']" domain="date"/>
            </in-parameters>
        </action>
        <action id="delete" name="Удалить">
            <invocation>
                <sql:sql>
                    <!--delete from amb.md_ambulance_route where id = :id-->
                    update amb.md_ambulance_route set to_time = now() where id = :id;
                    update amb.md_ambulance_route_service set to_time = now() where route_id = :id;
                    update amb.md_ambulance_route_area set to_time = now() where route_id = :id;
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
            </in-parameters>
            <validations activate="nothing"/>
        </action>
    </actions>
    <validations>
        <constraint id="routecodeUnique" level="error">
            <message>Направление с кодом '{code}' уже существует ->
                Укажите другой код!
            </message>
            <invocation>
                <sql:sql>
                    select count (*)
                    from amb.md_ambulance_route
                    where trim(upper(code)) = trim(upper(:code))
                    and org_id = :station
                    and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
                <param name ="code" mapping = "['code']" domain="string"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
        <constraint id="routenameUnique" level="error">
            <!--<message summary ="Вид вызова с наименованием '%name%' уже существует ->
                Назовите направление иначе!
            </message>-->
            <message>Вид вызова с наименованием '{name}' уже существует ->
                Назовите направление иначе!
            </message>
            <invocation>
                <sql:sql>
                    select count (*)
                    from amb.md_ambulance_route
                    where trim(upper(name)) = trim(upper(:name))
                    and org_id = :station
                    and (:id is null or id != :id)
                </sql:sql>
            </invocation>
            <in-parameters>
                <param name = "id" mapping = "['id']" domain="integer"/>
                <param name ="name" mapping = "['name']" domain="string"/>
                <param name="station.id" mapping="['station']" domain="integer"/>
            </in-parameters>
            <result expression="[0][0][0] == 0"/>
        </constraint>
    </validations>
</object>